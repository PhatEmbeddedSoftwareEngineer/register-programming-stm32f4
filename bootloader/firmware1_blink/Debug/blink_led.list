
blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001fc  08004198  08004198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08004394  08004394  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08004394  08004394  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08004394  08004394  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004394  08004394  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004394  08004394  00001394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004398  08004398  00001398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800439c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080043a0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080043a0  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000102c  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000048a  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  000034f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000138  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014f4  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001dfa  00000000  00000000  00004cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eb29  00000000  00000000  00006ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000855ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000528  00000000  00000000  00085644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00085b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004198 <__do_global_dtors_aux>:
 8004198:	b510      	push	{r4, lr}
 800419a:	4c05      	ldr	r4, [pc, #20]	@ (80041b0 <__do_global_dtors_aux+0x18>)
 800419c:	7823      	ldrb	r3, [r4, #0]
 800419e:	b933      	cbnz	r3, 80041ae <__do_global_dtors_aux+0x16>
 80041a0:	4b04      	ldr	r3, [pc, #16]	@ (80041b4 <__do_global_dtors_aux+0x1c>)
 80041a2:	b113      	cbz	r3, 80041aa <__do_global_dtors_aux+0x12>
 80041a4:	4804      	ldr	r0, [pc, #16]	@ (80041b8 <__do_global_dtors_aux+0x20>)
 80041a6:	f3af 8000 	nop.w
 80041aa:	2301      	movs	r3, #1
 80041ac:	7023      	strb	r3, [r4, #0]
 80041ae:	bd10      	pop	{r4, pc}
 80041b0:	20000004 	.word	0x20000004
 80041b4:	00000000 	.word	0x00000000
 80041b8:	0800437c 	.word	0x0800437c

080041bc <frame_dummy>:
 80041bc:	b508      	push	{r3, lr}
 80041be:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <frame_dummy+0x10>)
 80041c0:	b11b      	cbz	r3, 80041ca <frame_dummy+0xe>
 80041c2:	4903      	ldr	r1, [pc, #12]	@ (80041d0 <frame_dummy+0x14>)
 80041c4:	4803      	ldr	r0, [pc, #12]	@ (80041d4 <frame_dummy+0x18>)
 80041c6:	f3af 8000 	nop.w
 80041ca:	bd08      	pop	{r3, pc}
 80041cc:	00000000 	.word	0x00000000
 80041d0:	20000008 	.word	0x20000008
 80041d4:	0800437c 	.word	0x0800437c

080041d8 <main>:
#define RCC_BASE_ADDR	0x40023800
#define GPIOD_BASE_ADDR	0x40020C00


int main(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
	uint32_t *RCC_AHB1ENR = (uint32_t*)(RCC_BASE_ADDR + 0x30);
 80041de:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <main+0x4c>)
 80041e0:	60bb      	str	r3, [r7, #8]
	*RCC_AHB1ENR |= (1U << 3);
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f043 0208 	orr.w	r2, r3, #8
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	601a      	str	r2, [r3, #0]

	uint32_t *GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR);
 80041ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004228 <main+0x50>)
 80041f0:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER |= (1U << 30);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]

	uint32_t *GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14);
 80041fe:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <main+0x54>)
 8004200:	603b      	str	r3, [r7, #0]
	while(1)
	{
		*GPIOD_ODR ^= (1U << 15);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f483 4200 	eor.w	r2, r3, #32768	@ 0x8000
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 1000000;i++);
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e002      	b.n	800421a <main+0x42>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3301      	adds	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a04      	ldr	r2, [pc, #16]	@ (8004230 <main+0x58>)
 800421e:	4293      	cmp	r3, r2
 8004220:	ddf8      	ble.n	8004214 <main+0x3c>
		*GPIOD_ODR ^= (1U << 15);
 8004222:	e7ee      	b.n	8004202 <main+0x2a>
 8004224:	40023830 	.word	0x40023830
 8004228:	40020c00 	.word	0x40020c00
 800422c:	40020c14 	.word	0x40020c14
 8004230:	000f423f 	.word	0x000f423f

08004234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004238:	bf00      	nop
 800423a:	e7fd      	b.n	8004238 <NMI_Handler+0x4>

0800423c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004240:	bf00      	nop
 8004242:	e7fd      	b.n	8004240 <HardFault_Handler+0x4>

08004244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004248:	bf00      	nop
 800424a:	e7fd      	b.n	8004248 <MemManage_Handler+0x4>

0800424c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <BusFault_Handler+0x4>

08004254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <UsageFault_Handler+0x4>

0800425c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004260:	bf00      	nop
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800426a:	b480      	push	{r7}
 800426c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800428a:	f000 f83f 	bl	800430c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004298:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <SystemInit+0x20>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429e:	4a05      	ldr	r2, [pc, #20]	@ (80042b4 <SystemInit+0x20>)
 80042a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	e000ed00 	.word	0xe000ed00

080042b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80042b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042bc:	f7ff ffea 	bl	8004294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042c0:	480c      	ldr	r0, [pc, #48]	@ (80042f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042c2:	490d      	ldr	r1, [pc, #52]	@ (80042f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042c4:	4a0d      	ldr	r2, [pc, #52]	@ (80042fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042c8:	e002      	b.n	80042d0 <LoopCopyDataInit>

080042ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ce:	3304      	adds	r3, #4

080042d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042d4:	d3f9      	bcc.n	80042ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004300 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042d8:	4c0a      	ldr	r4, [pc, #40]	@ (8004304 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042dc:	e001      	b.n	80042e2 <LoopFillZerobss>

080042de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042e0:	3204      	adds	r2, #4

080042e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042e4:	d3fb      	bcc.n	80042de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042e6:	f000 f825 	bl	8004334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ea:	f7ff ff75 	bl	80041d8 <main>
  bx  lr    
 80042ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80042f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80042fc:	0800439c 	.word	0x0800439c
  ldr r2, =_sbss
 8004300:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8004304:	20000024 	.word	0x20000024

08004308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004308:	e7fe      	b.n	8004308 <ADC_IRQHandler>
	...

0800430c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_IncTick+0x20>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <HAL_IncTick+0x24>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4413      	add	r3, r2
 800431c:	4a04      	ldr	r2, [pc, #16]	@ (8004330 <HAL_IncTick+0x24>)
 800431e:	6013      	str	r3, [r2, #0]
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000000 	.word	0x20000000
 8004330:	20000020 	.word	0x20000020

08004334 <__libc_init_array>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	4d0d      	ldr	r5, [pc, #52]	@ (800436c <__libc_init_array+0x38>)
 8004338:	4c0d      	ldr	r4, [pc, #52]	@ (8004370 <__libc_init_array+0x3c>)
 800433a:	1b64      	subs	r4, r4, r5
 800433c:	10a4      	asrs	r4, r4, #2
 800433e:	2600      	movs	r6, #0
 8004340:	42a6      	cmp	r6, r4
 8004342:	d109      	bne.n	8004358 <__libc_init_array+0x24>
 8004344:	4d0b      	ldr	r5, [pc, #44]	@ (8004374 <__libc_init_array+0x40>)
 8004346:	4c0c      	ldr	r4, [pc, #48]	@ (8004378 <__libc_init_array+0x44>)
 8004348:	f000 f818 	bl	800437c <_init>
 800434c:	1b64      	subs	r4, r4, r5
 800434e:	10a4      	asrs	r4, r4, #2
 8004350:	2600      	movs	r6, #0
 8004352:	42a6      	cmp	r6, r4
 8004354:	d105      	bne.n	8004362 <__libc_init_array+0x2e>
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	f855 3b04 	ldr.w	r3, [r5], #4
 800435c:	4798      	blx	r3
 800435e:	3601      	adds	r6, #1
 8004360:	e7ee      	b.n	8004340 <__libc_init_array+0xc>
 8004362:	f855 3b04 	ldr.w	r3, [r5], #4
 8004366:	4798      	blx	r3
 8004368:	3601      	adds	r6, #1
 800436a:	e7f2      	b.n	8004352 <__libc_init_array+0x1e>
 800436c:	08004394 	.word	0x08004394
 8004370:	08004394 	.word	0x08004394
 8004374:	08004394 	.word	0x08004394
 8004378:	08004398 	.word	0x08004398

0800437c <_init>:
 800437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437e:	bf00      	nop
 8004380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004382:	bc08      	pop	{r3}
 8004384:	469e      	mov	lr, r3
 8004386:	4770      	bx	lr

08004388 <_fini>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr
