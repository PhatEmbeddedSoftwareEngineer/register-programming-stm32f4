
thu_nghiem_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000414  0800041c  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000414  08000414  0000141c  2**0
                  CONTENTS
  4 .ARM          00000000  08000414  08000414  0000141c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000414  0800041c  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000414  08000414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000418  08000418  00001418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800041c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800041c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000067c  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001b1  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00001c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003f  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011d8  00000000  00000000  00001d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005bf  00000000  00000000  00002ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004bb8  00000000  00000000  000034b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000806e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  000080b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0000817c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003fc 	.word	0x080003fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003fc 	.word	0x080003fc

080001d4 <uart1_rxtx>:
#include <stdint.h>
#include "define.h"
void uart1_rxtx(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
#if 1
	// PA9 TX
	// 1. enable clock gpioa
	RCC->RCC_AHB1ENR |= (1UL<<0);
 80001da:	4b41      	ldr	r3, [pc, #260]	@ (80002e0 <uart1_rxtx+0x10c>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001de:	4a40      	ldr	r2, [pc, #256]	@ (80002e0 <uart1_rxtx+0x10c>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	@ 0x30
	//2 . set mode alternate
	GPIOA->GPIO_MODER &= ~(1U << 18);
 80001e6:	4b3f      	ldr	r3, [pc, #252]	@ (80002e4 <uart1_rxtx+0x110>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a3e      	ldr	r2, [pc, #248]	@ (80002e4 <uart1_rxtx+0x110>)
 80001ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80001f0:	6013      	str	r3, [r2, #0]
	GPIOA->GPIO_MODER |= (1U << 19);
 80001f2:	4b3c      	ldr	r3, [pc, #240]	@ (80002e4 <uart1_rxtx+0x110>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a3b      	ldr	r2, [pc, #236]	@ (80002e4 <uart1_rxtx+0x110>)
 80001f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001fc:	6013      	str	r3, [r2, #0]
	// 3.  SET ALTERNATE PIN FOR PA9
	GPIOA->GPIO_AFR[1] &= ~ (0xF << 4);
 80001fe:	4b39      	ldr	r3, [pc, #228]	@ (80002e4 <uart1_rxtx+0x110>)
 8000200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000202:	4a38      	ldr	r2, [pc, #224]	@ (80002e4 <uart1_rxtx+0x110>)
 8000204:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000208:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->GPIO_AFR[1] |= (1U << 6) | (1U << 5) | (1U << 4);
 800020a:	4b36      	ldr	r3, [pc, #216]	@ (80002e4 <uart1_rxtx+0x110>)
 800020c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800020e:	4a35      	ldr	r2, [pc, #212]	@ (80002e4 <uart1_rxtx+0x110>)
 8000210:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000214:	6253      	str	r3, [r2, #36]	@ 0x24
	// PA10 RX
	// set mode alternate
	GPIOA->GPIO_MODER &= ~(3U << 20);
 8000216:	4b33      	ldr	r3, [pc, #204]	@ (80002e4 <uart1_rxtx+0x110>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a32      	ldr	r2, [pc, #200]	@ (80002e4 <uart1_rxtx+0x110>)
 800021c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000220:	6013      	str	r3, [r2, #0]
	GPIOA->GPIO_MODER |= (2U << 20);
 8000222:	4b30      	ldr	r3, [pc, #192]	@ (80002e4 <uart1_rxtx+0x110>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a2f      	ldr	r2, [pc, #188]	@ (80002e4 <uart1_rxtx+0x110>)
 8000228:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800022c:	6013      	str	r3, [r2, #0]

	// set alternate pin for PA10
	GPIOA->GPIO_AFR[1] &= ~ (0xF << 8);
 800022e:	4b2d      	ldr	r3, [pc, #180]	@ (80002e4 <uart1_rxtx+0x110>)
 8000230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000232:	4a2c      	ldr	r2, [pc, #176]	@ (80002e4 <uart1_rxtx+0x110>)
 8000234:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000238:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->GPIO_AFR[1] |= (7U << 8);
 800023a:	4b2a      	ldr	r3, [pc, #168]	@ (80002e4 <uart1_rxtx+0x110>)
 800023c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800023e:	4a29      	ldr	r2, [pc, #164]	@ (80002e4 <uart1_rxtx+0x110>)
 8000240:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000244:	6253      	str	r3, [r2, #36]	@ 0x24

	// 1. enable clock usart 1
	RCC->RCC_APB2ENR |= USART1_ENABLE;
 8000246:	4b26      	ldr	r3, [pc, #152]	@ (80002e0 <uart1_rxtx+0x10c>)
 8000248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800024a:	4a25      	ldr	r2, [pc, #148]	@ (80002e0 <uart1_rxtx+0x10c>)
 800024c:	f043 0310 	orr.w	r3, r3, #16
 8000250:	6453      	str	r3, [r2, #68]	@ 0x44
	// over8 = 0
	USART1->USART_CR1 &= ~ (1U << 15); // OVER8 ==0
 8000252:	4b25      	ldr	r3, [pc, #148]	@ (80002e8 <uart1_rxtx+0x114>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	4a24      	ldr	r2, [pc, #144]	@ (80002e8 <uart1_rxtx+0x114>)
 8000258:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800025c:	60d3      	str	r3, [r2, #12]
	// 2. set baudrate
	/**
	 * baudrate = flck/(8*(2-OVER8)*USARTDIV)
	 */
	USART1->USART_BRR |= (8U << 4) | (11U << 0);
 800025e:	4b22      	ldr	r3, [pc, #136]	@ (80002e8 <uart1_rxtx+0x114>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	4a21      	ldr	r2, [pc, #132]	@ (80002e8 <uart1_rxtx+0x114>)
 8000264:	f043 038b 	orr.w	r3, r3, #139	@ 0x8b
 8000268:	6093      	str	r3, [r2, #8]
	// 3. SET MODE TE
	USART1->USART_CR1 |= (1U << 3);
 800026a:	4b1f      	ldr	r3, [pc, #124]	@ (80002e8 <uart1_rxtx+0x114>)
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	4a1e      	ldr	r2, [pc, #120]	@ (80002e8 <uart1_rxtx+0x114>)
 8000270:	f043 0308 	orr.w	r3, r3, #8
 8000274:	60d3      	str	r3, [r2, #12]

	// SET MODE RX
	USART1->USART_CR1 |= (1U << 2);
 8000276:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <uart1_rxtx+0x114>)
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	4a1b      	ldr	r2, [pc, #108]	@ (80002e8 <uart1_rxtx+0x114>)
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	60d3      	str	r3, [r2, #12]

	// 4. 1 bit start, 8 bit data, 1 stop bit
	USART1->USART_CR1 &= ~ (1U << 12);
 8000282:	4b19      	ldr	r3, [pc, #100]	@ (80002e8 <uart1_rxtx+0x114>)
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	4a18      	ldr	r2, [pc, #96]	@ (80002e8 <uart1_rxtx+0x114>)
 8000288:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800028c:	60d3      	str	r3, [r2, #12]
	USART1->USART_CR2 &= ~(3U << 12);
 800028e:	4b16      	ldr	r3, [pc, #88]	@ (80002e8 <uart1_rxtx+0x114>)
 8000290:	691b      	ldr	r3, [r3, #16]
 8000292:	4a15      	ldr	r2, [pc, #84]	@ (80002e8 <uart1_rxtx+0x114>)
 8000294:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000298:	6113      	str	r3, [r2, #16]
	// 6 enable interrupt rx
	USART1->USART_CR1 |= (1U << 5);
 800029a:	4b13      	ldr	r3, [pc, #76]	@ (80002e8 <uart1_rxtx+0x114>)
 800029c:	68db      	ldr	r3, [r3, #12]
 800029e:	4a12      	ldr	r2, [pc, #72]	@ (80002e8 <uart1_rxtx+0x114>)
 80002a0:	f043 0320 	orr.w	r3, r3, #32
 80002a4:	60d3      	str	r3, [r2, #12]
 80002a6:	2325      	movs	r3, #37	@ 0x25
 80002a8:	71fb      	strb	r3, [r7, #7]
__STATIC_FORCEINLINE void __NVIC_EnableIRQ(IRQ_Priority_t type_IRQ)
{
    if(((int32_t)type_IRQ) >=0)
    {
        __COMPILER_BARRIER();
        NVIC->NVIC_ISER[(((uint32_t)type_IRQ) >> 5U)] = (uint32_t) (1U << (uint32_t)(((uint32_t)type_IRQ) & 0x1F));
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	f003 031f 	and.w	r3, r3, #31
 80002b0:	490e      	ldr	r1, [pc, #56]	@ (80002ec <uart1_rxtx+0x118>)
 80002b2:	79fa      	ldrb	r2, [r7, #7]
 80002b4:	0952      	lsrs	r2, r2, #5
 80002b6:	b2d2      	uxtb	r2, r2
 80002b8:	4610      	mov	r0, r2
 80002ba:	2201      	movs	r2, #1
 80002bc:	fa02 f303 	lsl.w	r3, r2, r3
 80002c0:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
        __COMPILER_BARRIER();
    }
}
 80002c4:	bf00      	nop
	__NVIC_EnableIRQ(USART1_position);
	//  5. enable usart
	USART1->USART_CR1 |= (1U<<13);//enable uart
 80002c6:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <uart1_rxtx+0x114>)
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	4a07      	ldr	r2, [pc, #28]	@ (80002e8 <uart1_rxtx+0x114>)
 80002cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002d0:	60d3      	str	r3, [r2, #12]
#endif

}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020000 	.word	0x40020000
 80002e8:	40011000 	.word	0x40011000
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <USART1_IRQHandler>:
volatile uint8_t data;
void USART1_IRQHandler()
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0

	if(USART1->USART_SR & (1U <<5))
 80002f4:	4b07      	ldr	r3, [pc, #28]	@ (8000314 <USART1_IRQHandler+0x24>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0320 	and.w	r3, r3, #32
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d004      	beq.n	800030a <USART1_IRQHandler+0x1a>
	{
		//myData.haveISR=true;
		data = USART1->USART_DR;
 8000300:	4b04      	ldr	r3, [pc, #16]	@ (8000314 <USART1_IRQHandler+0x24>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <USART1_IRQHandler+0x28>)
 8000308:	701a      	strb	r2, [r3, #0]
		// else
		// 	myData.size=0;
		//printf("%c\n",_var.data);
	}

}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40011000 	.word	0x40011000
 8000318:	2000001c 	.word	0x2000001c

0800031c <print>:

void print(uint8_t data)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
	USART1->USART_DR = (data & 0xFF);
 8000326:	4a08      	ldr	r2, [pc, #32]	@ (8000348 <print+0x2c>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	6053      	str	r3, [r2, #4]
	while(!(USART1->USART_SR & (1U << 7)));
 800032c:	bf00      	nop
 800032e:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <print+0x2c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f9      	beq.n	800032e <print+0x12>
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40011000 	.word	0x40011000

0800034c <main>:

int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	uart1_rxtx();
 8000350:	f7ff ff40 	bl	80001d4 <uart1_rxtx>
	print('x');
 8000354:	2078      	movs	r0, #120	@ 0x78
 8000356:	f7ff ffe1 	bl	800031c <print>
	return 0;
 800035a:	2300      	movs	r3, #0
}
 800035c:	4618      	mov	r0, r3
 800035e:	bd80      	pop	{r7, pc}

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	@ (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000364:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	@ (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	@ (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	@ (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	@ (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	@ (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 f811 	bl	80003b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff ffdb 	bl	800034c <main>

08000396 <LoopForever>:

LoopForever:
  b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a4:	0800041c 	.word	0x0800041c
  ldr r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ac:	20000020 	.word	0x20000020

080003b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <__libc_init_array>:
 80003b4:	b570      	push	{r4, r5, r6, lr}
 80003b6:	4d0d      	ldr	r5, [pc, #52]	@ (80003ec <__libc_init_array+0x38>)
 80003b8:	4c0d      	ldr	r4, [pc, #52]	@ (80003f0 <__libc_init_array+0x3c>)
 80003ba:	1b64      	subs	r4, r4, r5
 80003bc:	10a4      	asrs	r4, r4, #2
 80003be:	2600      	movs	r6, #0
 80003c0:	42a6      	cmp	r6, r4
 80003c2:	d109      	bne.n	80003d8 <__libc_init_array+0x24>
 80003c4:	4d0b      	ldr	r5, [pc, #44]	@ (80003f4 <__libc_init_array+0x40>)
 80003c6:	4c0c      	ldr	r4, [pc, #48]	@ (80003f8 <__libc_init_array+0x44>)
 80003c8:	f000 f818 	bl	80003fc <_init>
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	2600      	movs	r6, #0
 80003d2:	42a6      	cmp	r6, r4
 80003d4:	d105      	bne.n	80003e2 <__libc_init_array+0x2e>
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003dc:	4798      	blx	r3
 80003de:	3601      	adds	r6, #1
 80003e0:	e7ee      	b.n	80003c0 <__libc_init_array+0xc>
 80003e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e6:	4798      	blx	r3
 80003e8:	3601      	adds	r6, #1
 80003ea:	e7f2      	b.n	80003d2 <__libc_init_array+0x1e>
 80003ec:	08000414 	.word	0x08000414
 80003f0:	08000414 	.word	0x08000414
 80003f4:	08000414 	.word	0x08000414
 80003f8:	08000418 	.word	0x08000418

080003fc <_init>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr

08000408 <_fini>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr
