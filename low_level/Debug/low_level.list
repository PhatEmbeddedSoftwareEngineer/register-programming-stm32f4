
low_level.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800034c  08000354  00001354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800034c  0800034c  00001354  2**0
                  CONTENTS
  4 .ARM          00000000  0800034c  0800034c  00001354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800034c  08000354  00001354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800034c  0800034c  0000134c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000350  08000350  00001350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000354  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000354  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000367  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000cf  00000000  00000000  000016eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000017c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000122b  00000000  00000000  00001835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000051e  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004ba8  00000000  00000000  00002f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00007b26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00007b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00007bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000334 	.word	0x08000334

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000334 	.word	0x08000334

080001d4 <main>:
#define APB1_CLK			SYS_FREQ

#define GPIOA_ENABLE			(1UL<<0) // 0b 0000 0000 0000 0000 0000 0000 0000 0001

int main()
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	// set pin 27 to 0
	// GPIOC->GPIO_PUPDR |= (1U << 26);
	// GPIOC->GPIO_PUPDR &= ~(1U << 27);
	/***************************************************************************** */
	// 1. enable clock gpioa
	RCC->RCC_AHB1ENR |= GPIOA_ENABLE;
 80001da:	4b2b      	ldr	r3, [pc, #172]	@ (8000288 <main+0xb4>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001de:	4a2a      	ldr	r2, [pc, #168]	@ (8000288 <main+0xb4>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	@ 0x30
	//2 . set mode alternate 
	GPIOA->GPIO_MODER &= ~(1U << 18);
 80001e6:	4b29      	ldr	r3, [pc, #164]	@ (800028c <main+0xb8>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a28      	ldr	r2, [pc, #160]	@ (800028c <main+0xb8>)
 80001ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80001f0:	6013      	str	r3, [r2, #0]
	GPIOA->GPIO_MODER |= (1U << 19);
 80001f2:	4b26      	ldr	r3, [pc, #152]	@ (800028c <main+0xb8>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a25      	ldr	r2, [pc, #148]	@ (800028c <main+0xb8>)
 80001f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80001fc:	6013      	str	r3, [r2, #0]
	// 3.  SET ALTERNATE PIN FOR PA9
	GPIOA->GPIO_AFR[1] &= ~ (0xF << 4);
 80001fe:	4b23      	ldr	r3, [pc, #140]	@ (800028c <main+0xb8>)
 8000200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000202:	4a22      	ldr	r2, [pc, #136]	@ (800028c <main+0xb8>)
 8000204:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000208:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->GPIO_AFR[1] |= (1U << 6) | (1U << 5) | (1U << 4);
 800020a:	4b20      	ldr	r3, [pc, #128]	@ (800028c <main+0xb8>)
 800020c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800020e:	4a1f      	ldr	r2, [pc, #124]	@ (800028c <main+0xb8>)
 8000210:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000214:	6253      	str	r3, [r2, #36]	@ 0x24
	

	// 1. enable clock usart 1
	RCC->RCC_APB2ENR |= USART1_ENABLE;
 8000216:	4b1c      	ldr	r3, [pc, #112]	@ (8000288 <main+0xb4>)
 8000218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800021a:	4a1b      	ldr	r2, [pc, #108]	@ (8000288 <main+0xb4>)
 800021c:	f043 0310 	orr.w	r3, r3, #16
 8000220:	6453      	str	r3, [r2, #68]	@ 0x44
	// 2. set baudrate
	USART1->USART_BRR |= (8U << 4) | (11U << 0);
 8000222:	4b1b      	ldr	r3, [pc, #108]	@ (8000290 <main+0xbc>)
 8000224:	689b      	ldr	r3, [r3, #8]
 8000226:	4a1a      	ldr	r2, [pc, #104]	@ (8000290 <main+0xbc>)
 8000228:	f043 038b 	orr.w	r3, r3, #139	@ 0x8b
 800022c:	6093      	str	r3, [r2, #8]
	// 3. SET MODE TE
	USART1->USART_CR1 |= (1U << 3);
 800022e:	4b18      	ldr	r3, [pc, #96]	@ (8000290 <main+0xbc>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	4a17      	ldr	r2, [pc, #92]	@ (8000290 <main+0xbc>)
 8000234:	f043 0308 	orr.w	r3, r3, #8
 8000238:	60d3      	str	r3, [r2, #12]
	// 4. 1 bit start, 8 bit data, 1 stop bit
	USART1->USART_CR1 |= (1U << 12);
 800023a:	4b15      	ldr	r3, [pc, #84]	@ (8000290 <main+0xbc>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	4a14      	ldr	r2, [pc, #80]	@ (8000290 <main+0xbc>)
 8000240:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000244:	60d3      	str	r3, [r2, #12]
	USART1->USART_CR2 &= ~(3U << 12);
 8000246:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <main+0xbc>)
 8000248:	691b      	ldr	r3, [r3, #16]
 800024a:	4a11      	ldr	r2, [pc, #68]	@ (8000290 <main+0xbc>)
 800024c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000250:	6113      	str	r3, [r2, #16]
	//  5. enable usart
	USART1->USART_CR1 |= (1U<<13);//enable uart
 8000252:	4b0f      	ldr	r3, [pc, #60]	@ (8000290 <main+0xbc>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	4a0e      	ldr	r2, [pc, #56]	@ (8000290 <main+0xbc>)
 8000258:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800025c:	60d3      	str	r3, [r2, #12]


	while(1)
	{
		while (!(USART1->USART_SR & (1<<6)));
 800025e:	bf00      	nop
 8000260:	4b0b      	ldr	r3, [pc, #44]	@ (8000290 <main+0xbc>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0f9      	beq.n	8000260 <main+0x8c>
		USART1->USART_DR = ('P' & 0xFF);
 800026c:	4b08      	ldr	r3, [pc, #32]	@ (8000290 <main+0xbc>)
 800026e:	2250      	movs	r2, #80	@ 0x50
 8000270:	605a      	str	r2, [r3, #4]

		for(int i = 0; i < 1000000; i++);
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	e002      	b.n	800027e <main+0xaa>
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a04      	ldr	r2, [pc, #16]	@ (8000294 <main+0xc0>)
 8000282:	4293      	cmp	r3, r2
 8000284:	ddf8      	ble.n	8000278 <main+0xa4>
		while (!(USART1->USART_SR & (1<<6)));
 8000286:	e7ea      	b.n	800025e <main+0x8a>
 8000288:	40023800 	.word	0x40023800
 800028c:	40020000 	.word	0x40020000
 8000290:	40011000 	.word	0x40011000
 8000294:	000f423f 	.word	0x000f423f

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	@ (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	@ (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	@ (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	@ (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	@ (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 f811 	bl	80002ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f7ff ff83 	bl	80001d4 <main>

080002ce <LoopForever>:

LoopForever:
  b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002dc:	08000354 	.word	0x08000354
  ldr r2, =_sbss
 80002e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC_IRQHandler>
	...

080002ec <__libc_init_array>:
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000324 <__libc_init_array+0x38>)
 80002f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000328 <__libc_init_array+0x3c>)
 80002f2:	1b64      	subs	r4, r4, r5
 80002f4:	10a4      	asrs	r4, r4, #2
 80002f6:	2600      	movs	r6, #0
 80002f8:	42a6      	cmp	r6, r4
 80002fa:	d109      	bne.n	8000310 <__libc_init_array+0x24>
 80002fc:	4d0b      	ldr	r5, [pc, #44]	@ (800032c <__libc_init_array+0x40>)
 80002fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000330 <__libc_init_array+0x44>)
 8000300:	f000 f818 	bl	8000334 <_init>
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	10a4      	asrs	r4, r4, #2
 8000308:	2600      	movs	r6, #0
 800030a:	42a6      	cmp	r6, r4
 800030c:	d105      	bne.n	800031a <__libc_init_array+0x2e>
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f855 3b04 	ldr.w	r3, [r5], #4
 8000314:	4798      	blx	r3
 8000316:	3601      	adds	r6, #1
 8000318:	e7ee      	b.n	80002f8 <__libc_init_array+0xc>
 800031a:	f855 3b04 	ldr.w	r3, [r5], #4
 800031e:	4798      	blx	r3
 8000320:	3601      	adds	r6, #1
 8000322:	e7f2      	b.n	800030a <__libc_init_array+0x1e>
 8000324:	0800034c 	.word	0x0800034c
 8000328:	0800034c 	.word	0x0800034c
 800032c:	0800034c 	.word	0x0800034c
 8000330:	08000350 	.word	0x08000350

08000334 <_init>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr

08000340 <_fini>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr
