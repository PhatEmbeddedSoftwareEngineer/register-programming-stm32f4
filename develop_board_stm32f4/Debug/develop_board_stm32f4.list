
develop_board_stm32f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08004478  08004478  00005478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a8  080048a8  000061c8  2**0
                  CONTENTS
  4 .ARM          00000008  080048a8  080048a8  000058a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048b0  080048b0  000061c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b0  080048b0  000058b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048b4  080048b4  000058b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c8  20000000  080048b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  200001c8  08004a80  000061c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08004a80  00006354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f26  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001156  00000000  00000000  0000a11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000398  00000000  00000000  0000b278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000279  00000000  00000000  0000b610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004361  00000000  00000000  0000b889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005e68  00000000  00000000  0000fbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084cdf  00000000  00000000  00015a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a731  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c54  00000000  00000000  0009a774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0009c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c8 	.word	0x200001c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800445c 	.word	0x0800445c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001cc 	.word	0x200001cc
 80001dc:	0800445c 	.word	0x0800445c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
 */

extern uint8_t data_rec[6];
const float SCALE_FACTOR = 0.0078;
int main(void)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b08f      	sub	sp, #60	@ 0x3c
 8000bbc:	af06      	add	r7, sp, #24
	int16_t x,y,z;
	double xg, yg, zg;
	// char msg[] = "hello world\r\n";
	// int leng = strlen(msg);
	uart1_rxtx();
 8000bbe:	f000 fce9 	bl	8001594 <uart1_rxtx>
	adxl_init();
 8000bc2:	f000 fa05 	bl	8000fd0 <adxl_init>
	//init_dma2_usart1_tx((uint32_t)&USART1->USART_DR,(uint32_t)&msg,leng);
	while(1)
	{
		adxl_read_values(DATA_START_ADDR);
 8000bc6:	2032      	movs	r0, #50	@ 0x32
 8000bc8:	f000 f9f0 	bl	8000fac <adxl_read_values>
		x = ((data_rec[1] << 8) | data_rec[0]);
 8000bcc:	4b36      	ldr	r3, [pc, #216]	@ (8000ca8 <main+0xf0>)
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	4b34      	ldr	r3, [pc, #208]	@ (8000ca8 <main+0xf0>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	83fb      	strh	r3, [r7, #30]
		y = ((data_rec[3] << 8) | data_rec[2]);
 8000bde:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <main+0xf0>)
 8000be0:	78db      	ldrb	r3, [r3, #3]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	4b30      	ldr	r3, [pc, #192]	@ (8000ca8 <main+0xf0>)
 8000be8:	789b      	ldrb	r3, [r3, #2]
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	83bb      	strh	r3, [r7, #28]
		z = ((data_rec[5] << 8) | data_rec[4]);
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <main+0xf0>)
 8000bf2:	795b      	ldrb	r3, [r3, #5]
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <main+0xf0>)
 8000bfa:	791b      	ldrb	r3, [r3, #4]
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	837b      	strh	r3, [r7, #26]

		xg = (double)(x * SCALE_FACTOR);
 8000c02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c06:	ee07 3a90 	vmov	s15, r3
 8000c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c0e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000cac <main+0xf4>
 8000c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c16:	ee17 0a90 	vmov	r0, s15
 8000c1a:	f7ff fc9d 	bl	8000558 <__aeabi_f2d>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	460b      	mov	r3, r1
 8000c22:	e9c7 2304 	strd	r2, r3, [r7, #16]
		yg = (double)(y * SCALE_FACTOR);
 8000c26:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c32:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000cac <main+0xf4>
 8000c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c3a:	ee17 0a90 	vmov	r0, s15
 8000c3e:	f7ff fc8b 	bl	8000558 <__aeabi_f2d>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	e9c7 2302 	strd	r2, r3, [r7, #8]
		zg = (double)(z * SCALE_FACTOR);
 8000c4a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000c4e:	ee07 3a90 	vmov	s15, r3
 8000c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c56:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000cac <main+0xf4>
 8000c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c5e:	ee17 0a90 	vmov	r0, s15
 8000c62:	f7ff fc79 	bl	8000558 <__aeabi_f2d>
 8000c66:	4602      	mov	r2, r0
 8000c68:	460b      	mov	r3, r1
 8000c6a:	e9c7 2300 	strd	r2, r3, [r7]

		myPrintf("x: %d\n"
 8000c6e:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8000c72:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8000c76:	f9b7 401a 	ldrsh.w	r4, [r7, #26]
 8000c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000c8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c8e:	e9cd 2300 	strd	r2, r3, [sp]
 8000c92:	4623      	mov	r3, r4
 8000c94:	4602      	mov	r2, r0
 8000c96:	4806      	ldr	r0, [pc, #24]	@ (8000cb0 <main+0xf8>)
 8000c98:	f000 fd52 	bl	8001740 <myPrintf>
				"y: %d\n"
				"z: %d\n"
				"xg: %.2f\n"
				"yg: %.2f\n"
				"zg: %.2f\n",x,y,z,xg,yg,zg);
		delay_ms(100);
 8000c9c:	2064      	movs	r0, #100	@ 0x64
 8000c9e:	f000 fbf9 	bl	8001494 <delay_ms>
		adxl_read_values(DATA_START_ADDR);
 8000ca2:	bf00      	nop
 8000ca4:	e78f      	b.n	8000bc6 <main+0xe>
 8000ca6:	bf00      	nop
 8000ca8:	200001ec 	.word	0x200001ec
 8000cac:	3bff9724 	.word	0x3bff9724
 8000cb0:	08004478 	.word	0x08004478

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <NMI_Handler+0x4>

08000cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <MemManage_Handler+0x4>

08000ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  return 1;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_kill>:

int _kill(int pid, int sig)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d20:	f001 fb24 	bl	800236c <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2216      	movs	r2, #22
 8000d28:	601a      	str	r2, [r3, #0]
  return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_exit>:

void _exit (int status)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffe7 	bl	8000d16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <_exit+0x12>

08000d4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	e00a      	b.n	8000d74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d5e:	f3af 8000 	nop.w
 8000d62:	4601      	mov	r1, r0
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	60ba      	str	r2, [r7, #8]
 8000d6a:	b2ca      	uxtb	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	3301      	adds	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dbf0      	blt.n	8000d5e <_read+0x12>
  }

  return len;
 8000d7c:	687b      	ldr	r3, [r7, #4]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e009      	b.n	8000dac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf1      	blt.n	8000d98 <_write+0x12>
  }
  return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_close>:

int _close(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de6:	605a      	str	r2, [r3, #4]
  return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_isatty>:

int _isatty(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	@ (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	@ (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f001 fa88 	bl	800236c <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20018000 	.word	0x20018000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	200001e4 	.word	0x200001e4
 8000e90:	20000358 	.word	0x20000358

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	@ (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ebc:	f7ff ffea 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec2:	490d      	ldr	r1, [pc, #52]	@ (8000ef8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f001 fa47 	bl	8002378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fe65 	bl	8000bb8 <main>
  bx  lr    
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ef0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000efc:	080048b8 	.word	0x080048b8
  ldr r2, =_sbss
 8000f00:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000f04:	20000354 	.word	0x20000354

08000f08 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <DMA1_Stream0_IRQHandler>
	...

08000f0c <callBack>:
    while(!(ADC1->ADC_SR & END_OF_CONVERT ));
    return ADC1->ADC_DR;
}

static void callBack(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
	uint16_t adcValue = ADC1->ADC_DR;
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <callBack+0x20>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	80fb      	strh	r3, [r7, #6]
	myPrintf("adcValue := %d\n",adcValue);
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <callBack+0x24>)
 8000f1e:	f000 fc0f 	bl	8001740 <myPrintf>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40012000 	.word	0x40012000
 8000f30:	080044a8 	.word	0x080044a8

08000f34 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    if(ADC1->ADC_SR & (END_OF_CONVERT))
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <ADC_IRQHandler+0x24>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d007      	beq.n	8000f54 <ADC_IRQHandler+0x20>
	{
		ADC1->ADC_SR &= ~ END_OF_CONVERT;
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <ADC_IRQHandler+0x24>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a03      	ldr	r2, [pc, #12]	@ (8000f58 <ADC_IRQHandler+0x24>)
 8000f4a:	f023 0302 	bic.w	r3, r3, #2
 8000f4e:	6013      	str	r3, [r2, #0]
		callBack();
 8000f50:	f7ff ffdc 	bl	8000f0c <callBack>
	}
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40012000 	.word	0x40012000

08000f5c <adxl_read_address>:
#include "uart.h"
char data;
uint8_t data_rec[6];

void adxl_read_address(uint8_t reg)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	//
	I2C1_byteRead(DEVICE_ADDR,reg,&data);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <adxl_read_address+0x20>)
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	2053      	movs	r0, #83	@ 0x53
 8000f6e:	f000 f91f 	bl	80011b0 <I2C1_byteRead>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001e8 	.word	0x200001e8

08000f80 <adxl_write>:

void adxl_write(uint8_t reg, char value)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	460a      	mov	r2, r1
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	71bb      	strb	r3, [r7, #6]
	char data[1];
	data[0] = value;
 8000f90:	79bb      	ldrb	r3, [r7, #6]
 8000f92:	733b      	strb	r3, [r7, #12]
	I2C1_burstWrite(DEVICE_ADDR, reg, 1, data);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	79f9      	ldrb	r1, [r7, #7]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2053      	movs	r0, #83	@ 0x53
 8000f9e:	f000 fa17 	bl	80013d0 <I2C1_burstWrite>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <adxl_read_values>:

void adxl_read_values(uint8_t reg)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	I2C1_burstRead(DEVICE_ADDR, reg, 6, (char*)data_rec);
 8000fb6:	79f9      	ldrb	r1, [r7, #7]
 8000fb8:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <adxl_read_values+0x20>)
 8000fba:	2206      	movs	r2, #6
 8000fbc:	2053      	movs	r0, #83	@ 0x53
 8000fbe:	f000 f96b 	bl	8001298 <I2C1_burstRead>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001ec 	.word	0x200001ec

08000fd0 <adxl_init>:

void adxl_init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	// enable i2c
	init_i2c1();
 8000fd4:	f000 f878 	bl	80010c8 <init_i2c1>
	// read the DEVID, this should return 0xE5
	adxl_read_address(DEVID_R);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff ffbf 	bl	8000f5c <adxl_read_address>
	if(data == 0xE5)
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <adxl_init+0x38>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2be5      	cmp	r3, #229	@ 0xe5
 8000fe4:	d102      	bne.n	8000fec <adxl_init+0x1c>
	{
		myPrintf("correct address\n");
 8000fe6:	4809      	ldr	r0, [pc, #36]	@ (800100c <adxl_init+0x3c>)
 8000fe8:	f000 fbaa 	bl	8001740 <myPrintf>
		// print correct address
	}

	// set data format range to +- 4g
	adxl_write(DATA_FORMAT_R,FOUR_G);
 8000fec:	2101      	movs	r1, #1
 8000fee:	2031      	movs	r0, #49	@ 0x31
 8000ff0:	f7ff ffc6 	bl	8000f80 <adxl_write>

	// reset all bits
	adxl_write(POWER_CTL_R,RESET);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	202d      	movs	r0, #45	@ 0x2d
 8000ff8:	f7ff ffc2 	bl	8000f80 <adxl_write>

	// configure power control measure bit
	adxl_write(POWER_CTL_R,SET_MEASURE_B);
 8000ffc:	2108      	movs	r1, #8
 8000ffe:	202d      	movs	r0, #45	@ 0x2d
 8001000:	f7ff ffbe 	bl	8000f80 <adxl_write>

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200001e8 	.word	0x200001e8
 800100c:	080044b8 	.word	0x080044b8

08001010 <dma_callBack>:
    /*DMA Interrupt enable in NVIC*/
    __NVIC_EnableIRQ(DMA2_Stream7);
}

static void dma_callBack(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

	myPrintf("\nDMA TX run success\n");
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <dma_callBack+0x10>)
 8001016:	f000 fb93 	bl	8001740 <myPrintf>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	080044cc 	.word	0x080044cc

08001024 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	if(DMA2->DMA_HISR & (DMA_TCIF7))
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <DMA2_Stream7_IRQHandler+0x24>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d007      	beq.n	8001044 <DMA2_Stream7_IRQHandler+0x20>
	{
		DMA2->DMA_HIFCR |= DMA_CTCIF7;
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <DMA2_Stream7_IRQHandler+0x24>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a03      	ldr	r2, [pc, #12]	@ (8001048 <DMA2_Stream7_IRQHandler+0x24>)
 800103a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800103e:	60d3      	str	r3, [r2, #12]
		dma_callBack();
 8001040:	f7ff ffe6 	bl	8001010 <dma_callBack>
	}
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40026400 	.word	0x40026400

0800104c <callBack>:
	__enable_irq();
	initVariable(&_even);
}

static void callBack(event_t *process)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    printf("even come from EXTI13 line:= %d and cnt:= %d\n", process->evenISR= !process->evenISR, ++process->cnt);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	bf14      	ite	ne
 800105e:	2301      	movne	r3, #1
 8001060:	2300      	moveq	r3, #0
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f083 0301 	eor.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4611      	mov	r1, r2
 8001074:	7019      	strb	r1, [r3, #0]
 8001076:	4611      	mov	r1, r2
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	3301      	adds	r3, #1
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	6053      	str	r3, [r2, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	4803      	ldr	r0, [pc, #12]	@ (8001094 <callBack+0x48>)
 8001086:	f001 f891 	bl	80021ac <iprintf>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	080044e4 	.word	0x080044e4

08001098 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    if((EXTI->EXTI_PR & (1U << 13)))
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <EXTI15_10_IRQHandler+0x28>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <EXTI15_10_IRQHandler+0x22>
    {
        EXTI->EXTI_PR |= (1U << 13);
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <EXTI15_10_IRQHandler+0x28>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <EXTI15_10_IRQHandler+0x28>)
 80010ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010b2:	6153      	str	r3, [r2, #20]
        callBack(&_even);
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <EXTI15_10_IRQHandler+0x2c>)
 80010b6:	f7ff ffc9 	bl	800104c <callBack>
    }
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40013c00 	.word	0x40013c00
 80010c4:	200001f4 	.word	0x200001f4

080010c8 <init_i2c1>:
#include "i2c.h"

void init_i2c1(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
    // Enable clock access to GPIOB due to we are use PB8 and PB9 as if SCL , SDA
    RCC->RCC_AHB1ENR |= GPIOB_EN;
 80010cc:	4b35      	ldr	r3, [pc, #212]	@ (80011a4 <init_i2c1+0xdc>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d0:	4a34      	ldr	r2, [pc, #208]	@ (80011a4 <init_i2c1+0xdc>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	6313      	str	r3, [r2, #48]	@ 0x30

    // set PB8 and PB9 mode to alternate function
    GPIOB->GPIO_MODER |= (2U << 16); // for PB8
 80010d8:	4b33      	ldr	r3, [pc, #204]	@ (80011a8 <init_i2c1+0xe0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a32      	ldr	r2, [pc, #200]	@ (80011a8 <init_i2c1+0xe0>)
 80010de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e2:	6013      	str	r3, [r2, #0]
    GPIOB->GPIO_MODER |= (2U << 18); // for PB9
 80010e4:	4b30      	ldr	r3, [pc, #192]	@ (80011a8 <init_i2c1+0xe0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a2f      	ldr	r2, [pc, #188]	@ (80011a8 <init_i2c1+0xe0>)
 80010ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010ee:	6013      	str	r3, [r2, #0]

    /*set PB8 and PB9 is output type open drain */
    GPIOB->GPIO_OTYPER |= (1U << 8); // for PB8
 80010f0:	4b2d      	ldr	r3, [pc, #180]	@ (80011a8 <init_i2c1+0xe0>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a2c      	ldr	r2, [pc, #176]	@ (80011a8 <init_i2c1+0xe0>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010fa:	6053      	str	r3, [r2, #4]
    GPIOB->GPIO_OTYPER |= (1U << 9); // for PB9
 80010fc:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <init_i2c1+0xe0>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a29      	ldr	r2, [pc, #164]	@ (80011a8 <init_i2c1+0xe0>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001106:	6053      	str	r3, [r2, #4]

    /*Enable pull-up for PB8 and PB9*/
    GPIOB->GPIO_PUPDR |= (1U << 16); // for PB8
 8001108:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <init_i2c1+0xe0>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	4a26      	ldr	r2, [pc, #152]	@ (80011a8 <init_i2c1+0xe0>)
 800110e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001112:	60d3      	str	r3, [r2, #12]
    GPIOB->GPIO_PUPDR |= (1U << 18); // for PB9
 8001114:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <init_i2c1+0xe0>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4a23      	ldr	r2, [pc, #140]	@ (80011a8 <init_i2c1+0xe0>)
 800111a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800111e:	60d3      	str	r3, [r2, #12]

    /*set alternate function*/
    GPIOB->GPIO_AFR[1] |= (4U << 0); // AF4 for I2C1_SCL for PB8
 8001120:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <init_i2c1+0xe0>)
 8001122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001124:	4a20      	ldr	r2, [pc, #128]	@ (80011a8 <init_i2c1+0xe0>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->GPIO_AFR[1] |= (4U << 4); // AF4 for I2C1_SDA for PB9
 800112c:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <init_i2c1+0xe0>)
 800112e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001130:	4a1d      	ldr	r2, [pc, #116]	@ (80011a8 <init_i2c1+0xe0>)
 8001132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001136:	6253      	str	r3, [r2, #36]	@ 0x24

    /*enable clock access to I2C1 */
    RCC->RCC_APB1ENR |= I2C1_EN;
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <init_i2c1+0xdc>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	4a19      	ldr	r2, [pc, #100]	@ (80011a4 <init_i2c1+0xdc>)
 800113e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001142:	6413      	str	r3, [r2, #64]	@ 0x40

    /*Software reset */
    I2C1->I2C_CR1 |= (1U << 15); 
 8001144:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <init_i2c1+0xe4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a18      	ldr	r2, [pc, #96]	@ (80011ac <init_i2c1+0xe4>)
 800114a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800114e:	6013      	str	r3, [r2, #0]

    /*Come out of reset mode*/
    I2C1->I2C_CR1 &= ~(1U << 15);
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <init_i2c1+0xe4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <init_i2c1+0xe4>)
 8001156:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800115a:	6013      	str	r3, [r2, #0]

    /*Set peripheral clock frequency*/
    // due to we are use hsi default 16mhz 
    I2C1->I2C_CR2 |= (1U << 4); // 16mhz 
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <init_i2c1+0xe4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <init_i2c1+0xe4>)
 8001162:	f043 0310 	orr.w	r3, r3, #16
 8001166:	6053      	str	r3, [r2, #4]

    /*Set I2C to standard mode, 100Khz clock*/
    I2C1->I2C_CCR &= ~(1U << 15); // Standby mode
 8001168:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <init_i2c1+0xe4>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <init_i2c1+0xe4>)
 800116e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001172:	61d3      	str	r3, [r2, #28]

    // Cách tính đã ghi rõ trong document embedded thực thụ
    I2C1->I2C_CCR |= (I2C1_100KHZ_HSI << 0);
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <init_i2c1+0xe4>)
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	4a0c      	ldr	r2, [pc, #48]	@ (80011ac <init_i2c1+0xe4>)
 800117a:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800117e:	61d3      	str	r3, [r2, #28]

    /*Set rise time*/
    // Tại sao lại là 17 đã ghi rõ trong embedded document thực thụ
    I2C1->I2C_TRISE |= (MAX_RISE_TIME_SM_MODE << 0);
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <init_i2c1+0xe4>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <init_i2c1+0xe4>)
 8001186:	f043 0311 	orr.w	r3, r3, #17
 800118a:	6213      	str	r3, [r2, #32]

    /*Enable I2C1 module */
    I2C1->I2C_CR1 |= PERIPHERAL_EN;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <init_i2c1+0xe4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a06      	ldr	r2, [pc, #24]	@ (80011ac <init_i2c1+0xe4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]

}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40005400 	.word	0x40005400

080011b0 <I2C1_byteRead>:
 *         maddr: memory address
 *         data: store data
 */

void I2C1_byteRead(char saddr, char maddr, char *data)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	603a      	str	r2, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	460b      	mov	r3, r1
 80011be:	71bb      	strb	r3, [r7, #6]
    volatile int temp; // for read SR2
    
    /*Wait until bus not busy*/
    while( (I2C1->I2C_SR2 & SR2_BUSY) );
 80011c0:	bf00      	nop
 80011c2:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <I2C1_byteRead+0xe4>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f9      	bne.n	80011c2 <I2C1_byteRead+0x12>

    /*generate start */
    I2C1->I2C_CR1 |= CR1_START;
 80011ce:	4b31      	ldr	r3, [pc, #196]	@ (8001294 <I2C1_byteRead+0xe4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a30      	ldr	r2, [pc, #192]	@ (8001294 <I2C1_byteRead+0xe4>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d8:	6013      	str	r3, [r2, #0]

    /*Wait until Start condition generated. */
    while(!(I2C1->I2C_SR1 & SR1_SB))
 80011da:	bf00      	nop
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <I2C1_byteRead+0xe4>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f9      	beq.n	80011dc <I2C1_byteRead+0x2c>
	// explain: địa chỉ này dịch trái 1 bit ví dụ 
	// saddr = 0000 1101 sau dòng mã này se là 
	// 0001 1010 , bit cuối của byte này là 0 điều đó có nghĩa là bit 
	// r/w là write cho phép ghi
	// còn 0001 101 là địa chỉ của slave 
	I2C1->I2C_DR = saddr << 1; 
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001294 <I2C1_byteRead+0xe4>)
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	6113      	str	r3, [r2, #16]

    /*wait end of address transmission */
    while(!(I2C1->I2C_SR1 & SR1_ADDR));
 80011f0:	bf00      	nop
 80011f2:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <I2C1_byteRead+0xe4>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f9      	beq.n	80011f2 <I2C1_byteRead+0x42>

    /*Clear addr flag*/
	/*Read value SR2 that also means clear SR1_ADDR*/
    temp = I2C1->I2C_SR2;
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <I2C1_byteRead+0xe4>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	60fb      	str	r3, [r7, #12]
    
    /*Send memory address*/
    I2C1->I2C_DR = maddr;
 8001204:	4a23      	ldr	r2, [pc, #140]	@ (8001294 <I2C1_byteRead+0xe4>)
 8001206:	79bb      	ldrb	r3, [r7, #6]
 8001208:	6113      	str	r3, [r2, #16]

    /*Wait complete transmission */
    while(!(I2C1->I2C_SR1 & SR1_TXE));
 800120a:	bf00      	nop
 800120c:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <I2C1_byteRead+0xe4>)
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f9      	beq.n	800120c <I2C1_byteRead+0x5c>

    /*generate restart*/
    I2C1->I2C_CR1 |= CR1_START;
 8001218:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <I2C1_byteRead+0xe4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1d      	ldr	r2, [pc, #116]	@ (8001294 <I2C1_byteRead+0xe4>)
 800121e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001222:	6013      	str	r3, [r2, #0]

    /*Wait until Start condition generated. */
    while(!(I2C1->I2C_SR1 & SR1_SB)){}
 8001224:	bf00      	nop
 8001226:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <I2C1_byteRead+0xe4>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f9      	beq.n	8001226 <I2C1_byteRead+0x76>

    /*Transmit slave address + read
    bit r/w = 1 is read
    */
	I2C1->I2C_DR = saddr << 1 | 1;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	f043 0201 	orr.w	r2, r3, #1
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <I2C1_byteRead+0xe4>)
 800123c:	611a      	str	r2, [r3, #16]

    /*wait end of address transmission */
    while(!(I2C1->I2C_SR1 & SR1_ADDR)){}
 800123e:	bf00      	nop
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <I2C1_byteRead+0xe4>)
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f9      	beq.n	8001240 <I2C1_byteRead+0x90>

    /*Disable Acknowledge*/
	I2C1->I2C_CR1 &= ~ CR1_ACK;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <I2C1_byteRead+0xe4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a10      	ldr	r2, [pc, #64]	@ (8001294 <I2C1_byteRead+0xe4>)
 8001252:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001256:	6013      	str	r3, [r2, #0]

    /*Clear addr flag*/
	temp = I2C1->I2C_SR2;
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <I2C1_byteRead+0xe4>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	60fb      	str	r3, [r7, #12]

    /*Generate stop after data received*/
	I2C1->I2C_CR1 |= CR1_STOP; 
 800125e:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <I2C1_byteRead+0xe4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0c      	ldr	r2, [pc, #48]	@ (8001294 <I2C1_byteRead+0xe4>)
 8001264:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001268:	6013      	str	r3, [r2, #0]

    /*Wait until RxNE flag is set tức là nó không empty*/
    // chờ nhận dữ liệu 
	while(!(I2C1->I2C_SR1 & SR1_RXNE));
 800126a:	bf00      	nop
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <I2C1_byteRead+0xe4>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f9      	beq.n	800126c <I2C1_byteRead+0xbc>

    /*Data not empty that also mean have data in DR register*/
	*data++ = I2C1->I2C_DR;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <I2C1_byteRead+0xe4>)
 800127a:	6919      	ldr	r1, [r3, #16]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	603a      	str	r2, [r7, #0]
 8001282:	b2ca      	uxtb	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]

}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40005400 	.word	0x40005400

08001298 <I2C1_burstRead>:

void I2C1_burstRead(char saddr, char maddr, int n, char *data)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	60ba      	str	r2, [r7, #8]
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4603      	mov	r3, r0
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	460b      	mov	r3, r1
 80012a8:	73bb      	strb	r3, [r7, #14]
	volatile int tmp;

	// wait until bus not busy
	while(I2C1->I2C_SR2 & (SR2_BUSY));
 80012aa:	bf00      	nop
 80012ac:	4b47      	ldr	r3, [pc, #284]	@ (80013cc <I2C1_burstRead+0x134>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f9      	bne.n	80012ac <I2C1_burstRead+0x14>

	// generate start
	I2C1->I2C_CR1 |= CR1_START;
 80012b8:	4b44      	ldr	r3, [pc, #272]	@ (80013cc <I2C1_burstRead+0x134>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a43      	ldr	r2, [pc, #268]	@ (80013cc <I2C1_burstRead+0x134>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c2:	6013      	str	r3, [r2, #0]

	// wait until start flag is set
	while(!(I2C1->I2C_SR1 & SR1_SB));
 80012c4:	bf00      	nop
 80012c6:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <I2C1_burstRead+0x134>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f9      	beq.n	80012c6 <I2C1_burstRead+0x2e>

	// transmit slave address + write
	I2C1->I2C_DR = saddr << 1;
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	4a3d      	ldr	r2, [pc, #244]	@ (80013cc <I2C1_burstRead+0x134>)
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	6113      	str	r3, [r2, #16]
	// wait until addr flag is set
	while(!(I2C1->I2C_SR1 & SR1_ADDR));
 80012da:	bf00      	nop
 80012dc:	4b3b      	ldr	r3, [pc, #236]	@ (80013cc <I2C1_burstRead+0x134>)
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f9      	beq.n	80012dc <I2C1_burstRead+0x44>

	// clear addr flag
	tmp = I2C1->I2C_SR2;
 80012e8:	4b38      	ldr	r3, [pc, #224]	@ (80013cc <I2C1_burstRead+0x134>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	617b      	str	r3, [r7, #20]

	// wait until transmiter empty
	while(!(I2C1->I2C_SR1 & SR1_TXE));
 80012ee:	bf00      	nop
 80012f0:	4b36      	ldr	r3, [pc, #216]	@ (80013cc <I2C1_burstRead+0x134>)
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f9      	beq.n	80012f0 <I2C1_burstRead+0x58>

	// send memory address
	I2C1->I2C_DR = maddr;
 80012fc:	4a33      	ldr	r2, [pc, #204]	@ (80013cc <I2C1_burstRead+0x134>)
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	6113      	str	r3, [r2, #16]

	// wait until transmitter empty
	while(!(I2C1->I2C_SR1 & SR1_TXE));
 8001302:	bf00      	nop
 8001304:	4b31      	ldr	r3, [pc, #196]	@ (80013cc <I2C1_burstRead+0x134>)
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f9      	beq.n	8001304 <I2C1_burstRead+0x6c>

	// generate restart
	I2C1->I2C_CR1 |= CR1_START;
 8001310:	4b2e      	ldr	r3, [pc, #184]	@ (80013cc <I2C1_burstRead+0x134>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a2d      	ldr	r2, [pc, #180]	@ (80013cc <I2C1_burstRead+0x134>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800131a:	6013      	str	r3, [r2, #0]

	// wait until start flag is set
	while(!(I2C1->I2C_SR1 & SR1_SB));
 800131c:	bf00      	nop
 800131e:	4b2b      	ldr	r3, [pc, #172]	@ (80013cc <I2C1_burstRead+0x134>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f9      	beq.n	800131e <I2C1_burstRead+0x86>

	// transmit slave address + read
	I2C1->I2C_DR = (saddr << 1) | 1;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <I2C1_burstRead+0x134>)
 8001334:	611a      	str	r2, [r3, #16]

	// wait until addr flag is set
	while(!(I2C1->I2C_SR1 & SR1_ADDR));
 8001336:	bf00      	nop
 8001338:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <I2C1_burstRead+0x134>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f9      	beq.n	8001338 <I2C1_burstRead+0xa0>

	// clear addr flag by read sr2
	tmp = I2C1->I2C_SR2;
 8001344:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <I2C1_burstRead+0x134>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	617b      	str	r3, [r7, #20]

	// enable acknowledge
	I2C1->I2C_CR1 |= CR1_ACK;
 800134a:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <I2C1_burstRead+0x134>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a1f      	ldr	r2, [pc, #124]	@ (80013cc <I2C1_burstRead+0x134>)
 8001350:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001354:	6013      	str	r3, [r2, #0]

	while(n > 0U)
 8001356:	e02e      	b.n	80013b6 <I2C1_burstRead+0x11e>
	{
		// if one byte
		if(n == 1U)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d11a      	bne.n	8001394 <I2C1_burstRead+0xfc>
		{
			// disable acknowledge
			I2C1->I2C_CR1 &= ~ CR1_ACK;
 800135e:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <I2C1_burstRead+0x134>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a1a      	ldr	r2, [pc, #104]	@ (80013cc <I2C1_burstRead+0x134>)
 8001364:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001368:	6013      	str	r3, [r2, #0]

			// generate stop
			I2C1->I2C_CR1 |= CR1_STOP;
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <I2C1_burstRead+0x134>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <I2C1_burstRead+0x134>)
 8001370:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001374:	6013      	str	r3, [r2, #0]

			// waith receiver data
			while(!(I2C1->I2C_SR1 & SR1_RXNE));
 8001376:	bf00      	nop
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <I2C1_burstRead+0x134>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f9      	beq.n	8001378 <I2C1_burstRead+0xe0>

			// read data from DR
			*data++ = I2C1->I2C_DR;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <I2C1_burstRead+0x134>)
 8001386:	6919      	ldr	r1, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
			break;
 8001392:	e014      	b.n	80013be <I2C1_burstRead+0x126>
		}
		else
		{
			// wait until RXNE flag is set
			while(!(I2C1->I2C_SR1 & SR1_RXNE));
 8001394:	bf00      	nop
 8001396:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <I2C1_burstRead+0x134>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f9      	beq.n	8001396 <I2C1_burstRead+0xfe>

			// read data from DR
			*data++ = I2C1->I2C_DR;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <I2C1_burstRead+0x134>)
 80013a4:	6919      	ldr	r1, [r3, #16]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	b2ca      	uxtb	r2, r1
 80013ae:	701a      	strb	r2, [r3, #0]
			n--;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
	while(n > 0U)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1cd      	bne.n	8001358 <I2C1_burstRead+0xc0>
		}
	}
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	371c      	adds	r7, #28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40005400 	.word	0x40005400

080013d0 <I2C1_burstWrite>:
void I2C1_burstWrite(char saddr, char maddr, int n, char *data)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60ba      	str	r2, [r7, #8]
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4603      	mov	r3, r0
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	460b      	mov	r3, r1
 80013e0:	73bb      	strb	r3, [r7, #14]
	volatile int tmp;

	// wait until bus not busy
	while(I2C1->I2C_SR2 & SR2_BUSY)
 80013e2:	bf00      	nop
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <I2C1_burstWrite+0xc0>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f9      	bne.n	80013e4 <I2C1_burstWrite+0x14>
	{
		//myPrintf("on going..\n");
	}

	// generate start
	I2C1->I2C_CR1 |= CR1_START;
 80013f0:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <I2C1_burstWrite+0xc0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a26      	ldr	r2, [pc, #152]	@ (8001490 <I2C1_burstWrite+0xc0>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fa:	6013      	str	r3, [r2, #0]

	// wait until start flag is set
	while(!(I2C1->I2C_SR1 & SR1_SB));
 80013fc:	bf00      	nop
 80013fe:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <I2C1_burstWrite+0xc0>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f9      	beq.n	80013fe <I2C1_burstWrite+0x2e>

	// transmit slave address
	I2C1->I2C_DR = saddr << 1;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	4a20      	ldr	r2, [pc, #128]	@ (8001490 <I2C1_burstWrite+0xc0>)
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	6113      	str	r3, [r2, #16]

	// wait until addr flag is set
	while(!(I2C1->I2C_SR1 & SR1_ADDR));
 8001412:	bf00      	nop
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <I2C1_burstWrite+0xc0>)
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f9      	beq.n	8001414 <I2C1_burstWrite+0x44>

	// clear addr flag
	tmp = I2C1->I2C_SR2;
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <I2C1_burstWrite+0xc0>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	613b      	str	r3, [r7, #16]

	// wait until data register empty
	while(!(I2C1->I2C_SR1 & SR1_TXE));
 8001426:	bf00      	nop
 8001428:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <I2C1_burstWrite+0xc0>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f9      	beq.n	8001428 <I2C1_burstWrite+0x58>

	// send memory address
	I2C1->I2C_DR = maddr;
 8001434:	4a16      	ldr	r2, [pc, #88]	@ (8001490 <I2C1_burstWrite+0xc0>)
 8001436:	7bbb      	ldrb	r3, [r7, #14]
 8001438:	6113      	str	r3, [r2, #16]

	for(int i = 0; i < n; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e00f      	b.n	8001460 <I2C1_burstWrite+0x90>
	{
		// wait until data register empty
		while(!(I2C1->I2C_SR1 & SR1_TXE));
 8001440:	bf00      	nop
 8001442:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <I2C1_burstWrite+0xc0>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f9      	beq.n	8001442 <I2C1_burstWrite+0x72>

		// transmit memory address
		I2C1->I2C_DR = *data++;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	781a      	ldrb	r2, [r3, #0]
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <I2C1_burstWrite+0xc0>)
 8001458:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < n; i++)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	429a      	cmp	r2, r3
 8001466:	dbeb      	blt.n	8001440 <I2C1_burstWrite+0x70>
	}
	// wait until transfer finished
	while(!(I2C1->I2C_SR1 & SR1_BTF));
 8001468:	bf00      	nop
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <I2C1_burstWrite+0xc0>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f9      	beq.n	800146a <I2C1_burstWrite+0x9a>
	// generate stop
	I2C1->I2C_CR1 |= CR1_STOP;
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <I2C1_burstWrite+0xc0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <I2C1_burstWrite+0xc0>)
 800147c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001480:	6013      	str	r3, [r2, #0]

}
 8001482:	bf00      	nop
 8001484:	371c      	adds	r7, #28
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40005400 	.word	0x40005400

08001494 <delay_ms>:
 */

#include "systick.h"

void delay_ms(int ms)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
     * N = delay_achieved * SYSCLK (defalut SYSCLK == frequency default hsi = 16 000 000)
     * N = 1ms * 16 000 000 = 16 000
     * N will value reload for SYStick reload register
     * so SYSTICK->SYST_RVR = 16000
     */
    SYSTICK->SYST_RVR = 16000; // 16 000 000 / 16 000
 800149c:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <delay_ms+0x58>)
 800149e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80014a2:	605a      	str	r2, [r3, #4]
    SYSTICK->SYST_CVR = 0; // value current =0
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <delay_ms+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
    //SYSTICK->SYST_CSR |= (1U << 0) | (1U << 2); //
    SYSTICK->SYST_CSR |= INTERNAL_CLOCK | COUNTER_EN;
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <delay_ms+0x58>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a0f      	ldr	r2, [pc, #60]	@ (80014ec <delay_ms+0x58>)
 80014b0:	f043 0305 	orr.w	r3, r3, #5
 80014b4:	6013      	str	r3, [r2, #0]


    for(int i=0; i <ms;i++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	e009      	b.n	80014d0 <delay_ms+0x3c>
    {
        while(!(SYSTICK->SYST_CSR & COUNTFLAG));
 80014bc:	bf00      	nop
 80014be:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <delay_ms+0x58>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f9      	beq.n	80014be <delay_ms+0x2a>
    for(int i=0; i <ms;i++)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf1      	blt.n	80014bc <delay_ms+0x28>
    }
    SYSTICK->SYST_CSR = 0;
 80014d8:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <delay_ms+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <callBackSystick>:
    // cấu hình dùng thạch anh nội bắt đầu đếm và dùng ngắt
    SYSTICK->SYST_CSR |= INTERNAL_CLOCK | COUNTER_EN | INTERRUPT_SYSTICK_EN;

}
static void callBackSystick(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    static float a=0.0f;
    myPrintf("hello world: %.2f\n",a++);
 80014f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <callBackSystick+0x30>)
 80014f6:	ed93 7a00 	vldr	s14, [r3]
 80014fa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80014fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <callBackSystick+0x30>)
 8001504:	edc3 7a00 	vstr	s15, [r3]
 8001508:	ee17 0a10 	vmov	r0, s14
 800150c:	f7ff f824 	bl	8000558 <__aeabi_f2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4803      	ldr	r0, [pc, #12]	@ (8001524 <callBackSystick+0x34>)
 8001516:	f000 f913 	bl	8001740 <myPrintf>
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200001fc 	.word	0x200001fc
 8001524:	08004514 	.word	0x08004514

08001528 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
    callBackSystick();
 800152c:	f7ff ffe0 	bl	80014f0 <callBackSystick>
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <callBackTimer>:
    TIM2->TIMx_CR1 |= TIM2_CEN;

}

static void callBackTimer(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    static int cnt=0;
    myPrintf("hello world:= %d\n",cnt++);
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <callBackTimer+0x1c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	4904      	ldr	r1, [pc, #16]	@ (8001550 <callBackTimer+0x1c>)
 8001540:	600a      	str	r2, [r1, #0]
 8001542:	4619      	mov	r1, r3
 8001544:	4803      	ldr	r0, [pc, #12]	@ (8001554 <callBackTimer+0x20>)
 8001546:	f000 f8fb 	bl	8001740 <myPrintf>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000200 	.word	0x20000200
 8001554:	08004528 	.word	0x08004528

08001558 <TIM2_IRQHandler>:

void TIM2_IRQHandler()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    // clear UIF bit when counter overflow 
    TIM2->TIMx_SR &= ~ TIM2_SR_UIF;
 800155c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6113      	str	r3, [r2, #16]
    // do function 
    callBackTimer();
 800156c:	f7ff ffe2 	bl	8001534 <callBackTimer>
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <initStructData>:

myStruct _data;
#define USE_INTERRUPT_RECEIVER
static void printCharacter(uint8_t data);
void initStructData(myStruct *ptr)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	ptr->data = 0;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
	ptr->haveData = false;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	705a      	strb	r2, [r3, #1]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <uart1_rxtx>:

void uart1_rxtx(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
	// 1. enable clock gpioa
	RCC->RCC_AHB1ENR |= GPIOA_ENABLE;
 800159a:	4b38      	ldr	r3, [pc, #224]	@ (800167c <uart1_rxtx+0xe8>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a37      	ldr	r2, [pc, #220]	@ (800167c <uart1_rxtx+0xe8>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
	// 2. set mode alternate for PA9 TX
	GPIOA->GPIO_MODER &= ~(3U << 18);
 80015a6:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <uart1_rxtx+0xec>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a35      	ldr	r2, [pc, #212]	@ (8001680 <uart1_rxtx+0xec>)
 80015ac:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80015b0:	6013      	str	r3, [r2, #0]
	GPIOA->GPIO_MODER |= (2U << 18);
 80015b2:	4b33      	ldr	r3, [pc, #204]	@ (8001680 <uart1_rxtx+0xec>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a32      	ldr	r2, [pc, #200]	@ (8001680 <uart1_rxtx+0xec>)
 80015b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015bc:	6013      	str	r3, [r2, #0]
	GPIOA->GPIO_AFR[1] |= (7U << 4);
 80015be:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <uart1_rxtx+0xec>)
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001680 <uart1_rxtx+0xec>)
 80015c4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80015c8:	6253      	str	r3, [r2, #36]	@ 0x24

	// 3.set mode alternate for P10 RX
	GPIOA->GPIO_MODER |= (2U << 20);
 80015ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <uart1_rxtx+0xec>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001680 <uart1_rxtx+0xec>)
 80015d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015d4:	6013      	str	r3, [r2, #0]
	GPIOA->GPIO_AFR[1] |= (7U << 8);
 80015d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <uart1_rxtx+0xec>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015da:	4a29      	ldr	r2, [pc, #164]	@ (8001680 <uart1_rxtx+0xec>)
 80015dc:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015e0:	6253      	str	r3, [r2, #36]	@ 0x24

	// enable clock USART1
	RCC->RCC_APB2ENR |= USART1_CLOCK_EN;
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <uart1_rxtx+0xe8>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	4a25      	ldr	r2, [pc, #148]	@ (800167c <uart1_rxtx+0xe8>)
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	6453      	str	r3, [r2, #68]	@ 0x44

	// config baudrate 115200
	// chose oversampling 16
	USART1->USART_CR1 &= ~ (1U << 15);
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <uart1_rxtx+0xf0>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	4a24      	ldr	r2, [pc, #144]	@ (8001684 <uart1_rxtx+0xf0>)
 80015f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80015f8:	60d3      	str	r3, [r2, #12]
	USART1->USART_BRR |= (8U << 4) | (11U << 0);
 80015fa:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <uart1_rxtx+0xf0>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4a21      	ldr	r2, [pc, #132]	@ (8001684 <uart1_rxtx+0xf0>)
 8001600:	f043 038b 	orr.w	r3, r3, #139	@ 0x8b
 8001604:	6093      	str	r3, [r2, #8]

	//configure 1 bit start, 8 bit data, 1 stop bit
	USART1->USART_CR1 &= ~(1U << 12);
 8001606:	4b1f      	ldr	r3, [pc, #124]	@ (8001684 <uart1_rxtx+0xf0>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <uart1_rxtx+0xf0>)
 800160c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001610:	60d3      	str	r3, [r2, #12]
	USART1->USART_CR2 &= ~(3U << 12);
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <uart1_rxtx+0xf0>)
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <uart1_rxtx+0xf0>)
 8001618:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800161c:	6113      	str	r3, [r2, #16]

	// enable transmit data
	USART1->USART_CR1 |= TX_EN;
 800161e:	4b19      	ldr	r3, [pc, #100]	@ (8001684 <uart1_rxtx+0xf0>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	4a18      	ldr	r2, [pc, #96]	@ (8001684 <uart1_rxtx+0xf0>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	60d3      	str	r3, [r2, #12]
	// enable receive data
	USART1->USART_CR1 |= RX_EN;
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <uart1_rxtx+0xf0>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	4a15      	ldr	r2, [pc, #84]	@ (8001684 <uart1_rxtx+0xf0>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	60d3      	str	r3, [r2, #12]

	#ifdef USE_INTERRUPT_RECEIVER
	USART1->USART_CR1 |= (1U << 5);
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <uart1_rxtx+0xf0>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <uart1_rxtx+0xf0>)
 800163c:	f043 0320 	orr.w	r3, r3, #32
 8001640:	60d3      	str	r3, [r2, #12]
 8001642:	2325      	movs	r3, #37	@ 0x25
 8001644:	71fb      	strb	r3, [r7, #7]
__STATIC_FORCEINLINE void __NVIC_EnableIRQ(IRQ_Priority_t type_IRQ)
{
    if(((int32_t)type_IRQ) >=0)
    {
        __COMPILER_BARRIER();
        NVIC->NVIC_ISER[(((uint32_t)type_IRQ) >> 5U)] = (uint32_t) (1U << (uint32_t)(((uint32_t)type_IRQ) & 0x1F));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	490e      	ldr	r1, [pc, #56]	@ (8001688 <uart1_rxtx+0xf4>)
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	0952      	lsrs	r2, r2, #5
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	4610      	mov	r0, r2
 8001656:	2201      	movs	r2, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
        __COMPILER_BARRIER();
    }
}
 8001660:	bf00      	nop
	__NVIC_EnableIRQ(USART1_position);
	initStructData(&_data);
 8001662:	480a      	ldr	r0, [pc, #40]	@ (800168c <uart1_rxtx+0xf8>)
 8001664:	f7ff ff86 	bl	8001574 <initStructData>
	#endif

	// enable USART1
	USART1->USART_CR1 |= USART1_EN;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <uart1_rxtx+0xf0>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <uart1_rxtx+0xf0>)
 800166e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001672:	60d3      	str	r3, [r2, #12]

}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000
 8001684:	40011000 	.word	0x40011000
 8001688:	e000e100 	.word	0xe000e100
 800168c:	20000204 	.word	0x20000204

08001690 <USART1_IRQHandler>:

void USART1_IRQHandler()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

	if(USART1->USART_SR & (1U <<5))
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <USART1_IRQHandler+0x30>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0320 	and.w	r3, r3, #32
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00d      	beq.n	80016bc <USART1_IRQHandler+0x2c>
	{
		_data.haveData = true;
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <USART1_IRQHandler+0x34>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	705a      	strb	r2, [r3, #1]
		_data.data = USART1->USART_DR;
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <USART1_IRQHandler+0x30>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <USART1_IRQHandler+0x34>)
 80016ae:	701a      	strb	r2, [r3, #0]
		printCharacter(_data.data);
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <USART1_IRQHandler+0x34>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f806 	bl	80016c8 <printCharacter>
	}

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40011000 	.word	0x40011000
 80016c4:	20000204 	.word	0x20000204

080016c8 <printCharacter>:
static void printCharacter(uint8_t data)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	USART1->USART_DR = (data & 0xFF);
 80016d2:	4a08      	ldr	r2, [pc, #32]	@ (80016f4 <printCharacter+0x2c>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	6053      	str	r3, [r2, #4]
	while(!(USART1->USART_SR & (1U << 7)));
 80016d8:	bf00      	nop
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <printCharacter+0x2c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f9      	beq.n	80016da <printCharacter+0x12>
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40011000 	.word	0x40011000

080016f8 <tranmissionEachByte>:
    while(!(USART1->USART_SR & RECEIVER_DATA_RXNE ));
    return USART1->USART_DR;
}

static void tranmissionEachByte(char *str)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    int ch;
    while(*str)
 8001700:	e010      	b.n	8001724 <tranmissionEachByte+0x2c>
    {
        ch = *str;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	60fb      	str	r3, [r7, #12]
        USART1->USART_DR = ch & 0xFF;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4a0c      	ldr	r2, [pc, #48]	@ (800173c <tranmissionEachByte+0x44>)
 800170c:	b2db      	uxtb	r3, r3
 800170e:	6053      	str	r3, [r2, #4]
        while(!(USART1->USART_SR & TRANSMISSION_COMPLETE));
 8001710:	bf00      	nop
 8001712:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <tranmissionEachByte+0x44>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f9      	beq.n	8001712 <tranmissionEachByte+0x1a>
        str++;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3301      	adds	r3, #1
 8001722:	607b      	str	r3, [r7, #4]
    while(*str)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ea      	bne.n	8001702 <tranmissionEachByte+0xa>
    }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40011000 	.word	0x40011000

08001740 <myPrintf>:

void myPrintf(const char *fmt,...)
{
 8001740:	b40f      	push	{r0, r1, r2, r3}
 8001742:	b580      	push	{r7, lr}
 8001744:	b0c2      	sub	sp, #264	@ 0x108
 8001746:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args,fmt);
 8001748:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800174c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	char buffer[256];
	vsnprintf(buffer,sizeof(buffer),fmt,args);
 8001750:	1d38      	adds	r0, r7, #4
 8001752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001756:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800175a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800175e:	f000 fda5 	bl	80022ac <vsniprintf>
	tranmissionEachByte(buffer);
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ffc7 	bl	80016f8 <tranmissionEachByte>
	va_end(args);
}
 800176a:	bf00      	nop
 800176c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001770:	46bd      	mov	sp, r7
 8001772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001776:	b004      	add	sp, #16
 8001778:	4770      	bx	lr

0800177a <__cvt>:
 800177a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800177e:	ec57 6b10 	vmov	r6, r7, d0
 8001782:	2f00      	cmp	r7, #0
 8001784:	460c      	mov	r4, r1
 8001786:	4619      	mov	r1, r3
 8001788:	463b      	mov	r3, r7
 800178a:	bfbb      	ittet	lt
 800178c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001790:	461f      	movlt	r7, r3
 8001792:	2300      	movge	r3, #0
 8001794:	232d      	movlt	r3, #45	@ 0x2d
 8001796:	700b      	strb	r3, [r1, #0]
 8001798:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800179a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800179e:	4691      	mov	r9, r2
 80017a0:	f023 0820 	bic.w	r8, r3, #32
 80017a4:	bfbc      	itt	lt
 80017a6:	4632      	movlt	r2, r6
 80017a8:	4616      	movlt	r6, r2
 80017aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80017ae:	d005      	beq.n	80017bc <__cvt+0x42>
 80017b0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80017b4:	d100      	bne.n	80017b8 <__cvt+0x3e>
 80017b6:	3401      	adds	r4, #1
 80017b8:	2102      	movs	r1, #2
 80017ba:	e000      	b.n	80017be <__cvt+0x44>
 80017bc:	2103      	movs	r1, #3
 80017be:	ab03      	add	r3, sp, #12
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	ab02      	add	r3, sp, #8
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	ec47 6b10 	vmov	d0, r6, r7
 80017ca:	4653      	mov	r3, sl
 80017cc:	4622      	mov	r2, r4
 80017ce:	f000 fe83 	bl	80024d8 <_dtoa_r>
 80017d2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80017d6:	4605      	mov	r5, r0
 80017d8:	d119      	bne.n	800180e <__cvt+0x94>
 80017da:	f019 0f01 	tst.w	r9, #1
 80017de:	d00e      	beq.n	80017fe <__cvt+0x84>
 80017e0:	eb00 0904 	add.w	r9, r0, r4
 80017e4:	2200      	movs	r2, #0
 80017e6:	2300      	movs	r3, #0
 80017e8:	4630      	mov	r0, r6
 80017ea:	4639      	mov	r1, r7
 80017ec:	f7ff f974 	bl	8000ad8 <__aeabi_dcmpeq>
 80017f0:	b108      	cbz	r0, 80017f6 <__cvt+0x7c>
 80017f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80017f6:	2230      	movs	r2, #48	@ 0x30
 80017f8:	9b03      	ldr	r3, [sp, #12]
 80017fa:	454b      	cmp	r3, r9
 80017fc:	d31e      	bcc.n	800183c <__cvt+0xc2>
 80017fe:	9b03      	ldr	r3, [sp, #12]
 8001800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001802:	1b5b      	subs	r3, r3, r5
 8001804:	4628      	mov	r0, r5
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	b004      	add	sp, #16
 800180a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800180e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001812:	eb00 0904 	add.w	r9, r0, r4
 8001816:	d1e5      	bne.n	80017e4 <__cvt+0x6a>
 8001818:	7803      	ldrb	r3, [r0, #0]
 800181a:	2b30      	cmp	r3, #48	@ 0x30
 800181c:	d10a      	bne.n	8001834 <__cvt+0xba>
 800181e:	2200      	movs	r2, #0
 8001820:	2300      	movs	r3, #0
 8001822:	4630      	mov	r0, r6
 8001824:	4639      	mov	r1, r7
 8001826:	f7ff f957 	bl	8000ad8 <__aeabi_dcmpeq>
 800182a:	b918      	cbnz	r0, 8001834 <__cvt+0xba>
 800182c:	f1c4 0401 	rsb	r4, r4, #1
 8001830:	f8ca 4000 	str.w	r4, [sl]
 8001834:	f8da 3000 	ldr.w	r3, [sl]
 8001838:	4499      	add	r9, r3
 800183a:	e7d3      	b.n	80017e4 <__cvt+0x6a>
 800183c:	1c59      	adds	r1, r3, #1
 800183e:	9103      	str	r1, [sp, #12]
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	e7d9      	b.n	80017f8 <__cvt+0x7e>

08001844 <__exponent>:
 8001844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001846:	2900      	cmp	r1, #0
 8001848:	bfba      	itte	lt
 800184a:	4249      	neglt	r1, r1
 800184c:	232d      	movlt	r3, #45	@ 0x2d
 800184e:	232b      	movge	r3, #43	@ 0x2b
 8001850:	2909      	cmp	r1, #9
 8001852:	7002      	strb	r2, [r0, #0]
 8001854:	7043      	strb	r3, [r0, #1]
 8001856:	dd29      	ble.n	80018ac <__exponent+0x68>
 8001858:	f10d 0307 	add.w	r3, sp, #7
 800185c:	461d      	mov	r5, r3
 800185e:	270a      	movs	r7, #10
 8001860:	461a      	mov	r2, r3
 8001862:	fbb1 f6f7 	udiv	r6, r1, r7
 8001866:	fb07 1416 	mls	r4, r7, r6, r1
 800186a:	3430      	adds	r4, #48	@ 0x30
 800186c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8001870:	460c      	mov	r4, r1
 8001872:	2c63      	cmp	r4, #99	@ 0x63
 8001874:	f103 33ff 	add.w	r3, r3, #4294967295
 8001878:	4631      	mov	r1, r6
 800187a:	dcf1      	bgt.n	8001860 <__exponent+0x1c>
 800187c:	3130      	adds	r1, #48	@ 0x30
 800187e:	1e94      	subs	r4, r2, #2
 8001880:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001884:	1c41      	adds	r1, r0, #1
 8001886:	4623      	mov	r3, r4
 8001888:	42ab      	cmp	r3, r5
 800188a:	d30a      	bcc.n	80018a2 <__exponent+0x5e>
 800188c:	f10d 0309 	add.w	r3, sp, #9
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	42ac      	cmp	r4, r5
 8001894:	bf88      	it	hi
 8001896:	2300      	movhi	r3, #0
 8001898:	3302      	adds	r3, #2
 800189a:	4403      	add	r3, r0
 800189c:	1a18      	subs	r0, r3, r0
 800189e:	b003      	add	sp, #12
 80018a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80018a6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80018aa:	e7ed      	b.n	8001888 <__exponent+0x44>
 80018ac:	2330      	movs	r3, #48	@ 0x30
 80018ae:	3130      	adds	r1, #48	@ 0x30
 80018b0:	7083      	strb	r3, [r0, #2]
 80018b2:	70c1      	strb	r1, [r0, #3]
 80018b4:	1d03      	adds	r3, r0, #4
 80018b6:	e7f1      	b.n	800189c <__exponent+0x58>

080018b8 <_printf_float>:
 80018b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018bc:	b08d      	sub	sp, #52	@ 0x34
 80018be:	460c      	mov	r4, r1
 80018c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80018c4:	4616      	mov	r6, r2
 80018c6:	461f      	mov	r7, r3
 80018c8:	4605      	mov	r5, r0
 80018ca:	f000 fd05 	bl	80022d8 <_localeconv_r>
 80018ce:	6803      	ldr	r3, [r0, #0]
 80018d0:	9304      	str	r3, [sp, #16]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fcd4 	bl	8000280 <strlen>
 80018d8:	2300      	movs	r3, #0
 80018da:	930a      	str	r3, [sp, #40]	@ 0x28
 80018dc:	f8d8 3000 	ldr.w	r3, [r8]
 80018e0:	9005      	str	r0, [sp, #20]
 80018e2:	3307      	adds	r3, #7
 80018e4:	f023 0307 	bic.w	r3, r3, #7
 80018e8:	f103 0208 	add.w	r2, r3, #8
 80018ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80018f0:	f8d4 b000 	ldr.w	fp, [r4]
 80018f4:	f8c8 2000 	str.w	r2, [r8]
 80018f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80018fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8001900:	9307      	str	r3, [sp, #28]
 8001902:	f8cd 8018 	str.w	r8, [sp, #24]
 8001906:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800190a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800190e:	4b9c      	ldr	r3, [pc, #624]	@ (8001b80 <_printf_float+0x2c8>)
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	f7ff f912 	bl	8000b3c <__aeabi_dcmpun>
 8001918:	bb70      	cbnz	r0, 8001978 <_printf_float+0xc0>
 800191a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800191e:	4b98      	ldr	r3, [pc, #608]	@ (8001b80 <_printf_float+0x2c8>)
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	f7ff f8ec 	bl	8000b00 <__aeabi_dcmple>
 8001928:	bb30      	cbnz	r0, 8001978 <_printf_float+0xc0>
 800192a:	2200      	movs	r2, #0
 800192c:	2300      	movs	r3, #0
 800192e:	4640      	mov	r0, r8
 8001930:	4649      	mov	r1, r9
 8001932:	f7ff f8db 	bl	8000aec <__aeabi_dcmplt>
 8001936:	b110      	cbz	r0, 800193e <_printf_float+0x86>
 8001938:	232d      	movs	r3, #45	@ 0x2d
 800193a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800193e:	4a91      	ldr	r2, [pc, #580]	@ (8001b84 <_printf_float+0x2cc>)
 8001940:	4b91      	ldr	r3, [pc, #580]	@ (8001b88 <_printf_float+0x2d0>)
 8001942:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8001946:	bf94      	ite	ls
 8001948:	4690      	movls	r8, r2
 800194a:	4698      	movhi	r8, r3
 800194c:	2303      	movs	r3, #3
 800194e:	6123      	str	r3, [r4, #16]
 8001950:	f02b 0304 	bic.w	r3, fp, #4
 8001954:	6023      	str	r3, [r4, #0]
 8001956:	f04f 0900 	mov.w	r9, #0
 800195a:	9700      	str	r7, [sp, #0]
 800195c:	4633      	mov	r3, r6
 800195e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001960:	4621      	mov	r1, r4
 8001962:	4628      	mov	r0, r5
 8001964:	f000 f9d2 	bl	8001d0c <_printf_common>
 8001968:	3001      	adds	r0, #1
 800196a:	f040 808d 	bne.w	8001a88 <_printf_float+0x1d0>
 800196e:	f04f 30ff 	mov.w	r0, #4294967295
 8001972:	b00d      	add	sp, #52	@ 0x34
 8001974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001978:	4642      	mov	r2, r8
 800197a:	464b      	mov	r3, r9
 800197c:	4640      	mov	r0, r8
 800197e:	4649      	mov	r1, r9
 8001980:	f7ff f8dc 	bl	8000b3c <__aeabi_dcmpun>
 8001984:	b140      	cbz	r0, 8001998 <_printf_float+0xe0>
 8001986:	464b      	mov	r3, r9
 8001988:	2b00      	cmp	r3, #0
 800198a:	bfbc      	itt	lt
 800198c:	232d      	movlt	r3, #45	@ 0x2d
 800198e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8001992:	4a7e      	ldr	r2, [pc, #504]	@ (8001b8c <_printf_float+0x2d4>)
 8001994:	4b7e      	ldr	r3, [pc, #504]	@ (8001b90 <_printf_float+0x2d8>)
 8001996:	e7d4      	b.n	8001942 <_printf_float+0x8a>
 8001998:	6863      	ldr	r3, [r4, #4]
 800199a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800199e:	9206      	str	r2, [sp, #24]
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	d13b      	bne.n	8001a1c <_printf_float+0x164>
 80019a4:	2306      	movs	r3, #6
 80019a6:	6063      	str	r3, [r4, #4]
 80019a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80019ac:	2300      	movs	r3, #0
 80019ae:	6022      	str	r2, [r4, #0]
 80019b0:	9303      	str	r3, [sp, #12]
 80019b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80019b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80019b8:	ab09      	add	r3, sp, #36	@ 0x24
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	6861      	ldr	r1, [r4, #4]
 80019be:	ec49 8b10 	vmov	d0, r8, r9
 80019c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80019c6:	4628      	mov	r0, r5
 80019c8:	f7ff fed7 	bl	800177a <__cvt>
 80019cc:	9b06      	ldr	r3, [sp, #24]
 80019ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80019d0:	2b47      	cmp	r3, #71	@ 0x47
 80019d2:	4680      	mov	r8, r0
 80019d4:	d129      	bne.n	8001a2a <_printf_float+0x172>
 80019d6:	1cc8      	adds	r0, r1, #3
 80019d8:	db02      	blt.n	80019e0 <_printf_float+0x128>
 80019da:	6863      	ldr	r3, [r4, #4]
 80019dc:	4299      	cmp	r1, r3
 80019de:	dd41      	ble.n	8001a64 <_printf_float+0x1ac>
 80019e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80019e4:	fa5f fa8a 	uxtb.w	sl, sl
 80019e8:	3901      	subs	r1, #1
 80019ea:	4652      	mov	r2, sl
 80019ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80019f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80019f2:	f7ff ff27 	bl	8001844 <__exponent>
 80019f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80019f8:	1813      	adds	r3, r2, r0
 80019fa:	2a01      	cmp	r2, #1
 80019fc:	4681      	mov	r9, r0
 80019fe:	6123      	str	r3, [r4, #16]
 8001a00:	dc02      	bgt.n	8001a08 <_printf_float+0x150>
 8001a02:	6822      	ldr	r2, [r4, #0]
 8001a04:	07d2      	lsls	r2, r2, #31
 8001a06:	d501      	bpl.n	8001a0c <_printf_float+0x154>
 8001a08:	3301      	adds	r3, #1
 8001a0a:	6123      	str	r3, [r4, #16]
 8001a0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0a2      	beq.n	800195a <_printf_float+0xa2>
 8001a14:	232d      	movs	r3, #45	@ 0x2d
 8001a16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001a1a:	e79e      	b.n	800195a <_printf_float+0xa2>
 8001a1c:	9a06      	ldr	r2, [sp, #24]
 8001a1e:	2a47      	cmp	r2, #71	@ 0x47
 8001a20:	d1c2      	bne.n	80019a8 <_printf_float+0xf0>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1c0      	bne.n	80019a8 <_printf_float+0xf0>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e7bd      	b.n	80019a6 <_printf_float+0xee>
 8001a2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8001a2e:	d9db      	bls.n	80019e8 <_printf_float+0x130>
 8001a30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8001a34:	d118      	bne.n	8001a68 <_printf_float+0x1b0>
 8001a36:	2900      	cmp	r1, #0
 8001a38:	6863      	ldr	r3, [r4, #4]
 8001a3a:	dd0b      	ble.n	8001a54 <_printf_float+0x19c>
 8001a3c:	6121      	str	r1, [r4, #16]
 8001a3e:	b913      	cbnz	r3, 8001a46 <_printf_float+0x18e>
 8001a40:	6822      	ldr	r2, [r4, #0]
 8001a42:	07d0      	lsls	r0, r2, #31
 8001a44:	d502      	bpl.n	8001a4c <_printf_float+0x194>
 8001a46:	3301      	adds	r3, #1
 8001a48:	440b      	add	r3, r1
 8001a4a:	6123      	str	r3, [r4, #16]
 8001a4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8001a4e:	f04f 0900 	mov.w	r9, #0
 8001a52:	e7db      	b.n	8001a0c <_printf_float+0x154>
 8001a54:	b913      	cbnz	r3, 8001a5c <_printf_float+0x1a4>
 8001a56:	6822      	ldr	r2, [r4, #0]
 8001a58:	07d2      	lsls	r2, r2, #31
 8001a5a:	d501      	bpl.n	8001a60 <_printf_float+0x1a8>
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	e7f4      	b.n	8001a4a <_printf_float+0x192>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e7f2      	b.n	8001a4a <_printf_float+0x192>
 8001a64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8001a68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001a6a:	4299      	cmp	r1, r3
 8001a6c:	db05      	blt.n	8001a7a <_printf_float+0x1c2>
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	6121      	str	r1, [r4, #16]
 8001a72:	07d8      	lsls	r0, r3, #31
 8001a74:	d5ea      	bpl.n	8001a4c <_printf_float+0x194>
 8001a76:	1c4b      	adds	r3, r1, #1
 8001a78:	e7e7      	b.n	8001a4a <_printf_float+0x192>
 8001a7a:	2900      	cmp	r1, #0
 8001a7c:	bfd4      	ite	le
 8001a7e:	f1c1 0202 	rsble	r2, r1, #2
 8001a82:	2201      	movgt	r2, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	e7e0      	b.n	8001a4a <_printf_float+0x192>
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	055a      	lsls	r2, r3, #21
 8001a8c:	d407      	bmi.n	8001a9e <_printf_float+0x1e6>
 8001a8e:	6923      	ldr	r3, [r4, #16]
 8001a90:	4642      	mov	r2, r8
 8001a92:	4631      	mov	r1, r6
 8001a94:	4628      	mov	r0, r5
 8001a96:	47b8      	blx	r7
 8001a98:	3001      	adds	r0, #1
 8001a9a:	d12b      	bne.n	8001af4 <_printf_float+0x23c>
 8001a9c:	e767      	b.n	800196e <_printf_float+0xb6>
 8001a9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8001aa2:	f240 80dd 	bls.w	8001c60 <_printf_float+0x3a8>
 8001aa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2300      	movs	r3, #0
 8001aae:	f7ff f813 	bl	8000ad8 <__aeabi_dcmpeq>
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	d033      	beq.n	8001b1e <_printf_float+0x266>
 8001ab6:	4a37      	ldr	r2, [pc, #220]	@ (8001b94 <_printf_float+0x2dc>)
 8001ab8:	2301      	movs	r3, #1
 8001aba:	4631      	mov	r1, r6
 8001abc:	4628      	mov	r0, r5
 8001abe:	47b8      	blx	r7
 8001ac0:	3001      	adds	r0, #1
 8001ac2:	f43f af54 	beq.w	800196e <_printf_float+0xb6>
 8001ac6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8001aca:	4543      	cmp	r3, r8
 8001acc:	db02      	blt.n	8001ad4 <_printf_float+0x21c>
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	07d8      	lsls	r0, r3, #31
 8001ad2:	d50f      	bpl.n	8001af4 <_printf_float+0x23c>
 8001ad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001ad8:	4631      	mov	r1, r6
 8001ada:	4628      	mov	r0, r5
 8001adc:	47b8      	blx	r7
 8001ade:	3001      	adds	r0, #1
 8001ae0:	f43f af45 	beq.w	800196e <_printf_float+0xb6>
 8001ae4:	f04f 0900 	mov.w	r9, #0
 8001ae8:	f108 38ff 	add.w	r8, r8, #4294967295
 8001aec:	f104 0a1a 	add.w	sl, r4, #26
 8001af0:	45c8      	cmp	r8, r9
 8001af2:	dc09      	bgt.n	8001b08 <_printf_float+0x250>
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	079b      	lsls	r3, r3, #30
 8001af8:	f100 8103 	bmi.w	8001d02 <_printf_float+0x44a>
 8001afc:	68e0      	ldr	r0, [r4, #12]
 8001afe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001b00:	4298      	cmp	r0, r3
 8001b02:	bfb8      	it	lt
 8001b04:	4618      	movlt	r0, r3
 8001b06:	e734      	b.n	8001972 <_printf_float+0xba>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	4652      	mov	r2, sl
 8001b0c:	4631      	mov	r1, r6
 8001b0e:	4628      	mov	r0, r5
 8001b10:	47b8      	blx	r7
 8001b12:	3001      	adds	r0, #1
 8001b14:	f43f af2b 	beq.w	800196e <_printf_float+0xb6>
 8001b18:	f109 0901 	add.w	r9, r9, #1
 8001b1c:	e7e8      	b.n	8001af0 <_printf_float+0x238>
 8001b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	dc39      	bgt.n	8001b98 <_printf_float+0x2e0>
 8001b24:	4a1b      	ldr	r2, [pc, #108]	@ (8001b94 <_printf_float+0x2dc>)
 8001b26:	2301      	movs	r3, #1
 8001b28:	4631      	mov	r1, r6
 8001b2a:	4628      	mov	r0, r5
 8001b2c:	47b8      	blx	r7
 8001b2e:	3001      	adds	r0, #1
 8001b30:	f43f af1d 	beq.w	800196e <_printf_float+0xb6>
 8001b34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8001b38:	ea59 0303 	orrs.w	r3, r9, r3
 8001b3c:	d102      	bne.n	8001b44 <_printf_float+0x28c>
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	07d9      	lsls	r1, r3, #31
 8001b42:	d5d7      	bpl.n	8001af4 <_printf_float+0x23c>
 8001b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001b48:	4631      	mov	r1, r6
 8001b4a:	4628      	mov	r0, r5
 8001b4c:	47b8      	blx	r7
 8001b4e:	3001      	adds	r0, #1
 8001b50:	f43f af0d 	beq.w	800196e <_printf_float+0xb6>
 8001b54:	f04f 0a00 	mov.w	sl, #0
 8001b58:	f104 0b1a 	add.w	fp, r4, #26
 8001b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b5e:	425b      	negs	r3, r3
 8001b60:	4553      	cmp	r3, sl
 8001b62:	dc01      	bgt.n	8001b68 <_printf_float+0x2b0>
 8001b64:	464b      	mov	r3, r9
 8001b66:	e793      	b.n	8001a90 <_printf_float+0x1d8>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	465a      	mov	r2, fp
 8001b6c:	4631      	mov	r1, r6
 8001b6e:	4628      	mov	r0, r5
 8001b70:	47b8      	blx	r7
 8001b72:	3001      	adds	r0, #1
 8001b74:	f43f aefb 	beq.w	800196e <_printf_float+0xb6>
 8001b78:	f10a 0a01 	add.w	sl, sl, #1
 8001b7c:	e7ee      	b.n	8001b5c <_printf_float+0x2a4>
 8001b7e:	bf00      	nop
 8001b80:	7fefffff 	.word	0x7fefffff
 8001b84:	0800453a 	.word	0x0800453a
 8001b88:	0800453e 	.word	0x0800453e
 8001b8c:	08004542 	.word	0x08004542
 8001b90:	08004546 	.word	0x08004546
 8001b94:	0800454a 	.word	0x0800454a
 8001b98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001b9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8001b9e:	4553      	cmp	r3, sl
 8001ba0:	bfa8      	it	ge
 8001ba2:	4653      	movge	r3, sl
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	4699      	mov	r9, r3
 8001ba8:	dc36      	bgt.n	8001c18 <_printf_float+0x360>
 8001baa:	f04f 0b00 	mov.w	fp, #0
 8001bae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001bb2:	f104 021a 	add.w	r2, r4, #26
 8001bb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001bb8:	9306      	str	r3, [sp, #24]
 8001bba:	eba3 0309 	sub.w	r3, r3, r9
 8001bbe:	455b      	cmp	r3, fp
 8001bc0:	dc31      	bgt.n	8001c26 <_printf_float+0x36e>
 8001bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001bc4:	459a      	cmp	sl, r3
 8001bc6:	dc3a      	bgt.n	8001c3e <_printf_float+0x386>
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	07da      	lsls	r2, r3, #31
 8001bcc:	d437      	bmi.n	8001c3e <_printf_float+0x386>
 8001bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001bd0:	ebaa 0903 	sub.w	r9, sl, r3
 8001bd4:	9b06      	ldr	r3, [sp, #24]
 8001bd6:	ebaa 0303 	sub.w	r3, sl, r3
 8001bda:	4599      	cmp	r9, r3
 8001bdc:	bfa8      	it	ge
 8001bde:	4699      	movge	r9, r3
 8001be0:	f1b9 0f00 	cmp.w	r9, #0
 8001be4:	dc33      	bgt.n	8001c4e <_printf_float+0x396>
 8001be6:	f04f 0800 	mov.w	r8, #0
 8001bea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001bee:	f104 0b1a 	add.w	fp, r4, #26
 8001bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001bf4:	ebaa 0303 	sub.w	r3, sl, r3
 8001bf8:	eba3 0309 	sub.w	r3, r3, r9
 8001bfc:	4543      	cmp	r3, r8
 8001bfe:	f77f af79 	ble.w	8001af4 <_printf_float+0x23c>
 8001c02:	2301      	movs	r3, #1
 8001c04:	465a      	mov	r2, fp
 8001c06:	4631      	mov	r1, r6
 8001c08:	4628      	mov	r0, r5
 8001c0a:	47b8      	blx	r7
 8001c0c:	3001      	adds	r0, #1
 8001c0e:	f43f aeae 	beq.w	800196e <_printf_float+0xb6>
 8001c12:	f108 0801 	add.w	r8, r8, #1
 8001c16:	e7ec      	b.n	8001bf2 <_printf_float+0x33a>
 8001c18:	4642      	mov	r2, r8
 8001c1a:	4631      	mov	r1, r6
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	47b8      	blx	r7
 8001c20:	3001      	adds	r0, #1
 8001c22:	d1c2      	bne.n	8001baa <_printf_float+0x2f2>
 8001c24:	e6a3      	b.n	800196e <_printf_float+0xb6>
 8001c26:	2301      	movs	r3, #1
 8001c28:	4631      	mov	r1, r6
 8001c2a:	4628      	mov	r0, r5
 8001c2c:	9206      	str	r2, [sp, #24]
 8001c2e:	47b8      	blx	r7
 8001c30:	3001      	adds	r0, #1
 8001c32:	f43f ae9c 	beq.w	800196e <_printf_float+0xb6>
 8001c36:	9a06      	ldr	r2, [sp, #24]
 8001c38:	f10b 0b01 	add.w	fp, fp, #1
 8001c3c:	e7bb      	b.n	8001bb6 <_printf_float+0x2fe>
 8001c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001c42:	4631      	mov	r1, r6
 8001c44:	4628      	mov	r0, r5
 8001c46:	47b8      	blx	r7
 8001c48:	3001      	adds	r0, #1
 8001c4a:	d1c0      	bne.n	8001bce <_printf_float+0x316>
 8001c4c:	e68f      	b.n	800196e <_printf_float+0xb6>
 8001c4e:	9a06      	ldr	r2, [sp, #24]
 8001c50:	464b      	mov	r3, r9
 8001c52:	4442      	add	r2, r8
 8001c54:	4631      	mov	r1, r6
 8001c56:	4628      	mov	r0, r5
 8001c58:	47b8      	blx	r7
 8001c5a:	3001      	adds	r0, #1
 8001c5c:	d1c3      	bne.n	8001be6 <_printf_float+0x32e>
 8001c5e:	e686      	b.n	800196e <_printf_float+0xb6>
 8001c60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8001c64:	f1ba 0f01 	cmp.w	sl, #1
 8001c68:	dc01      	bgt.n	8001c6e <_printf_float+0x3b6>
 8001c6a:	07db      	lsls	r3, r3, #31
 8001c6c:	d536      	bpl.n	8001cdc <_printf_float+0x424>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	4642      	mov	r2, r8
 8001c72:	4631      	mov	r1, r6
 8001c74:	4628      	mov	r0, r5
 8001c76:	47b8      	blx	r7
 8001c78:	3001      	adds	r0, #1
 8001c7a:	f43f ae78 	beq.w	800196e <_printf_float+0xb6>
 8001c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001c82:	4631      	mov	r1, r6
 8001c84:	4628      	mov	r0, r5
 8001c86:	47b8      	blx	r7
 8001c88:	3001      	adds	r0, #1
 8001c8a:	f43f ae70 	beq.w	800196e <_printf_float+0xb6>
 8001c8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8001c92:	2200      	movs	r2, #0
 8001c94:	2300      	movs	r3, #0
 8001c96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001c9a:	f7fe ff1d 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c9e:	b9c0      	cbnz	r0, 8001cd2 <_printf_float+0x41a>
 8001ca0:	4653      	mov	r3, sl
 8001ca2:	f108 0201 	add.w	r2, r8, #1
 8001ca6:	4631      	mov	r1, r6
 8001ca8:	4628      	mov	r0, r5
 8001caa:	47b8      	blx	r7
 8001cac:	3001      	adds	r0, #1
 8001cae:	d10c      	bne.n	8001cca <_printf_float+0x412>
 8001cb0:	e65d      	b.n	800196e <_printf_float+0xb6>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	465a      	mov	r2, fp
 8001cb6:	4631      	mov	r1, r6
 8001cb8:	4628      	mov	r0, r5
 8001cba:	47b8      	blx	r7
 8001cbc:	3001      	adds	r0, #1
 8001cbe:	f43f ae56 	beq.w	800196e <_printf_float+0xb6>
 8001cc2:	f108 0801 	add.w	r8, r8, #1
 8001cc6:	45d0      	cmp	r8, sl
 8001cc8:	dbf3      	blt.n	8001cb2 <_printf_float+0x3fa>
 8001cca:	464b      	mov	r3, r9
 8001ccc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8001cd0:	e6df      	b.n	8001a92 <_printf_float+0x1da>
 8001cd2:	f04f 0800 	mov.w	r8, #0
 8001cd6:	f104 0b1a 	add.w	fp, r4, #26
 8001cda:	e7f4      	b.n	8001cc6 <_printf_float+0x40e>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	4642      	mov	r2, r8
 8001ce0:	e7e1      	b.n	8001ca6 <_printf_float+0x3ee>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	464a      	mov	r2, r9
 8001ce6:	4631      	mov	r1, r6
 8001ce8:	4628      	mov	r0, r5
 8001cea:	47b8      	blx	r7
 8001cec:	3001      	adds	r0, #1
 8001cee:	f43f ae3e 	beq.w	800196e <_printf_float+0xb6>
 8001cf2:	f108 0801 	add.w	r8, r8, #1
 8001cf6:	68e3      	ldr	r3, [r4, #12]
 8001cf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8001cfa:	1a5b      	subs	r3, r3, r1
 8001cfc:	4543      	cmp	r3, r8
 8001cfe:	dcf0      	bgt.n	8001ce2 <_printf_float+0x42a>
 8001d00:	e6fc      	b.n	8001afc <_printf_float+0x244>
 8001d02:	f04f 0800 	mov.w	r8, #0
 8001d06:	f104 0919 	add.w	r9, r4, #25
 8001d0a:	e7f4      	b.n	8001cf6 <_printf_float+0x43e>

08001d0c <_printf_common>:
 8001d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d10:	4616      	mov	r6, r2
 8001d12:	4698      	mov	r8, r3
 8001d14:	688a      	ldr	r2, [r1, #8]
 8001d16:	690b      	ldr	r3, [r1, #16]
 8001d18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bfb8      	it	lt
 8001d20:	4613      	movlt	r3, r2
 8001d22:	6033      	str	r3, [r6, #0]
 8001d24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001d28:	4607      	mov	r7, r0
 8001d2a:	460c      	mov	r4, r1
 8001d2c:	b10a      	cbz	r2, 8001d32 <_printf_common+0x26>
 8001d2e:	3301      	adds	r3, #1
 8001d30:	6033      	str	r3, [r6, #0]
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	0699      	lsls	r1, r3, #26
 8001d36:	bf42      	ittt	mi
 8001d38:	6833      	ldrmi	r3, [r6, #0]
 8001d3a:	3302      	addmi	r3, #2
 8001d3c:	6033      	strmi	r3, [r6, #0]
 8001d3e:	6825      	ldr	r5, [r4, #0]
 8001d40:	f015 0506 	ands.w	r5, r5, #6
 8001d44:	d106      	bne.n	8001d54 <_printf_common+0x48>
 8001d46:	f104 0a19 	add.w	sl, r4, #25
 8001d4a:	68e3      	ldr	r3, [r4, #12]
 8001d4c:	6832      	ldr	r2, [r6, #0]
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	42ab      	cmp	r3, r5
 8001d52:	dc26      	bgt.n	8001da2 <_printf_common+0x96>
 8001d54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d58:	6822      	ldr	r2, [r4, #0]
 8001d5a:	3b00      	subs	r3, #0
 8001d5c:	bf18      	it	ne
 8001d5e:	2301      	movne	r3, #1
 8001d60:	0692      	lsls	r2, r2, #26
 8001d62:	d42b      	bmi.n	8001dbc <_printf_common+0xb0>
 8001d64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001d68:	4641      	mov	r1, r8
 8001d6a:	4638      	mov	r0, r7
 8001d6c:	47c8      	blx	r9
 8001d6e:	3001      	adds	r0, #1
 8001d70:	d01e      	beq.n	8001db0 <_printf_common+0xa4>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	6922      	ldr	r2, [r4, #16]
 8001d76:	f003 0306 	and.w	r3, r3, #6
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf02      	ittt	eq
 8001d7e:	68e5      	ldreq	r5, [r4, #12]
 8001d80:	6833      	ldreq	r3, [r6, #0]
 8001d82:	1aed      	subeq	r5, r5, r3
 8001d84:	68a3      	ldr	r3, [r4, #8]
 8001d86:	bf0c      	ite	eq
 8001d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d8c:	2500      	movne	r5, #0
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	bfc4      	itt	gt
 8001d92:	1a9b      	subgt	r3, r3, r2
 8001d94:	18ed      	addgt	r5, r5, r3
 8001d96:	2600      	movs	r6, #0
 8001d98:	341a      	adds	r4, #26
 8001d9a:	42b5      	cmp	r5, r6
 8001d9c:	d11a      	bne.n	8001dd4 <_printf_common+0xc8>
 8001d9e:	2000      	movs	r0, #0
 8001da0:	e008      	b.n	8001db4 <_printf_common+0xa8>
 8001da2:	2301      	movs	r3, #1
 8001da4:	4652      	mov	r2, sl
 8001da6:	4641      	mov	r1, r8
 8001da8:	4638      	mov	r0, r7
 8001daa:	47c8      	blx	r9
 8001dac:	3001      	adds	r0, #1
 8001dae:	d103      	bne.n	8001db8 <_printf_common+0xac>
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001db8:	3501      	adds	r5, #1
 8001dba:	e7c6      	b.n	8001d4a <_printf_common+0x3e>
 8001dbc:	18e1      	adds	r1, r4, r3
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	2030      	movs	r0, #48	@ 0x30
 8001dc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001dc6:	4422      	add	r2, r4
 8001dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001dcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	e7c7      	b.n	8001d64 <_printf_common+0x58>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	4641      	mov	r1, r8
 8001dda:	4638      	mov	r0, r7
 8001ddc:	47c8      	blx	r9
 8001dde:	3001      	adds	r0, #1
 8001de0:	d0e6      	beq.n	8001db0 <_printf_common+0xa4>
 8001de2:	3601      	adds	r6, #1
 8001de4:	e7d9      	b.n	8001d9a <_printf_common+0x8e>
	...

08001de8 <_printf_i>:
 8001de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001dec:	7e0f      	ldrb	r7, [r1, #24]
 8001dee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001df0:	2f78      	cmp	r7, #120	@ 0x78
 8001df2:	4691      	mov	r9, r2
 8001df4:	4680      	mov	r8, r0
 8001df6:	460c      	mov	r4, r1
 8001df8:	469a      	mov	sl, r3
 8001dfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001dfe:	d807      	bhi.n	8001e10 <_printf_i+0x28>
 8001e00:	2f62      	cmp	r7, #98	@ 0x62
 8001e02:	d80a      	bhi.n	8001e1a <_printf_i+0x32>
 8001e04:	2f00      	cmp	r7, #0
 8001e06:	f000 80d2 	beq.w	8001fae <_printf_i+0x1c6>
 8001e0a:	2f58      	cmp	r7, #88	@ 0x58
 8001e0c:	f000 80b9 	beq.w	8001f82 <_printf_i+0x19a>
 8001e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001e18:	e03a      	b.n	8001e90 <_printf_i+0xa8>
 8001e1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001e1e:	2b15      	cmp	r3, #21
 8001e20:	d8f6      	bhi.n	8001e10 <_printf_i+0x28>
 8001e22:	a101      	add	r1, pc, #4	@ (adr r1, 8001e28 <_printf_i+0x40>)
 8001e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e28:	08001e81 	.word	0x08001e81
 8001e2c:	08001e95 	.word	0x08001e95
 8001e30:	08001e11 	.word	0x08001e11
 8001e34:	08001e11 	.word	0x08001e11
 8001e38:	08001e11 	.word	0x08001e11
 8001e3c:	08001e11 	.word	0x08001e11
 8001e40:	08001e95 	.word	0x08001e95
 8001e44:	08001e11 	.word	0x08001e11
 8001e48:	08001e11 	.word	0x08001e11
 8001e4c:	08001e11 	.word	0x08001e11
 8001e50:	08001e11 	.word	0x08001e11
 8001e54:	08001f95 	.word	0x08001f95
 8001e58:	08001ebf 	.word	0x08001ebf
 8001e5c:	08001f4f 	.word	0x08001f4f
 8001e60:	08001e11 	.word	0x08001e11
 8001e64:	08001e11 	.word	0x08001e11
 8001e68:	08001fb7 	.word	0x08001fb7
 8001e6c:	08001e11 	.word	0x08001e11
 8001e70:	08001ebf 	.word	0x08001ebf
 8001e74:	08001e11 	.word	0x08001e11
 8001e78:	08001e11 	.word	0x08001e11
 8001e7c:	08001f57 	.word	0x08001f57
 8001e80:	6833      	ldr	r3, [r6, #0]
 8001e82:	1d1a      	adds	r2, r3, #4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6032      	str	r2, [r6, #0]
 8001e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e90:	2301      	movs	r3, #1
 8001e92:	e09d      	b.n	8001fd0 <_printf_i+0x1e8>
 8001e94:	6833      	ldr	r3, [r6, #0]
 8001e96:	6820      	ldr	r0, [r4, #0]
 8001e98:	1d19      	adds	r1, r3, #4
 8001e9a:	6031      	str	r1, [r6, #0]
 8001e9c:	0606      	lsls	r6, r0, #24
 8001e9e:	d501      	bpl.n	8001ea4 <_printf_i+0xbc>
 8001ea0:	681d      	ldr	r5, [r3, #0]
 8001ea2:	e003      	b.n	8001eac <_printf_i+0xc4>
 8001ea4:	0645      	lsls	r5, r0, #25
 8001ea6:	d5fb      	bpl.n	8001ea0 <_printf_i+0xb8>
 8001ea8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001eac:	2d00      	cmp	r5, #0
 8001eae:	da03      	bge.n	8001eb8 <_printf_i+0xd0>
 8001eb0:	232d      	movs	r3, #45	@ 0x2d
 8001eb2:	426d      	negs	r5, r5
 8001eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001eb8:	4859      	ldr	r0, [pc, #356]	@ (8002020 <_printf_i+0x238>)
 8001eba:	230a      	movs	r3, #10
 8001ebc:	e011      	b.n	8001ee2 <_printf_i+0xfa>
 8001ebe:	6821      	ldr	r1, [r4, #0]
 8001ec0:	6833      	ldr	r3, [r6, #0]
 8001ec2:	0608      	lsls	r0, r1, #24
 8001ec4:	f853 5b04 	ldr.w	r5, [r3], #4
 8001ec8:	d402      	bmi.n	8001ed0 <_printf_i+0xe8>
 8001eca:	0649      	lsls	r1, r1, #25
 8001ecc:	bf48      	it	mi
 8001ece:	b2ad      	uxthmi	r5, r5
 8001ed0:	2f6f      	cmp	r7, #111	@ 0x6f
 8001ed2:	4853      	ldr	r0, [pc, #332]	@ (8002020 <_printf_i+0x238>)
 8001ed4:	6033      	str	r3, [r6, #0]
 8001ed6:	bf14      	ite	ne
 8001ed8:	230a      	movne	r3, #10
 8001eda:	2308      	moveq	r3, #8
 8001edc:	2100      	movs	r1, #0
 8001ede:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001ee2:	6866      	ldr	r6, [r4, #4]
 8001ee4:	60a6      	str	r6, [r4, #8]
 8001ee6:	2e00      	cmp	r6, #0
 8001ee8:	bfa2      	ittt	ge
 8001eea:	6821      	ldrge	r1, [r4, #0]
 8001eec:	f021 0104 	bicge.w	r1, r1, #4
 8001ef0:	6021      	strge	r1, [r4, #0]
 8001ef2:	b90d      	cbnz	r5, 8001ef8 <_printf_i+0x110>
 8001ef4:	2e00      	cmp	r6, #0
 8001ef6:	d04b      	beq.n	8001f90 <_printf_i+0x1a8>
 8001ef8:	4616      	mov	r6, r2
 8001efa:	fbb5 f1f3 	udiv	r1, r5, r3
 8001efe:	fb03 5711 	mls	r7, r3, r1, r5
 8001f02:	5dc7      	ldrb	r7, [r0, r7]
 8001f04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f08:	462f      	mov	r7, r5
 8001f0a:	42bb      	cmp	r3, r7
 8001f0c:	460d      	mov	r5, r1
 8001f0e:	d9f4      	bls.n	8001efa <_printf_i+0x112>
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d10b      	bne.n	8001f2c <_printf_i+0x144>
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	07df      	lsls	r7, r3, #31
 8001f18:	d508      	bpl.n	8001f2c <_printf_i+0x144>
 8001f1a:	6923      	ldr	r3, [r4, #16]
 8001f1c:	6861      	ldr	r1, [r4, #4]
 8001f1e:	4299      	cmp	r1, r3
 8001f20:	bfde      	ittt	le
 8001f22:	2330      	movle	r3, #48	@ 0x30
 8001f24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001f2c:	1b92      	subs	r2, r2, r6
 8001f2e:	6122      	str	r2, [r4, #16]
 8001f30:	f8cd a000 	str.w	sl, [sp]
 8001f34:	464b      	mov	r3, r9
 8001f36:	aa03      	add	r2, sp, #12
 8001f38:	4621      	mov	r1, r4
 8001f3a:	4640      	mov	r0, r8
 8001f3c:	f7ff fee6 	bl	8001d0c <_printf_common>
 8001f40:	3001      	adds	r0, #1
 8001f42:	d14a      	bne.n	8001fda <_printf_i+0x1f2>
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	b004      	add	sp, #16
 8001f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	f043 0320 	orr.w	r3, r3, #32
 8001f54:	6023      	str	r3, [r4, #0]
 8001f56:	4833      	ldr	r0, [pc, #204]	@ (8002024 <_printf_i+0x23c>)
 8001f58:	2778      	movs	r7, #120	@ 0x78
 8001f5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	6831      	ldr	r1, [r6, #0]
 8001f62:	061f      	lsls	r7, r3, #24
 8001f64:	f851 5b04 	ldr.w	r5, [r1], #4
 8001f68:	d402      	bmi.n	8001f70 <_printf_i+0x188>
 8001f6a:	065f      	lsls	r7, r3, #25
 8001f6c:	bf48      	it	mi
 8001f6e:	b2ad      	uxthmi	r5, r5
 8001f70:	6031      	str	r1, [r6, #0]
 8001f72:	07d9      	lsls	r1, r3, #31
 8001f74:	bf44      	itt	mi
 8001f76:	f043 0320 	orrmi.w	r3, r3, #32
 8001f7a:	6023      	strmi	r3, [r4, #0]
 8001f7c:	b11d      	cbz	r5, 8001f86 <_printf_i+0x19e>
 8001f7e:	2310      	movs	r3, #16
 8001f80:	e7ac      	b.n	8001edc <_printf_i+0xf4>
 8001f82:	4827      	ldr	r0, [pc, #156]	@ (8002020 <_printf_i+0x238>)
 8001f84:	e7e9      	b.n	8001f5a <_printf_i+0x172>
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	f023 0320 	bic.w	r3, r3, #32
 8001f8c:	6023      	str	r3, [r4, #0]
 8001f8e:	e7f6      	b.n	8001f7e <_printf_i+0x196>
 8001f90:	4616      	mov	r6, r2
 8001f92:	e7bd      	b.n	8001f10 <_printf_i+0x128>
 8001f94:	6833      	ldr	r3, [r6, #0]
 8001f96:	6825      	ldr	r5, [r4, #0]
 8001f98:	6961      	ldr	r1, [r4, #20]
 8001f9a:	1d18      	adds	r0, r3, #4
 8001f9c:	6030      	str	r0, [r6, #0]
 8001f9e:	062e      	lsls	r6, r5, #24
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	d501      	bpl.n	8001fa8 <_printf_i+0x1c0>
 8001fa4:	6019      	str	r1, [r3, #0]
 8001fa6:	e002      	b.n	8001fae <_printf_i+0x1c6>
 8001fa8:	0668      	lsls	r0, r5, #25
 8001faa:	d5fb      	bpl.n	8001fa4 <_printf_i+0x1bc>
 8001fac:	8019      	strh	r1, [r3, #0]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	6123      	str	r3, [r4, #16]
 8001fb2:	4616      	mov	r6, r2
 8001fb4:	e7bc      	b.n	8001f30 <_printf_i+0x148>
 8001fb6:	6833      	ldr	r3, [r6, #0]
 8001fb8:	1d1a      	adds	r2, r3, #4
 8001fba:	6032      	str	r2, [r6, #0]
 8001fbc:	681e      	ldr	r6, [r3, #0]
 8001fbe:	6862      	ldr	r2, [r4, #4]
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4630      	mov	r0, r6
 8001fc4:	f7fe f90c 	bl	80001e0 <memchr>
 8001fc8:	b108      	cbz	r0, 8001fce <_printf_i+0x1e6>
 8001fca:	1b80      	subs	r0, r0, r6
 8001fcc:	6060      	str	r0, [r4, #4]
 8001fce:	6863      	ldr	r3, [r4, #4]
 8001fd0:	6123      	str	r3, [r4, #16]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001fd8:	e7aa      	b.n	8001f30 <_printf_i+0x148>
 8001fda:	6923      	ldr	r3, [r4, #16]
 8001fdc:	4632      	mov	r2, r6
 8001fde:	4649      	mov	r1, r9
 8001fe0:	4640      	mov	r0, r8
 8001fe2:	47d0      	blx	sl
 8001fe4:	3001      	adds	r0, #1
 8001fe6:	d0ad      	beq.n	8001f44 <_printf_i+0x15c>
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	079b      	lsls	r3, r3, #30
 8001fec:	d413      	bmi.n	8002016 <_printf_i+0x22e>
 8001fee:	68e0      	ldr	r0, [r4, #12]
 8001ff0:	9b03      	ldr	r3, [sp, #12]
 8001ff2:	4298      	cmp	r0, r3
 8001ff4:	bfb8      	it	lt
 8001ff6:	4618      	movlt	r0, r3
 8001ff8:	e7a6      	b.n	8001f48 <_printf_i+0x160>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	4632      	mov	r2, r6
 8001ffe:	4649      	mov	r1, r9
 8002000:	4640      	mov	r0, r8
 8002002:	47d0      	blx	sl
 8002004:	3001      	adds	r0, #1
 8002006:	d09d      	beq.n	8001f44 <_printf_i+0x15c>
 8002008:	3501      	adds	r5, #1
 800200a:	68e3      	ldr	r3, [r4, #12]
 800200c:	9903      	ldr	r1, [sp, #12]
 800200e:	1a5b      	subs	r3, r3, r1
 8002010:	42ab      	cmp	r3, r5
 8002012:	dcf2      	bgt.n	8001ffa <_printf_i+0x212>
 8002014:	e7eb      	b.n	8001fee <_printf_i+0x206>
 8002016:	2500      	movs	r5, #0
 8002018:	f104 0619 	add.w	r6, r4, #25
 800201c:	e7f5      	b.n	800200a <_printf_i+0x222>
 800201e:	bf00      	nop
 8002020:	0800454c 	.word	0x0800454c
 8002024:	0800455d 	.word	0x0800455d

08002028 <std>:
 8002028:	2300      	movs	r3, #0
 800202a:	b510      	push	{r4, lr}
 800202c:	4604      	mov	r4, r0
 800202e:	e9c0 3300 	strd	r3, r3, [r0]
 8002032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002036:	6083      	str	r3, [r0, #8]
 8002038:	8181      	strh	r1, [r0, #12]
 800203a:	6643      	str	r3, [r0, #100]	@ 0x64
 800203c:	81c2      	strh	r2, [r0, #14]
 800203e:	6183      	str	r3, [r0, #24]
 8002040:	4619      	mov	r1, r3
 8002042:	2208      	movs	r2, #8
 8002044:	305c      	adds	r0, #92	@ 0x5c
 8002046:	f000 f93f 	bl	80022c8 <memset>
 800204a:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <std+0x58>)
 800204c:	6263      	str	r3, [r4, #36]	@ 0x24
 800204e:	4b0d      	ldr	r3, [pc, #52]	@ (8002084 <std+0x5c>)
 8002050:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002052:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <std+0x60>)
 8002054:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <std+0x64>)
 8002058:	6323      	str	r3, [r4, #48]	@ 0x30
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <std+0x68>)
 800205c:	6224      	str	r4, [r4, #32]
 800205e:	429c      	cmp	r4, r3
 8002060:	d006      	beq.n	8002070 <std+0x48>
 8002062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002066:	4294      	cmp	r4, r2
 8002068:	d002      	beq.n	8002070 <std+0x48>
 800206a:	33d0      	adds	r3, #208	@ 0xd0
 800206c:	429c      	cmp	r4, r3
 800206e:	d105      	bne.n	800207c <std+0x54>
 8002070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002078:	f000 b9a2 	b.w	80023c0 <__retarget_lock_init_recursive>
 800207c:	bd10      	pop	{r4, pc}
 800207e:	bf00      	nop
 8002080:	080021d1 	.word	0x080021d1
 8002084:	080021f3 	.word	0x080021f3
 8002088:	0800222b 	.word	0x0800222b
 800208c:	0800224f 	.word	0x0800224f
 8002090:	20000208 	.word	0x20000208

08002094 <stdio_exit_handler>:
 8002094:	4a02      	ldr	r2, [pc, #8]	@ (80020a0 <stdio_exit_handler+0xc>)
 8002096:	4903      	ldr	r1, [pc, #12]	@ (80020a4 <stdio_exit_handler+0x10>)
 8002098:	4803      	ldr	r0, [pc, #12]	@ (80020a8 <stdio_exit_handler+0x14>)
 800209a:	f000 b869 	b.w	8002170 <_fwalk_sglue>
 800209e:	bf00      	nop
 80020a0:	20000000 	.word	0x20000000
 80020a4:	08003fa1 	.word	0x08003fa1
 80020a8:	20000010 	.word	0x20000010

080020ac <cleanup_stdio>:
 80020ac:	6841      	ldr	r1, [r0, #4]
 80020ae:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <cleanup_stdio+0x34>)
 80020b0:	4299      	cmp	r1, r3
 80020b2:	b510      	push	{r4, lr}
 80020b4:	4604      	mov	r4, r0
 80020b6:	d001      	beq.n	80020bc <cleanup_stdio+0x10>
 80020b8:	f001 ff72 	bl	8003fa0 <_fflush_r>
 80020bc:	68a1      	ldr	r1, [r4, #8]
 80020be:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <cleanup_stdio+0x38>)
 80020c0:	4299      	cmp	r1, r3
 80020c2:	d002      	beq.n	80020ca <cleanup_stdio+0x1e>
 80020c4:	4620      	mov	r0, r4
 80020c6:	f001 ff6b 	bl	8003fa0 <_fflush_r>
 80020ca:	68e1      	ldr	r1, [r4, #12]
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <cleanup_stdio+0x3c>)
 80020ce:	4299      	cmp	r1, r3
 80020d0:	d004      	beq.n	80020dc <cleanup_stdio+0x30>
 80020d2:	4620      	mov	r0, r4
 80020d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020d8:	f001 bf62 	b.w	8003fa0 <_fflush_r>
 80020dc:	bd10      	pop	{r4, pc}
 80020de:	bf00      	nop
 80020e0:	20000208 	.word	0x20000208
 80020e4:	20000270 	.word	0x20000270
 80020e8:	200002d8 	.word	0x200002d8

080020ec <global_stdio_init.part.0>:
 80020ec:	b510      	push	{r4, lr}
 80020ee:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <global_stdio_init.part.0+0x30>)
 80020f0:	4c0b      	ldr	r4, [pc, #44]	@ (8002120 <global_stdio_init.part.0+0x34>)
 80020f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002124 <global_stdio_init.part.0+0x38>)
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	4620      	mov	r0, r4
 80020f8:	2200      	movs	r2, #0
 80020fa:	2104      	movs	r1, #4
 80020fc:	f7ff ff94 	bl	8002028 <std>
 8002100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002104:	2201      	movs	r2, #1
 8002106:	2109      	movs	r1, #9
 8002108:	f7ff ff8e 	bl	8002028 <std>
 800210c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002110:	2202      	movs	r2, #2
 8002112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002116:	2112      	movs	r1, #18
 8002118:	f7ff bf86 	b.w	8002028 <std>
 800211c:	20000340 	.word	0x20000340
 8002120:	20000208 	.word	0x20000208
 8002124:	08002095 	.word	0x08002095

08002128 <__sfp_lock_acquire>:
 8002128:	4801      	ldr	r0, [pc, #4]	@ (8002130 <__sfp_lock_acquire+0x8>)
 800212a:	f000 b94a 	b.w	80023c2 <__retarget_lock_acquire_recursive>
 800212e:	bf00      	nop
 8002130:	20000349 	.word	0x20000349

08002134 <__sfp_lock_release>:
 8002134:	4801      	ldr	r0, [pc, #4]	@ (800213c <__sfp_lock_release+0x8>)
 8002136:	f000 b945 	b.w	80023c4 <__retarget_lock_release_recursive>
 800213a:	bf00      	nop
 800213c:	20000349 	.word	0x20000349

08002140 <__sinit>:
 8002140:	b510      	push	{r4, lr}
 8002142:	4604      	mov	r4, r0
 8002144:	f7ff fff0 	bl	8002128 <__sfp_lock_acquire>
 8002148:	6a23      	ldr	r3, [r4, #32]
 800214a:	b11b      	cbz	r3, 8002154 <__sinit+0x14>
 800214c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002150:	f7ff bff0 	b.w	8002134 <__sfp_lock_release>
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <__sinit+0x28>)
 8002156:	6223      	str	r3, [r4, #32]
 8002158:	4b04      	ldr	r3, [pc, #16]	@ (800216c <__sinit+0x2c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f5      	bne.n	800214c <__sinit+0xc>
 8002160:	f7ff ffc4 	bl	80020ec <global_stdio_init.part.0>
 8002164:	e7f2      	b.n	800214c <__sinit+0xc>
 8002166:	bf00      	nop
 8002168:	080020ad 	.word	0x080020ad
 800216c:	20000340 	.word	0x20000340

08002170 <_fwalk_sglue>:
 8002170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002174:	4607      	mov	r7, r0
 8002176:	4688      	mov	r8, r1
 8002178:	4614      	mov	r4, r2
 800217a:	2600      	movs	r6, #0
 800217c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002180:	f1b9 0901 	subs.w	r9, r9, #1
 8002184:	d505      	bpl.n	8002192 <_fwalk_sglue+0x22>
 8002186:	6824      	ldr	r4, [r4, #0]
 8002188:	2c00      	cmp	r4, #0
 800218a:	d1f7      	bne.n	800217c <_fwalk_sglue+0xc>
 800218c:	4630      	mov	r0, r6
 800218e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002192:	89ab      	ldrh	r3, [r5, #12]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d907      	bls.n	80021a8 <_fwalk_sglue+0x38>
 8002198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800219c:	3301      	adds	r3, #1
 800219e:	d003      	beq.n	80021a8 <_fwalk_sglue+0x38>
 80021a0:	4629      	mov	r1, r5
 80021a2:	4638      	mov	r0, r7
 80021a4:	47c0      	blx	r8
 80021a6:	4306      	orrs	r6, r0
 80021a8:	3568      	adds	r5, #104	@ 0x68
 80021aa:	e7e9      	b.n	8002180 <_fwalk_sglue+0x10>

080021ac <iprintf>:
 80021ac:	b40f      	push	{r0, r1, r2, r3}
 80021ae:	b507      	push	{r0, r1, r2, lr}
 80021b0:	4906      	ldr	r1, [pc, #24]	@ (80021cc <iprintf+0x20>)
 80021b2:	ab04      	add	r3, sp, #16
 80021b4:	6808      	ldr	r0, [r1, #0]
 80021b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80021ba:	6881      	ldr	r1, [r0, #8]
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	f001 fd53 	bl	8003c68 <_vfiprintf_r>
 80021c2:	b003      	add	sp, #12
 80021c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80021c8:	b004      	add	sp, #16
 80021ca:	4770      	bx	lr
 80021cc:	2000000c 	.word	0x2000000c

080021d0 <__sread>:
 80021d0:	b510      	push	{r4, lr}
 80021d2:	460c      	mov	r4, r1
 80021d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021d8:	f000 f8a4 	bl	8002324 <_read_r>
 80021dc:	2800      	cmp	r0, #0
 80021de:	bfab      	itete	ge
 80021e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80021e2:	89a3      	ldrhlt	r3, [r4, #12]
 80021e4:	181b      	addge	r3, r3, r0
 80021e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80021ea:	bfac      	ite	ge
 80021ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80021ee:	81a3      	strhlt	r3, [r4, #12]
 80021f0:	bd10      	pop	{r4, pc}

080021f2 <__swrite>:
 80021f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f6:	461f      	mov	r7, r3
 80021f8:	898b      	ldrh	r3, [r1, #12]
 80021fa:	05db      	lsls	r3, r3, #23
 80021fc:	4605      	mov	r5, r0
 80021fe:	460c      	mov	r4, r1
 8002200:	4616      	mov	r6, r2
 8002202:	d505      	bpl.n	8002210 <__swrite+0x1e>
 8002204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002208:	2302      	movs	r3, #2
 800220a:	2200      	movs	r2, #0
 800220c:	f000 f878 	bl	8002300 <_lseek_r>
 8002210:	89a3      	ldrh	r3, [r4, #12]
 8002212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002216:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800221a:	81a3      	strh	r3, [r4, #12]
 800221c:	4632      	mov	r2, r6
 800221e:	463b      	mov	r3, r7
 8002220:	4628      	mov	r0, r5
 8002222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002226:	f000 b88f 	b.w	8002348 <_write_r>

0800222a <__sseek>:
 800222a:	b510      	push	{r4, lr}
 800222c:	460c      	mov	r4, r1
 800222e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002232:	f000 f865 	bl	8002300 <_lseek_r>
 8002236:	1c43      	adds	r3, r0, #1
 8002238:	89a3      	ldrh	r3, [r4, #12]
 800223a:	bf15      	itete	ne
 800223c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800223e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002242:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002246:	81a3      	strheq	r3, [r4, #12]
 8002248:	bf18      	it	ne
 800224a:	81a3      	strhne	r3, [r4, #12]
 800224c:	bd10      	pop	{r4, pc}

0800224e <__sclose>:
 800224e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002252:	f000 b845 	b.w	80022e0 <_close_r>

08002256 <_vsniprintf_r>:
 8002256:	b530      	push	{r4, r5, lr}
 8002258:	4614      	mov	r4, r2
 800225a:	2c00      	cmp	r4, #0
 800225c:	b09b      	sub	sp, #108	@ 0x6c
 800225e:	4605      	mov	r5, r0
 8002260:	461a      	mov	r2, r3
 8002262:	da05      	bge.n	8002270 <_vsniprintf_r+0x1a>
 8002264:	238b      	movs	r3, #139	@ 0x8b
 8002266:	6003      	str	r3, [r0, #0]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	b01b      	add	sp, #108	@ 0x6c
 800226e:	bd30      	pop	{r4, r5, pc}
 8002270:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002274:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002278:	bf14      	ite	ne
 800227a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800227e:	4623      	moveq	r3, r4
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	9305      	str	r3, [sp, #20]
 8002284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002288:	9100      	str	r1, [sp, #0]
 800228a:	9104      	str	r1, [sp, #16]
 800228c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002290:	4669      	mov	r1, sp
 8002292:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8002294:	f001 fbc2 	bl	8003a1c <_svfiprintf_r>
 8002298:	1c43      	adds	r3, r0, #1
 800229a:	bfbc      	itt	lt
 800229c:	238b      	movlt	r3, #139	@ 0x8b
 800229e:	602b      	strlt	r3, [r5, #0]
 80022a0:	2c00      	cmp	r4, #0
 80022a2:	d0e3      	beq.n	800226c <_vsniprintf_r+0x16>
 80022a4:	9b00      	ldr	r3, [sp, #0]
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e7df      	b.n	800226c <_vsniprintf_r+0x16>

080022ac <vsniprintf>:
 80022ac:	b507      	push	{r0, r1, r2, lr}
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	460a      	mov	r2, r1
 80022b4:	4601      	mov	r1, r0
 80022b6:	4803      	ldr	r0, [pc, #12]	@ (80022c4 <vsniprintf+0x18>)
 80022b8:	6800      	ldr	r0, [r0, #0]
 80022ba:	f7ff ffcc 	bl	8002256 <_vsniprintf_r>
 80022be:	b003      	add	sp, #12
 80022c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80022c4:	2000000c 	.word	0x2000000c

080022c8 <memset>:
 80022c8:	4402      	add	r2, r0
 80022ca:	4603      	mov	r3, r0
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d100      	bne.n	80022d2 <memset+0xa>
 80022d0:	4770      	bx	lr
 80022d2:	f803 1b01 	strb.w	r1, [r3], #1
 80022d6:	e7f9      	b.n	80022cc <memset+0x4>

080022d8 <_localeconv_r>:
 80022d8:	4800      	ldr	r0, [pc, #0]	@ (80022dc <_localeconv_r+0x4>)
 80022da:	4770      	bx	lr
 80022dc:	2000014c 	.word	0x2000014c

080022e0 <_close_r>:
 80022e0:	b538      	push	{r3, r4, r5, lr}
 80022e2:	4d06      	ldr	r5, [pc, #24]	@ (80022fc <_close_r+0x1c>)
 80022e4:	2300      	movs	r3, #0
 80022e6:	4604      	mov	r4, r0
 80022e8:	4608      	mov	r0, r1
 80022ea:	602b      	str	r3, [r5, #0]
 80022ec:	f7fe fd67 	bl	8000dbe <_close>
 80022f0:	1c43      	adds	r3, r0, #1
 80022f2:	d102      	bne.n	80022fa <_close_r+0x1a>
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	b103      	cbz	r3, 80022fa <_close_r+0x1a>
 80022f8:	6023      	str	r3, [r4, #0]
 80022fa:	bd38      	pop	{r3, r4, r5, pc}
 80022fc:	20000344 	.word	0x20000344

08002300 <_lseek_r>:
 8002300:	b538      	push	{r3, r4, r5, lr}
 8002302:	4d07      	ldr	r5, [pc, #28]	@ (8002320 <_lseek_r+0x20>)
 8002304:	4604      	mov	r4, r0
 8002306:	4608      	mov	r0, r1
 8002308:	4611      	mov	r1, r2
 800230a:	2200      	movs	r2, #0
 800230c:	602a      	str	r2, [r5, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	f7fe fd7c 	bl	8000e0c <_lseek>
 8002314:	1c43      	adds	r3, r0, #1
 8002316:	d102      	bne.n	800231e <_lseek_r+0x1e>
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	b103      	cbz	r3, 800231e <_lseek_r+0x1e>
 800231c:	6023      	str	r3, [r4, #0]
 800231e:	bd38      	pop	{r3, r4, r5, pc}
 8002320:	20000344 	.word	0x20000344

08002324 <_read_r>:
 8002324:	b538      	push	{r3, r4, r5, lr}
 8002326:	4d07      	ldr	r5, [pc, #28]	@ (8002344 <_read_r+0x20>)
 8002328:	4604      	mov	r4, r0
 800232a:	4608      	mov	r0, r1
 800232c:	4611      	mov	r1, r2
 800232e:	2200      	movs	r2, #0
 8002330:	602a      	str	r2, [r5, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	f7fe fd0a 	bl	8000d4c <_read>
 8002338:	1c43      	adds	r3, r0, #1
 800233a:	d102      	bne.n	8002342 <_read_r+0x1e>
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	b103      	cbz	r3, 8002342 <_read_r+0x1e>
 8002340:	6023      	str	r3, [r4, #0]
 8002342:	bd38      	pop	{r3, r4, r5, pc}
 8002344:	20000344 	.word	0x20000344

08002348 <_write_r>:
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4d07      	ldr	r5, [pc, #28]	@ (8002368 <_write_r+0x20>)
 800234c:	4604      	mov	r4, r0
 800234e:	4608      	mov	r0, r1
 8002350:	4611      	mov	r1, r2
 8002352:	2200      	movs	r2, #0
 8002354:	602a      	str	r2, [r5, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	f7fe fd15 	bl	8000d86 <_write>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d102      	bne.n	8002366 <_write_r+0x1e>
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	b103      	cbz	r3, 8002366 <_write_r+0x1e>
 8002364:	6023      	str	r3, [r4, #0]
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	20000344 	.word	0x20000344

0800236c <__errno>:
 800236c:	4b01      	ldr	r3, [pc, #4]	@ (8002374 <__errno+0x8>)
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	2000000c 	.word	0x2000000c

08002378 <__libc_init_array>:
 8002378:	b570      	push	{r4, r5, r6, lr}
 800237a:	4d0d      	ldr	r5, [pc, #52]	@ (80023b0 <__libc_init_array+0x38>)
 800237c:	4c0d      	ldr	r4, [pc, #52]	@ (80023b4 <__libc_init_array+0x3c>)
 800237e:	1b64      	subs	r4, r4, r5
 8002380:	10a4      	asrs	r4, r4, #2
 8002382:	2600      	movs	r6, #0
 8002384:	42a6      	cmp	r6, r4
 8002386:	d109      	bne.n	800239c <__libc_init_array+0x24>
 8002388:	4d0b      	ldr	r5, [pc, #44]	@ (80023b8 <__libc_init_array+0x40>)
 800238a:	4c0c      	ldr	r4, [pc, #48]	@ (80023bc <__libc_init_array+0x44>)
 800238c:	f002 f866 	bl	800445c <_init>
 8002390:	1b64      	subs	r4, r4, r5
 8002392:	10a4      	asrs	r4, r4, #2
 8002394:	2600      	movs	r6, #0
 8002396:	42a6      	cmp	r6, r4
 8002398:	d105      	bne.n	80023a6 <__libc_init_array+0x2e>
 800239a:	bd70      	pop	{r4, r5, r6, pc}
 800239c:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a0:	4798      	blx	r3
 80023a2:	3601      	adds	r6, #1
 80023a4:	e7ee      	b.n	8002384 <__libc_init_array+0xc>
 80023a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023aa:	4798      	blx	r3
 80023ac:	3601      	adds	r6, #1
 80023ae:	e7f2      	b.n	8002396 <__libc_init_array+0x1e>
 80023b0:	080048b0 	.word	0x080048b0
 80023b4:	080048b0 	.word	0x080048b0
 80023b8:	080048b0 	.word	0x080048b0
 80023bc:	080048b4 	.word	0x080048b4

080023c0 <__retarget_lock_init_recursive>:
 80023c0:	4770      	bx	lr

080023c2 <__retarget_lock_acquire_recursive>:
 80023c2:	4770      	bx	lr

080023c4 <__retarget_lock_release_recursive>:
 80023c4:	4770      	bx	lr

080023c6 <quorem>:
 80023c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ca:	6903      	ldr	r3, [r0, #16]
 80023cc:	690c      	ldr	r4, [r1, #16]
 80023ce:	42a3      	cmp	r3, r4
 80023d0:	4607      	mov	r7, r0
 80023d2:	db7e      	blt.n	80024d2 <quorem+0x10c>
 80023d4:	3c01      	subs	r4, #1
 80023d6:	f101 0814 	add.w	r8, r1, #20
 80023da:	00a3      	lsls	r3, r4, #2
 80023dc:	f100 0514 	add.w	r5, r0, #20
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80023ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80023f0:	3301      	adds	r3, #1
 80023f2:	429a      	cmp	r2, r3
 80023f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80023f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80023fc:	d32e      	bcc.n	800245c <quorem+0x96>
 80023fe:	f04f 0a00 	mov.w	sl, #0
 8002402:	46c4      	mov	ip, r8
 8002404:	46ae      	mov	lr, r5
 8002406:	46d3      	mov	fp, sl
 8002408:	f85c 3b04 	ldr.w	r3, [ip], #4
 800240c:	b298      	uxth	r0, r3
 800240e:	fb06 a000 	mla	r0, r6, r0, sl
 8002412:	0c02      	lsrs	r2, r0, #16
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	fb06 2303 	mla	r3, r6, r3, r2
 800241a:	f8de 2000 	ldr.w	r2, [lr]
 800241e:	b280      	uxth	r0, r0
 8002420:	b292      	uxth	r2, r2
 8002422:	1a12      	subs	r2, r2, r0
 8002424:	445a      	add	r2, fp
 8002426:	f8de 0000 	ldr.w	r0, [lr]
 800242a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800242e:	b29b      	uxth	r3, r3
 8002430:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002434:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002438:	b292      	uxth	r2, r2
 800243a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800243e:	45e1      	cmp	r9, ip
 8002440:	f84e 2b04 	str.w	r2, [lr], #4
 8002444:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002448:	d2de      	bcs.n	8002408 <quorem+0x42>
 800244a:	9b00      	ldr	r3, [sp, #0]
 800244c:	58eb      	ldr	r3, [r5, r3]
 800244e:	b92b      	cbnz	r3, 800245c <quorem+0x96>
 8002450:	9b01      	ldr	r3, [sp, #4]
 8002452:	3b04      	subs	r3, #4
 8002454:	429d      	cmp	r5, r3
 8002456:	461a      	mov	r2, r3
 8002458:	d32f      	bcc.n	80024ba <quorem+0xf4>
 800245a:	613c      	str	r4, [r7, #16]
 800245c:	4638      	mov	r0, r7
 800245e:	f001 f979 	bl	8003754 <__mcmp>
 8002462:	2800      	cmp	r0, #0
 8002464:	db25      	blt.n	80024b2 <quorem+0xec>
 8002466:	4629      	mov	r1, r5
 8002468:	2000      	movs	r0, #0
 800246a:	f858 2b04 	ldr.w	r2, [r8], #4
 800246e:	f8d1 c000 	ldr.w	ip, [r1]
 8002472:	fa1f fe82 	uxth.w	lr, r2
 8002476:	fa1f f38c 	uxth.w	r3, ip
 800247a:	eba3 030e 	sub.w	r3, r3, lr
 800247e:	4403      	add	r3, r0
 8002480:	0c12      	lsrs	r2, r2, #16
 8002482:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002486:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800248a:	b29b      	uxth	r3, r3
 800248c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002490:	45c1      	cmp	r9, r8
 8002492:	f841 3b04 	str.w	r3, [r1], #4
 8002496:	ea4f 4022 	mov.w	r0, r2, asr #16
 800249a:	d2e6      	bcs.n	800246a <quorem+0xa4>
 800249c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80024a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80024a4:	b922      	cbnz	r2, 80024b0 <quorem+0xea>
 80024a6:	3b04      	subs	r3, #4
 80024a8:	429d      	cmp	r5, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	d30b      	bcc.n	80024c6 <quorem+0x100>
 80024ae:	613c      	str	r4, [r7, #16]
 80024b0:	3601      	adds	r6, #1
 80024b2:	4630      	mov	r0, r6
 80024b4:	b003      	add	sp, #12
 80024b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	3b04      	subs	r3, #4
 80024be:	2a00      	cmp	r2, #0
 80024c0:	d1cb      	bne.n	800245a <quorem+0x94>
 80024c2:	3c01      	subs	r4, #1
 80024c4:	e7c6      	b.n	8002454 <quorem+0x8e>
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	3b04      	subs	r3, #4
 80024ca:	2a00      	cmp	r2, #0
 80024cc:	d1ef      	bne.n	80024ae <quorem+0xe8>
 80024ce:	3c01      	subs	r4, #1
 80024d0:	e7ea      	b.n	80024a8 <quorem+0xe2>
 80024d2:	2000      	movs	r0, #0
 80024d4:	e7ee      	b.n	80024b4 <quorem+0xee>
	...

080024d8 <_dtoa_r>:
 80024d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024dc:	69c7      	ldr	r7, [r0, #28]
 80024de:	b099      	sub	sp, #100	@ 0x64
 80024e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80024e4:	ec55 4b10 	vmov	r4, r5, d0
 80024e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80024ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80024ec:	4683      	mov	fp, r0
 80024ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80024f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80024f2:	b97f      	cbnz	r7, 8002514 <_dtoa_r+0x3c>
 80024f4:	2010      	movs	r0, #16
 80024f6:	f000 fdfd 	bl	80030f4 <malloc>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8002500:	b920      	cbnz	r0, 800250c <_dtoa_r+0x34>
 8002502:	4ba7      	ldr	r3, [pc, #668]	@ (80027a0 <_dtoa_r+0x2c8>)
 8002504:	21ef      	movs	r1, #239	@ 0xef
 8002506:	48a7      	ldr	r0, [pc, #668]	@ (80027a4 <_dtoa_r+0x2cc>)
 8002508:	f001 fe3e 	bl	8004188 <__assert_func>
 800250c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002510:	6007      	str	r7, [r0, #0]
 8002512:	60c7      	str	r7, [r0, #12]
 8002514:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002518:	6819      	ldr	r1, [r3, #0]
 800251a:	b159      	cbz	r1, 8002534 <_dtoa_r+0x5c>
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	604a      	str	r2, [r1, #4]
 8002520:	2301      	movs	r3, #1
 8002522:	4093      	lsls	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
 8002526:	4658      	mov	r0, fp
 8002528:	f000 feda 	bl	80032e0 <_Bfree>
 800252c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	1e2b      	subs	r3, r5, #0
 8002536:	bfb9      	ittee	lt
 8002538:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800253c:	9303      	strlt	r3, [sp, #12]
 800253e:	2300      	movge	r3, #0
 8002540:	6033      	strge	r3, [r6, #0]
 8002542:	9f03      	ldr	r7, [sp, #12]
 8002544:	4b98      	ldr	r3, [pc, #608]	@ (80027a8 <_dtoa_r+0x2d0>)
 8002546:	bfbc      	itt	lt
 8002548:	2201      	movlt	r2, #1
 800254a:	6032      	strlt	r2, [r6, #0]
 800254c:	43bb      	bics	r3, r7
 800254e:	d112      	bne.n	8002576 <_dtoa_r+0x9e>
 8002550:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002552:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800255c:	4323      	orrs	r3, r4
 800255e:	f000 854d 	beq.w	8002ffc <_dtoa_r+0xb24>
 8002562:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002564:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80027bc <_dtoa_r+0x2e4>
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 854f 	beq.w	800300c <_dtoa_r+0xb34>
 800256e:	f10a 0303 	add.w	r3, sl, #3
 8002572:	f000 bd49 	b.w	8003008 <_dtoa_r+0xb30>
 8002576:	ed9d 7b02 	vldr	d7, [sp, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	ec51 0b17 	vmov	r0, r1, d7
 8002580:	2300      	movs	r3, #0
 8002582:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002586:	f7fe faa7 	bl	8000ad8 <__aeabi_dcmpeq>
 800258a:	4680      	mov	r8, r0
 800258c:	b158      	cbz	r0, 80025a6 <_dtoa_r+0xce>
 800258e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002590:	2301      	movs	r3, #1
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002596:	b113      	cbz	r3, 800259e <_dtoa_r+0xc6>
 8002598:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800259a:	4b84      	ldr	r3, [pc, #528]	@ (80027ac <_dtoa_r+0x2d4>)
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80027c0 <_dtoa_r+0x2e8>
 80025a2:	f000 bd33 	b.w	800300c <_dtoa_r+0xb34>
 80025a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80025aa:	aa16      	add	r2, sp, #88	@ 0x58
 80025ac:	a917      	add	r1, sp, #92	@ 0x5c
 80025ae:	4658      	mov	r0, fp
 80025b0:	f001 f980 	bl	80038b4 <__d2b>
 80025b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80025b8:	4681      	mov	r9, r0
 80025ba:	2e00      	cmp	r6, #0
 80025bc:	d077      	beq.n	80026ae <_dtoa_r+0x1d6>
 80025be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80025c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80025c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80025cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80025d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80025d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80025d8:	4619      	mov	r1, r3
 80025da:	2200      	movs	r2, #0
 80025dc:	4b74      	ldr	r3, [pc, #464]	@ (80027b0 <_dtoa_r+0x2d8>)
 80025de:	f7fd fe5b 	bl	8000298 <__aeabi_dsub>
 80025e2:	a369      	add	r3, pc, #420	@ (adr r3, 8002788 <_dtoa_r+0x2b0>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f7fe f80e 	bl	8000608 <__aeabi_dmul>
 80025ec:	a368      	add	r3, pc, #416	@ (adr r3, 8002790 <_dtoa_r+0x2b8>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fd fe53 	bl	800029c <__adddf3>
 80025f6:	4604      	mov	r4, r0
 80025f8:	4630      	mov	r0, r6
 80025fa:	460d      	mov	r5, r1
 80025fc:	f7fd ff9a 	bl	8000534 <__aeabi_i2d>
 8002600:	a365      	add	r3, pc, #404	@ (adr r3, 8002798 <_dtoa_r+0x2c0>)
 8002602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002606:	f7fd ffff 	bl	8000608 <__aeabi_dmul>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4620      	mov	r0, r4
 8002610:	4629      	mov	r1, r5
 8002612:	f7fd fe43 	bl	800029c <__adddf3>
 8002616:	4604      	mov	r4, r0
 8002618:	460d      	mov	r5, r1
 800261a:	f7fe faa5 	bl	8000b68 <__aeabi_d2iz>
 800261e:	2200      	movs	r2, #0
 8002620:	4607      	mov	r7, r0
 8002622:	2300      	movs	r3, #0
 8002624:	4620      	mov	r0, r4
 8002626:	4629      	mov	r1, r5
 8002628:	f7fe fa60 	bl	8000aec <__aeabi_dcmplt>
 800262c:	b140      	cbz	r0, 8002640 <_dtoa_r+0x168>
 800262e:	4638      	mov	r0, r7
 8002630:	f7fd ff80 	bl	8000534 <__aeabi_i2d>
 8002634:	4622      	mov	r2, r4
 8002636:	462b      	mov	r3, r5
 8002638:	f7fe fa4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800263c:	b900      	cbnz	r0, 8002640 <_dtoa_r+0x168>
 800263e:	3f01      	subs	r7, #1
 8002640:	2f16      	cmp	r7, #22
 8002642:	d851      	bhi.n	80026e8 <_dtoa_r+0x210>
 8002644:	4b5b      	ldr	r3, [pc, #364]	@ (80027b4 <_dtoa_r+0x2dc>)
 8002646:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002652:	f7fe fa4b 	bl	8000aec <__aeabi_dcmplt>
 8002656:	2800      	cmp	r0, #0
 8002658:	d048      	beq.n	80026ec <_dtoa_r+0x214>
 800265a:	3f01      	subs	r7, #1
 800265c:	2300      	movs	r3, #0
 800265e:	9312      	str	r3, [sp, #72]	@ 0x48
 8002660:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002662:	1b9b      	subs	r3, r3, r6
 8002664:	1e5a      	subs	r2, r3, #1
 8002666:	bf44      	itt	mi
 8002668:	f1c3 0801 	rsbmi	r8, r3, #1
 800266c:	2300      	movmi	r3, #0
 800266e:	9208      	str	r2, [sp, #32]
 8002670:	bf54      	ite	pl
 8002672:	f04f 0800 	movpl.w	r8, #0
 8002676:	9308      	strmi	r3, [sp, #32]
 8002678:	2f00      	cmp	r7, #0
 800267a:	db39      	blt.n	80026f0 <_dtoa_r+0x218>
 800267c:	9b08      	ldr	r3, [sp, #32]
 800267e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8002680:	443b      	add	r3, r7
 8002682:	9308      	str	r3, [sp, #32]
 8002684:	2300      	movs	r3, #0
 8002686:	930a      	str	r3, [sp, #40]	@ 0x28
 8002688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800268a:	2b09      	cmp	r3, #9
 800268c:	d864      	bhi.n	8002758 <_dtoa_r+0x280>
 800268e:	2b05      	cmp	r3, #5
 8002690:	bfc4      	itt	gt
 8002692:	3b04      	subgt	r3, #4
 8002694:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8002696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002698:	f1a3 0302 	sub.w	r3, r3, #2
 800269c:	bfcc      	ite	gt
 800269e:	2400      	movgt	r4, #0
 80026a0:	2401      	movle	r4, #1
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d863      	bhi.n	800276e <_dtoa_r+0x296>
 80026a6:	e8df f003 	tbb	[pc, r3]
 80026aa:	372a      	.short	0x372a
 80026ac:	5535      	.short	0x5535
 80026ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80026b2:	441e      	add	r6, r3
 80026b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	bfc1      	itttt	gt
 80026bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80026c0:	409f      	lslgt	r7, r3
 80026c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80026c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80026ca:	bfd6      	itet	le
 80026cc:	f1c3 0320 	rsble	r3, r3, #32
 80026d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80026d4:	fa04 f003 	lslle.w	r0, r4, r3
 80026d8:	f7fd ff1c 	bl	8000514 <__aeabi_ui2d>
 80026dc:	2201      	movs	r2, #1
 80026de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80026e2:	3e01      	subs	r6, #1
 80026e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80026e6:	e777      	b.n	80025d8 <_dtoa_r+0x100>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e7b8      	b.n	800265e <_dtoa_r+0x186>
 80026ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80026ee:	e7b7      	b.n	8002660 <_dtoa_r+0x188>
 80026f0:	427b      	negs	r3, r7
 80026f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80026f4:	2300      	movs	r3, #0
 80026f6:	eba8 0807 	sub.w	r8, r8, r7
 80026fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80026fc:	e7c4      	b.n	8002688 <_dtoa_r+0x1b0>
 80026fe:	2300      	movs	r3, #0
 8002700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002704:	2b00      	cmp	r3, #0
 8002706:	dc35      	bgt.n	8002774 <_dtoa_r+0x29c>
 8002708:	2301      	movs	r3, #1
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	9307      	str	r3, [sp, #28]
 800270e:	461a      	mov	r2, r3
 8002710:	920e      	str	r2, [sp, #56]	@ 0x38
 8002712:	e00b      	b.n	800272c <_dtoa_r+0x254>
 8002714:	2301      	movs	r3, #1
 8002716:	e7f3      	b.n	8002700 <_dtoa_r+0x228>
 8002718:	2300      	movs	r3, #0
 800271a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800271c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	9307      	str	r3, [sp, #28]
 8002728:	bfb8      	it	lt
 800272a:	2301      	movlt	r3, #1
 800272c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8002730:	2100      	movs	r1, #0
 8002732:	2204      	movs	r2, #4
 8002734:	f102 0514 	add.w	r5, r2, #20
 8002738:	429d      	cmp	r5, r3
 800273a:	d91f      	bls.n	800277c <_dtoa_r+0x2a4>
 800273c:	6041      	str	r1, [r0, #4]
 800273e:	4658      	mov	r0, fp
 8002740:	f000 fd8e 	bl	8003260 <_Balloc>
 8002744:	4682      	mov	sl, r0
 8002746:	2800      	cmp	r0, #0
 8002748:	d13c      	bne.n	80027c4 <_dtoa_r+0x2ec>
 800274a:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <_dtoa_r+0x2e0>)
 800274c:	4602      	mov	r2, r0
 800274e:	f240 11af 	movw	r1, #431	@ 0x1af
 8002752:	e6d8      	b.n	8002506 <_dtoa_r+0x2e>
 8002754:	2301      	movs	r3, #1
 8002756:	e7e0      	b.n	800271a <_dtoa_r+0x242>
 8002758:	2401      	movs	r4, #1
 800275a:	2300      	movs	r3, #0
 800275c:	9309      	str	r3, [sp, #36]	@ 0x24
 800275e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	9307      	str	r3, [sp, #28]
 8002768:	2200      	movs	r2, #0
 800276a:	2312      	movs	r3, #18
 800276c:	e7d0      	b.n	8002710 <_dtoa_r+0x238>
 800276e:	2301      	movs	r3, #1
 8002770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002772:	e7f5      	b.n	8002760 <_dtoa_r+0x288>
 8002774:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	9307      	str	r3, [sp, #28]
 800277a:	e7d7      	b.n	800272c <_dtoa_r+0x254>
 800277c:	3101      	adds	r1, #1
 800277e:	0052      	lsls	r2, r2, #1
 8002780:	e7d8      	b.n	8002734 <_dtoa_r+0x25c>
 8002782:	bf00      	nop
 8002784:	f3af 8000 	nop.w
 8002788:	636f4361 	.word	0x636f4361
 800278c:	3fd287a7 	.word	0x3fd287a7
 8002790:	8b60c8b3 	.word	0x8b60c8b3
 8002794:	3fc68a28 	.word	0x3fc68a28
 8002798:	509f79fb 	.word	0x509f79fb
 800279c:	3fd34413 	.word	0x3fd34413
 80027a0:	0800457b 	.word	0x0800457b
 80027a4:	08004592 	.word	0x08004592
 80027a8:	7ff00000 	.word	0x7ff00000
 80027ac:	0800454b 	.word	0x0800454b
 80027b0:	3ff80000 	.word	0x3ff80000
 80027b4:	08004688 	.word	0x08004688
 80027b8:	080045ea 	.word	0x080045ea
 80027bc:	08004577 	.word	0x08004577
 80027c0:	0800454a 	.word	0x0800454a
 80027c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80027c8:	6018      	str	r0, [r3, #0]
 80027ca:	9b07      	ldr	r3, [sp, #28]
 80027cc:	2b0e      	cmp	r3, #14
 80027ce:	f200 80a4 	bhi.w	800291a <_dtoa_r+0x442>
 80027d2:	2c00      	cmp	r4, #0
 80027d4:	f000 80a1 	beq.w	800291a <_dtoa_r+0x442>
 80027d8:	2f00      	cmp	r7, #0
 80027da:	dd33      	ble.n	8002844 <_dtoa_r+0x36c>
 80027dc:	4bad      	ldr	r3, [pc, #692]	@ (8002a94 <_dtoa_r+0x5bc>)
 80027de:	f007 020f 	and.w	r2, r7, #15
 80027e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80027e6:	ed93 7b00 	vldr	d7, [r3]
 80027ea:	05f8      	lsls	r0, r7, #23
 80027ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80027f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80027f4:	d516      	bpl.n	8002824 <_dtoa_r+0x34c>
 80027f6:	4ba8      	ldr	r3, [pc, #672]	@ (8002a98 <_dtoa_r+0x5c0>)
 80027f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80027fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002800:	f7fe f82c 	bl	800085c <__aeabi_ddiv>
 8002804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002808:	f004 040f 	and.w	r4, r4, #15
 800280c:	2603      	movs	r6, #3
 800280e:	4da2      	ldr	r5, [pc, #648]	@ (8002a98 <_dtoa_r+0x5c0>)
 8002810:	b954      	cbnz	r4, 8002828 <_dtoa_r+0x350>
 8002812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800281a:	f7fe f81f 	bl	800085c <__aeabi_ddiv>
 800281e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002822:	e028      	b.n	8002876 <_dtoa_r+0x39e>
 8002824:	2602      	movs	r6, #2
 8002826:	e7f2      	b.n	800280e <_dtoa_r+0x336>
 8002828:	07e1      	lsls	r1, r4, #31
 800282a:	d508      	bpl.n	800283e <_dtoa_r+0x366>
 800282c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002830:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002834:	f7fd fee8 	bl	8000608 <__aeabi_dmul>
 8002838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800283c:	3601      	adds	r6, #1
 800283e:	1064      	asrs	r4, r4, #1
 8002840:	3508      	adds	r5, #8
 8002842:	e7e5      	b.n	8002810 <_dtoa_r+0x338>
 8002844:	f000 80d2 	beq.w	80029ec <_dtoa_r+0x514>
 8002848:	427c      	negs	r4, r7
 800284a:	4b92      	ldr	r3, [pc, #584]	@ (8002a94 <_dtoa_r+0x5bc>)
 800284c:	4d92      	ldr	r5, [pc, #584]	@ (8002a98 <_dtoa_r+0x5c0>)
 800284e:	f004 020f 	and.w	r2, r4, #15
 8002852:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800285e:	f7fd fed3 	bl	8000608 <__aeabi_dmul>
 8002862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002866:	1124      	asrs	r4, r4, #4
 8002868:	2300      	movs	r3, #0
 800286a:	2602      	movs	r6, #2
 800286c:	2c00      	cmp	r4, #0
 800286e:	f040 80b2 	bne.w	80029d6 <_dtoa_r+0x4fe>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1d3      	bne.n	800281e <_dtoa_r+0x346>
 8002876:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002878:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80b7 	beq.w	80029f0 <_dtoa_r+0x518>
 8002882:	4b86      	ldr	r3, [pc, #536]	@ (8002a9c <_dtoa_r+0x5c4>)
 8002884:	2200      	movs	r2, #0
 8002886:	4620      	mov	r0, r4
 8002888:	4629      	mov	r1, r5
 800288a:	f7fe f92f 	bl	8000aec <__aeabi_dcmplt>
 800288e:	2800      	cmp	r0, #0
 8002890:	f000 80ae 	beq.w	80029f0 <_dtoa_r+0x518>
 8002894:	9b07      	ldr	r3, [sp, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80aa 	beq.w	80029f0 <_dtoa_r+0x518>
 800289c:	9b00      	ldr	r3, [sp, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	dd37      	ble.n	8002912 <_dtoa_r+0x43a>
 80028a2:	1e7b      	subs	r3, r7, #1
 80028a4:	9304      	str	r3, [sp, #16]
 80028a6:	4620      	mov	r0, r4
 80028a8:	4b7d      	ldr	r3, [pc, #500]	@ (8002aa0 <_dtoa_r+0x5c8>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	4629      	mov	r1, r5
 80028ae:	f7fd feab 	bl	8000608 <__aeabi_dmul>
 80028b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80028b6:	9c00      	ldr	r4, [sp, #0]
 80028b8:	3601      	adds	r6, #1
 80028ba:	4630      	mov	r0, r6
 80028bc:	f7fd fe3a 	bl	8000534 <__aeabi_i2d>
 80028c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80028c4:	f7fd fea0 	bl	8000608 <__aeabi_dmul>
 80028c8:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <_dtoa_r+0x5cc>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	f7fd fce6 	bl	800029c <__adddf3>
 80028d0:	4605      	mov	r5, r0
 80028d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80028d6:	2c00      	cmp	r4, #0
 80028d8:	f040 808d 	bne.w	80029f6 <_dtoa_r+0x51e>
 80028dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80028e0:	4b71      	ldr	r3, [pc, #452]	@ (8002aa8 <_dtoa_r+0x5d0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	f7fd fcd8 	bl	8000298 <__aeabi_dsub>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028f0:	462a      	mov	r2, r5
 80028f2:	4633      	mov	r3, r6
 80028f4:	f7fe f918 	bl	8000b28 <__aeabi_dcmpgt>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f040 828b 	bne.w	8002e14 <_dtoa_r+0x93c>
 80028fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002902:	462a      	mov	r2, r5
 8002904:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8002908:	f7fe f8f0 	bl	8000aec <__aeabi_dcmplt>
 800290c:	2800      	cmp	r0, #0
 800290e:	f040 8128 	bne.w	8002b62 <_dtoa_r+0x68a>
 8002912:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8002916:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800291a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800291c:	2b00      	cmp	r3, #0
 800291e:	f2c0 815a 	blt.w	8002bd6 <_dtoa_r+0x6fe>
 8002922:	2f0e      	cmp	r7, #14
 8002924:	f300 8157 	bgt.w	8002bd6 <_dtoa_r+0x6fe>
 8002928:	4b5a      	ldr	r3, [pc, #360]	@ (8002a94 <_dtoa_r+0x5bc>)
 800292a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800292e:	ed93 7b00 	vldr	d7, [r3]
 8002932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002934:	2b00      	cmp	r3, #0
 8002936:	ed8d 7b00 	vstr	d7, [sp]
 800293a:	da03      	bge.n	8002944 <_dtoa_r+0x46c>
 800293c:	9b07      	ldr	r3, [sp, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f340 8101 	ble.w	8002b46 <_dtoa_r+0x66e>
 8002944:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002948:	4656      	mov	r6, sl
 800294a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800294e:	4620      	mov	r0, r4
 8002950:	4629      	mov	r1, r5
 8002952:	f7fd ff83 	bl	800085c <__aeabi_ddiv>
 8002956:	f7fe f907 	bl	8000b68 <__aeabi_d2iz>
 800295a:	4680      	mov	r8, r0
 800295c:	f7fd fdea 	bl	8000534 <__aeabi_i2d>
 8002960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002964:	f7fd fe50 	bl	8000608 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4620      	mov	r0, r4
 800296e:	4629      	mov	r1, r5
 8002970:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8002974:	f7fd fc90 	bl	8000298 <__aeabi_dsub>
 8002978:	f806 4b01 	strb.w	r4, [r6], #1
 800297c:	9d07      	ldr	r5, [sp, #28]
 800297e:	eba6 040a 	sub.w	r4, r6, sl
 8002982:	42a5      	cmp	r5, r4
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	f040 8117 	bne.w	8002bba <_dtoa_r+0x6e2>
 800298c:	f7fd fc86 	bl	800029c <__adddf3>
 8002990:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002994:	4604      	mov	r4, r0
 8002996:	460d      	mov	r5, r1
 8002998:	f7fe f8c6 	bl	8000b28 <__aeabi_dcmpgt>
 800299c:	2800      	cmp	r0, #0
 800299e:	f040 80f9 	bne.w	8002b94 <_dtoa_r+0x6bc>
 80029a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80029a6:	4620      	mov	r0, r4
 80029a8:	4629      	mov	r1, r5
 80029aa:	f7fe f895 	bl	8000ad8 <__aeabi_dcmpeq>
 80029ae:	b118      	cbz	r0, 80029b8 <_dtoa_r+0x4e0>
 80029b0:	f018 0f01 	tst.w	r8, #1
 80029b4:	f040 80ee 	bne.w	8002b94 <_dtoa_r+0x6bc>
 80029b8:	4649      	mov	r1, r9
 80029ba:	4658      	mov	r0, fp
 80029bc:	f000 fc90 	bl	80032e0 <_Bfree>
 80029c0:	2300      	movs	r3, #0
 80029c2:	7033      	strb	r3, [r6, #0]
 80029c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80029c6:	3701      	adds	r7, #1
 80029c8:	601f      	str	r7, [r3, #0]
 80029ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 831d 	beq.w	800300c <_dtoa_r+0xb34>
 80029d2:	601e      	str	r6, [r3, #0]
 80029d4:	e31a      	b.n	800300c <_dtoa_r+0xb34>
 80029d6:	07e2      	lsls	r2, r4, #31
 80029d8:	d505      	bpl.n	80029e6 <_dtoa_r+0x50e>
 80029da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80029de:	f7fd fe13 	bl	8000608 <__aeabi_dmul>
 80029e2:	3601      	adds	r6, #1
 80029e4:	2301      	movs	r3, #1
 80029e6:	1064      	asrs	r4, r4, #1
 80029e8:	3508      	adds	r5, #8
 80029ea:	e73f      	b.n	800286c <_dtoa_r+0x394>
 80029ec:	2602      	movs	r6, #2
 80029ee:	e742      	b.n	8002876 <_dtoa_r+0x39e>
 80029f0:	9c07      	ldr	r4, [sp, #28]
 80029f2:	9704      	str	r7, [sp, #16]
 80029f4:	e761      	b.n	80028ba <_dtoa_r+0x3e2>
 80029f6:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <_dtoa_r+0x5bc>)
 80029f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80029fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80029fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002a02:	4454      	add	r4, sl
 8002a04:	2900      	cmp	r1, #0
 8002a06:	d053      	beq.n	8002ab0 <_dtoa_r+0x5d8>
 8002a08:	4928      	ldr	r1, [pc, #160]	@ (8002aac <_dtoa_r+0x5d4>)
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7fd ff26 	bl	800085c <__aeabi_ddiv>
 8002a10:	4633      	mov	r3, r6
 8002a12:	462a      	mov	r2, r5
 8002a14:	f7fd fc40 	bl	8000298 <__aeabi_dsub>
 8002a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002a1c:	4656      	mov	r6, sl
 8002a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a22:	f7fe f8a1 	bl	8000b68 <__aeabi_d2iz>
 8002a26:	4605      	mov	r5, r0
 8002a28:	f7fd fd84 	bl	8000534 <__aeabi_i2d>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a34:	f7fd fc30 	bl	8000298 <__aeabi_dsub>
 8002a38:	3530      	adds	r5, #48	@ 0x30
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a42:	f806 5b01 	strb.w	r5, [r6], #1
 8002a46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002a4a:	f7fe f84f 	bl	8000aec <__aeabi_dcmplt>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d171      	bne.n	8002b36 <_dtoa_r+0x65e>
 8002a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a56:	4911      	ldr	r1, [pc, #68]	@ (8002a9c <_dtoa_r+0x5c4>)
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fd fc1d 	bl	8000298 <__aeabi_dsub>
 8002a5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002a62:	f7fe f843 	bl	8000aec <__aeabi_dcmplt>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	f040 8095 	bne.w	8002b96 <_dtoa_r+0x6be>
 8002a6c:	42a6      	cmp	r6, r4
 8002a6e:	f43f af50 	beq.w	8002912 <_dtoa_r+0x43a>
 8002a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8002a76:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <_dtoa_r+0x5c8>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f7fd fdc5 	bl	8000608 <__aeabi_dmul>
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <_dtoa_r+0x5c8>)
 8002a80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002a84:	2200      	movs	r2, #0
 8002a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002a8a:	f7fd fdbd 	bl	8000608 <__aeabi_dmul>
 8002a8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a92:	e7c4      	b.n	8002a1e <_dtoa_r+0x546>
 8002a94:	08004688 	.word	0x08004688
 8002a98:	08004660 	.word	0x08004660
 8002a9c:	3ff00000 	.word	0x3ff00000
 8002aa0:	40240000 	.word	0x40240000
 8002aa4:	401c0000 	.word	0x401c0000
 8002aa8:	40140000 	.word	0x40140000
 8002aac:	3fe00000 	.word	0x3fe00000
 8002ab0:	4631      	mov	r1, r6
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f7fd fda8 	bl	8000608 <__aeabi_dmul>
 8002ab8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002abc:	9415      	str	r4, [sp, #84]	@ 0x54
 8002abe:	4656      	mov	r6, sl
 8002ac0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ac4:	f7fe f850 	bl	8000b68 <__aeabi_d2iz>
 8002ac8:	4605      	mov	r5, r0
 8002aca:	f7fd fd33 	bl	8000534 <__aeabi_i2d>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ad6:	f7fd fbdf 	bl	8000298 <__aeabi_dsub>
 8002ada:	3530      	adds	r5, #48	@ 0x30
 8002adc:	f806 5b01 	strb.w	r5, [r6], #1
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	42a6      	cmp	r6, r4
 8002ae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	d124      	bne.n	8002b3a <_dtoa_r+0x662>
 8002af0:	4bac      	ldr	r3, [pc, #688]	@ (8002da4 <_dtoa_r+0x8cc>)
 8002af2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8002af6:	f7fd fbd1 	bl	800029c <__adddf3>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b02:	f7fe f811 	bl	8000b28 <__aeabi_dcmpgt>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d145      	bne.n	8002b96 <_dtoa_r+0x6be>
 8002b0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8002b0e:	49a5      	ldr	r1, [pc, #660]	@ (8002da4 <_dtoa_r+0x8cc>)
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7fd fbc1 	bl	8000298 <__aeabi_dsub>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b1e:	f7fd ffe5 	bl	8000aec <__aeabi_dcmplt>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	f43f aef5 	beq.w	8002912 <_dtoa_r+0x43a>
 8002b28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8002b2a:	1e73      	subs	r3, r6, #1
 8002b2c:	9315      	str	r3, [sp, #84]	@ 0x54
 8002b2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8002b32:	2b30      	cmp	r3, #48	@ 0x30
 8002b34:	d0f8      	beq.n	8002b28 <_dtoa_r+0x650>
 8002b36:	9f04      	ldr	r7, [sp, #16]
 8002b38:	e73e      	b.n	80029b8 <_dtoa_r+0x4e0>
 8002b3a:	4b9b      	ldr	r3, [pc, #620]	@ (8002da8 <_dtoa_r+0x8d0>)
 8002b3c:	f7fd fd64 	bl	8000608 <__aeabi_dmul>
 8002b40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b44:	e7bc      	b.n	8002ac0 <_dtoa_r+0x5e8>
 8002b46:	d10c      	bne.n	8002b62 <_dtoa_r+0x68a>
 8002b48:	4b98      	ldr	r3, [pc, #608]	@ (8002dac <_dtoa_r+0x8d4>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b50:	f7fd fd5a 	bl	8000608 <__aeabi_dmul>
 8002b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b58:	f7fd ffdc 	bl	8000b14 <__aeabi_dcmpge>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	f000 8157 	beq.w	8002e10 <_dtoa_r+0x938>
 8002b62:	2400      	movs	r4, #0
 8002b64:	4625      	mov	r5, r4
 8002b66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	9304      	str	r3, [sp, #16]
 8002b6c:	4656      	mov	r6, sl
 8002b6e:	2700      	movs	r7, #0
 8002b70:	4621      	mov	r1, r4
 8002b72:	4658      	mov	r0, fp
 8002b74:	f000 fbb4 	bl	80032e0 <_Bfree>
 8002b78:	2d00      	cmp	r5, #0
 8002b7a:	d0dc      	beq.n	8002b36 <_dtoa_r+0x65e>
 8002b7c:	b12f      	cbz	r7, 8002b8a <_dtoa_r+0x6b2>
 8002b7e:	42af      	cmp	r7, r5
 8002b80:	d003      	beq.n	8002b8a <_dtoa_r+0x6b2>
 8002b82:	4639      	mov	r1, r7
 8002b84:	4658      	mov	r0, fp
 8002b86:	f000 fbab 	bl	80032e0 <_Bfree>
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	4658      	mov	r0, fp
 8002b8e:	f000 fba7 	bl	80032e0 <_Bfree>
 8002b92:	e7d0      	b.n	8002b36 <_dtoa_r+0x65e>
 8002b94:	9704      	str	r7, [sp, #16]
 8002b96:	4633      	mov	r3, r6
 8002b98:	461e      	mov	r6, r3
 8002b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002b9e:	2a39      	cmp	r2, #57	@ 0x39
 8002ba0:	d107      	bne.n	8002bb2 <_dtoa_r+0x6da>
 8002ba2:	459a      	cmp	sl, r3
 8002ba4:	d1f8      	bne.n	8002b98 <_dtoa_r+0x6c0>
 8002ba6:	9a04      	ldr	r2, [sp, #16]
 8002ba8:	3201      	adds	r2, #1
 8002baa:	9204      	str	r2, [sp, #16]
 8002bac:	2230      	movs	r2, #48	@ 0x30
 8002bae:	f88a 2000 	strb.w	r2, [sl]
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	3201      	adds	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	e7bd      	b.n	8002b36 <_dtoa_r+0x65e>
 8002bba:	4b7b      	ldr	r3, [pc, #492]	@ (8002da8 <_dtoa_r+0x8d0>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f7fd fd23 	bl	8000608 <__aeabi_dmul>
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	460d      	mov	r5, r1
 8002bca:	f7fd ff85 	bl	8000ad8 <__aeabi_dcmpeq>
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	f43f aebb 	beq.w	800294a <_dtoa_r+0x472>
 8002bd4:	e6f0      	b.n	80029b8 <_dtoa_r+0x4e0>
 8002bd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8002bd8:	2a00      	cmp	r2, #0
 8002bda:	f000 80db 	beq.w	8002d94 <_dtoa_r+0x8bc>
 8002bde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	f300 80bf 	bgt.w	8002d64 <_dtoa_r+0x88c>
 8002be6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8002be8:	2a00      	cmp	r2, #0
 8002bea:	f000 80b7 	beq.w	8002d5c <_dtoa_r+0x884>
 8002bee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8002bf2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8002bf4:	4646      	mov	r6, r8
 8002bf6:	9a08      	ldr	r2, [sp, #32]
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	441a      	add	r2, r3
 8002bfc:	4658      	mov	r0, fp
 8002bfe:	4498      	add	r8, r3
 8002c00:	9208      	str	r2, [sp, #32]
 8002c02:	f000 fc21 	bl	8003448 <__i2b>
 8002c06:	4605      	mov	r5, r0
 8002c08:	b15e      	cbz	r6, 8002c22 <_dtoa_r+0x74a>
 8002c0a:	9b08      	ldr	r3, [sp, #32]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	dd08      	ble.n	8002c22 <_dtoa_r+0x74a>
 8002c10:	42b3      	cmp	r3, r6
 8002c12:	9a08      	ldr	r2, [sp, #32]
 8002c14:	bfa8      	it	ge
 8002c16:	4633      	movge	r3, r6
 8002c18:	eba8 0803 	sub.w	r8, r8, r3
 8002c1c:	1af6      	subs	r6, r6, r3
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	9308      	str	r3, [sp, #32]
 8002c22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c24:	b1f3      	cbz	r3, 8002c64 <_dtoa_r+0x78c>
 8002c26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80b7 	beq.w	8002d9c <_dtoa_r+0x8c4>
 8002c2e:	b18c      	cbz	r4, 8002c54 <_dtoa_r+0x77c>
 8002c30:	4629      	mov	r1, r5
 8002c32:	4622      	mov	r2, r4
 8002c34:	4658      	mov	r0, fp
 8002c36:	f000 fcc7 	bl	80035c8 <__pow5mult>
 8002c3a:	464a      	mov	r2, r9
 8002c3c:	4601      	mov	r1, r0
 8002c3e:	4605      	mov	r5, r0
 8002c40:	4658      	mov	r0, fp
 8002c42:	f000 fc17 	bl	8003474 <__multiply>
 8002c46:	4649      	mov	r1, r9
 8002c48:	9004      	str	r0, [sp, #16]
 8002c4a:	4658      	mov	r0, fp
 8002c4c:	f000 fb48 	bl	80032e0 <_Bfree>
 8002c50:	9b04      	ldr	r3, [sp, #16]
 8002c52:	4699      	mov	r9, r3
 8002c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002c56:	1b1a      	subs	r2, r3, r4
 8002c58:	d004      	beq.n	8002c64 <_dtoa_r+0x78c>
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	4658      	mov	r0, fp
 8002c5e:	f000 fcb3 	bl	80035c8 <__pow5mult>
 8002c62:	4681      	mov	r9, r0
 8002c64:	2101      	movs	r1, #1
 8002c66:	4658      	mov	r0, fp
 8002c68:	f000 fbee 	bl	8003448 <__i2b>
 8002c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002c6e:	4604      	mov	r4, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 81cf 	beq.w	8003014 <_dtoa_r+0xb3c>
 8002c76:	461a      	mov	r2, r3
 8002c78:	4601      	mov	r1, r0
 8002c7a:	4658      	mov	r0, fp
 8002c7c:	f000 fca4 	bl	80035c8 <__pow5mult>
 8002c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	4604      	mov	r4, r0
 8002c86:	f300 8095 	bgt.w	8002db4 <_dtoa_r+0x8dc>
 8002c8a:	9b02      	ldr	r3, [sp, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f040 8087 	bne.w	8002da0 <_dtoa_r+0x8c8>
 8002c92:	9b03      	ldr	r3, [sp, #12]
 8002c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f040 8089 	bne.w	8002db0 <_dtoa_r+0x8d8>
 8002c9e:	9b03      	ldr	r3, [sp, #12]
 8002ca0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ca4:	0d1b      	lsrs	r3, r3, #20
 8002ca6:	051b      	lsls	r3, r3, #20
 8002ca8:	b12b      	cbz	r3, 8002cb6 <_dtoa_r+0x7de>
 8002caa:	9b08      	ldr	r3, [sp, #32]
 8002cac:	3301      	adds	r3, #1
 8002cae:	9308      	str	r3, [sp, #32]
 8002cb0:	f108 0801 	add.w	r8, r8, #1
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8002cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 81b0 	beq.w	8003020 <_dtoa_r+0xb48>
 8002cc0:	6923      	ldr	r3, [r4, #16]
 8002cc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8002cc6:	6918      	ldr	r0, [r3, #16]
 8002cc8:	f000 fb72 	bl	80033b0 <__hi0bits>
 8002ccc:	f1c0 0020 	rsb	r0, r0, #32
 8002cd0:	9b08      	ldr	r3, [sp, #32]
 8002cd2:	4418      	add	r0, r3
 8002cd4:	f010 001f 	ands.w	r0, r0, #31
 8002cd8:	d077      	beq.n	8002dca <_dtoa_r+0x8f2>
 8002cda:	f1c0 0320 	rsb	r3, r0, #32
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	dd6b      	ble.n	8002dba <_dtoa_r+0x8e2>
 8002ce2:	9b08      	ldr	r3, [sp, #32]
 8002ce4:	f1c0 001c 	rsb	r0, r0, #28
 8002ce8:	4403      	add	r3, r0
 8002cea:	4480      	add	r8, r0
 8002cec:	4406      	add	r6, r0
 8002cee:	9308      	str	r3, [sp, #32]
 8002cf0:	f1b8 0f00 	cmp.w	r8, #0
 8002cf4:	dd05      	ble.n	8002d02 <_dtoa_r+0x82a>
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	4658      	mov	r0, fp
 8002cfc:	f000 fcbe 	bl	800367c <__lshift>
 8002d00:	4681      	mov	r9, r0
 8002d02:	9b08      	ldr	r3, [sp, #32]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	dd05      	ble.n	8002d14 <_dtoa_r+0x83c>
 8002d08:	4621      	mov	r1, r4
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4658      	mov	r0, fp
 8002d0e:	f000 fcb5 	bl	800367c <__lshift>
 8002d12:	4604      	mov	r4, r0
 8002d14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d059      	beq.n	8002dce <_dtoa_r+0x8f6>
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	4648      	mov	r0, r9
 8002d1e:	f000 fd19 	bl	8003754 <__mcmp>
 8002d22:	2800      	cmp	r0, #0
 8002d24:	da53      	bge.n	8002dce <_dtoa_r+0x8f6>
 8002d26:	1e7b      	subs	r3, r7, #1
 8002d28:	9304      	str	r3, [sp, #16]
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	220a      	movs	r2, #10
 8002d30:	4658      	mov	r0, fp
 8002d32:	f000 faf7 	bl	8003324 <__multadd>
 8002d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002d38:	4681      	mov	r9, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8172 	beq.w	8003024 <_dtoa_r+0xb4c>
 8002d40:	2300      	movs	r3, #0
 8002d42:	4629      	mov	r1, r5
 8002d44:	220a      	movs	r2, #10
 8002d46:	4658      	mov	r0, fp
 8002d48:	f000 faec 	bl	8003324 <__multadd>
 8002d4c:	9b00      	ldr	r3, [sp, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	4605      	mov	r5, r0
 8002d52:	dc67      	bgt.n	8002e24 <_dtoa_r+0x94c>
 8002d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	dc41      	bgt.n	8002dde <_dtoa_r+0x906>
 8002d5a:	e063      	b.n	8002e24 <_dtoa_r+0x94c>
 8002d5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002d5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8002d62:	e746      	b.n	8002bf2 <_dtoa_r+0x71a>
 8002d64:	9b07      	ldr	r3, [sp, #28]
 8002d66:	1e5c      	subs	r4, r3, #1
 8002d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002d6a:	42a3      	cmp	r3, r4
 8002d6c:	bfbf      	itttt	lt
 8002d6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8002d70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8002d72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8002d74:	1ae3      	sublt	r3, r4, r3
 8002d76:	bfb4      	ite	lt
 8002d78:	18d2      	addlt	r2, r2, r3
 8002d7a:	1b1c      	subge	r4, r3, r4
 8002d7c:	9b07      	ldr	r3, [sp, #28]
 8002d7e:	bfbc      	itt	lt
 8002d80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8002d82:	2400      	movlt	r4, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bfb5      	itete	lt
 8002d88:	eba8 0603 	sublt.w	r6, r8, r3
 8002d8c:	9b07      	ldrge	r3, [sp, #28]
 8002d8e:	2300      	movlt	r3, #0
 8002d90:	4646      	movge	r6, r8
 8002d92:	e730      	b.n	8002bf6 <_dtoa_r+0x71e>
 8002d94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8002d96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8002d98:	4646      	mov	r6, r8
 8002d9a:	e735      	b.n	8002c08 <_dtoa_r+0x730>
 8002d9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002d9e:	e75c      	b.n	8002c5a <_dtoa_r+0x782>
 8002da0:	2300      	movs	r3, #0
 8002da2:	e788      	b.n	8002cb6 <_dtoa_r+0x7de>
 8002da4:	3fe00000 	.word	0x3fe00000
 8002da8:	40240000 	.word	0x40240000
 8002dac:	40140000 	.word	0x40140000
 8002db0:	9b02      	ldr	r3, [sp, #8]
 8002db2:	e780      	b.n	8002cb6 <_dtoa_r+0x7de>
 8002db4:	2300      	movs	r3, #0
 8002db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8002db8:	e782      	b.n	8002cc0 <_dtoa_r+0x7e8>
 8002dba:	d099      	beq.n	8002cf0 <_dtoa_r+0x818>
 8002dbc:	9a08      	ldr	r2, [sp, #32]
 8002dbe:	331c      	adds	r3, #28
 8002dc0:	441a      	add	r2, r3
 8002dc2:	4498      	add	r8, r3
 8002dc4:	441e      	add	r6, r3
 8002dc6:	9208      	str	r2, [sp, #32]
 8002dc8:	e792      	b.n	8002cf0 <_dtoa_r+0x818>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	e7f6      	b.n	8002dbc <_dtoa_r+0x8e4>
 8002dce:	9b07      	ldr	r3, [sp, #28]
 8002dd0:	9704      	str	r7, [sp, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	dc20      	bgt.n	8002e18 <_dtoa_r+0x940>
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	dd1e      	ble.n	8002e1c <_dtoa_r+0x944>
 8002dde:	9b00      	ldr	r3, [sp, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f47f aec0 	bne.w	8002b66 <_dtoa_r+0x68e>
 8002de6:	4621      	mov	r1, r4
 8002de8:	2205      	movs	r2, #5
 8002dea:	4658      	mov	r0, fp
 8002dec:	f000 fa9a 	bl	8003324 <__multadd>
 8002df0:	4601      	mov	r1, r0
 8002df2:	4604      	mov	r4, r0
 8002df4:	4648      	mov	r0, r9
 8002df6:	f000 fcad 	bl	8003754 <__mcmp>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	f77f aeb3 	ble.w	8002b66 <_dtoa_r+0x68e>
 8002e00:	4656      	mov	r6, sl
 8002e02:	2331      	movs	r3, #49	@ 0x31
 8002e04:	f806 3b01 	strb.w	r3, [r6], #1
 8002e08:	9b04      	ldr	r3, [sp, #16]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	9304      	str	r3, [sp, #16]
 8002e0e:	e6ae      	b.n	8002b6e <_dtoa_r+0x696>
 8002e10:	9c07      	ldr	r4, [sp, #28]
 8002e12:	9704      	str	r7, [sp, #16]
 8002e14:	4625      	mov	r5, r4
 8002e16:	e7f3      	b.n	8002e00 <_dtoa_r+0x928>
 8002e18:	9b07      	ldr	r3, [sp, #28]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8104 	beq.w	800302c <_dtoa_r+0xb54>
 8002e24:	2e00      	cmp	r6, #0
 8002e26:	dd05      	ble.n	8002e34 <_dtoa_r+0x95c>
 8002e28:	4629      	mov	r1, r5
 8002e2a:	4632      	mov	r2, r6
 8002e2c:	4658      	mov	r0, fp
 8002e2e:	f000 fc25 	bl	800367c <__lshift>
 8002e32:	4605      	mov	r5, r0
 8002e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d05a      	beq.n	8002ef0 <_dtoa_r+0xa18>
 8002e3a:	6869      	ldr	r1, [r5, #4]
 8002e3c:	4658      	mov	r0, fp
 8002e3e:	f000 fa0f 	bl	8003260 <_Balloc>
 8002e42:	4606      	mov	r6, r0
 8002e44:	b928      	cbnz	r0, 8002e52 <_dtoa_r+0x97a>
 8002e46:	4b84      	ldr	r3, [pc, #528]	@ (8003058 <_dtoa_r+0xb80>)
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8002e4e:	f7ff bb5a 	b.w	8002506 <_dtoa_r+0x2e>
 8002e52:	692a      	ldr	r2, [r5, #16]
 8002e54:	3202      	adds	r2, #2
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	f105 010c 	add.w	r1, r5, #12
 8002e5c:	300c      	adds	r0, #12
 8002e5e:	f001 f985 	bl	800416c <memcpy>
 8002e62:	2201      	movs	r2, #1
 8002e64:	4631      	mov	r1, r6
 8002e66:	4658      	mov	r0, fp
 8002e68:	f000 fc08 	bl	800367c <__lshift>
 8002e6c:	f10a 0301 	add.w	r3, sl, #1
 8002e70:	9307      	str	r3, [sp, #28]
 8002e72:	9b00      	ldr	r3, [sp, #0]
 8002e74:	4453      	add	r3, sl
 8002e76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002e78:	9b02      	ldr	r3, [sp, #8]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	462f      	mov	r7, r5
 8002e80:	930a      	str	r3, [sp, #40]	@ 0x28
 8002e82:	4605      	mov	r5, r0
 8002e84:	9b07      	ldr	r3, [sp, #28]
 8002e86:	4621      	mov	r1, r4
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	4648      	mov	r0, r9
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	f7ff fa9a 	bl	80023c6 <quorem>
 8002e92:	4639      	mov	r1, r7
 8002e94:	9002      	str	r0, [sp, #8]
 8002e96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8002e9a:	4648      	mov	r0, r9
 8002e9c:	f000 fc5a 	bl	8003754 <__mcmp>
 8002ea0:	462a      	mov	r2, r5
 8002ea2:	9008      	str	r0, [sp, #32]
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	4658      	mov	r0, fp
 8002ea8:	f000 fc70 	bl	800378c <__mdiff>
 8002eac:	68c2      	ldr	r2, [r0, #12]
 8002eae:	4606      	mov	r6, r0
 8002eb0:	bb02      	cbnz	r2, 8002ef4 <_dtoa_r+0xa1c>
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	4648      	mov	r0, r9
 8002eb6:	f000 fc4d 	bl	8003754 <__mcmp>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4631      	mov	r1, r6
 8002ebe:	4658      	mov	r0, fp
 8002ec0:	920e      	str	r2, [sp, #56]	@ 0x38
 8002ec2:	f000 fa0d 	bl	80032e0 <_Bfree>
 8002ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ec8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002eca:	9e07      	ldr	r6, [sp, #28]
 8002ecc:	ea43 0102 	orr.w	r1, r3, r2
 8002ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002ed2:	4319      	orrs	r1, r3
 8002ed4:	d110      	bne.n	8002ef8 <_dtoa_r+0xa20>
 8002ed6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8002eda:	d029      	beq.n	8002f30 <_dtoa_r+0xa58>
 8002edc:	9b08      	ldr	r3, [sp, #32]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	dd02      	ble.n	8002ee8 <_dtoa_r+0xa10>
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8002ee8:	9b00      	ldr	r3, [sp, #0]
 8002eea:	f883 8000 	strb.w	r8, [r3]
 8002eee:	e63f      	b.n	8002b70 <_dtoa_r+0x698>
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	e7bb      	b.n	8002e6c <_dtoa_r+0x994>
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	e7e1      	b.n	8002ebc <_dtoa_r+0x9e4>
 8002ef8:	9b08      	ldr	r3, [sp, #32]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db04      	blt.n	8002f08 <_dtoa_r+0xa30>
 8002efe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002f00:	430b      	orrs	r3, r1
 8002f02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002f04:	430b      	orrs	r3, r1
 8002f06:	d120      	bne.n	8002f4a <_dtoa_r+0xa72>
 8002f08:	2a00      	cmp	r2, #0
 8002f0a:	dded      	ble.n	8002ee8 <_dtoa_r+0xa10>
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4658      	mov	r0, fp
 8002f12:	f000 fbb3 	bl	800367c <__lshift>
 8002f16:	4621      	mov	r1, r4
 8002f18:	4681      	mov	r9, r0
 8002f1a:	f000 fc1b 	bl	8003754 <__mcmp>
 8002f1e:	2800      	cmp	r0, #0
 8002f20:	dc03      	bgt.n	8002f2a <_dtoa_r+0xa52>
 8002f22:	d1e1      	bne.n	8002ee8 <_dtoa_r+0xa10>
 8002f24:	f018 0f01 	tst.w	r8, #1
 8002f28:	d0de      	beq.n	8002ee8 <_dtoa_r+0xa10>
 8002f2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8002f2e:	d1d8      	bne.n	8002ee2 <_dtoa_r+0xa0a>
 8002f30:	9a00      	ldr	r2, [sp, #0]
 8002f32:	2339      	movs	r3, #57	@ 0x39
 8002f34:	7013      	strb	r3, [r2, #0]
 8002f36:	4633      	mov	r3, r6
 8002f38:	461e      	mov	r6, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8002f40:	2a39      	cmp	r2, #57	@ 0x39
 8002f42:	d052      	beq.n	8002fea <_dtoa_r+0xb12>
 8002f44:	3201      	adds	r2, #1
 8002f46:	701a      	strb	r2, [r3, #0]
 8002f48:	e612      	b.n	8002b70 <_dtoa_r+0x698>
 8002f4a:	2a00      	cmp	r2, #0
 8002f4c:	dd07      	ble.n	8002f5e <_dtoa_r+0xa86>
 8002f4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8002f52:	d0ed      	beq.n	8002f30 <_dtoa_r+0xa58>
 8002f54:	9a00      	ldr	r2, [sp, #0]
 8002f56:	f108 0301 	add.w	r3, r8, #1
 8002f5a:	7013      	strb	r3, [r2, #0]
 8002f5c:	e608      	b.n	8002b70 <_dtoa_r+0x698>
 8002f5e:	9b07      	ldr	r3, [sp, #28]
 8002f60:	9a07      	ldr	r2, [sp, #28]
 8002f62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8002f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d028      	beq.n	8002fbe <_dtoa_r+0xae6>
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	2300      	movs	r3, #0
 8002f70:	220a      	movs	r2, #10
 8002f72:	4658      	mov	r0, fp
 8002f74:	f000 f9d6 	bl	8003324 <__multadd>
 8002f78:	42af      	cmp	r7, r5
 8002f7a:	4681      	mov	r9, r0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	f04f 020a 	mov.w	r2, #10
 8002f84:	4639      	mov	r1, r7
 8002f86:	4658      	mov	r0, fp
 8002f88:	d107      	bne.n	8002f9a <_dtoa_r+0xac2>
 8002f8a:	f000 f9cb 	bl	8003324 <__multadd>
 8002f8e:	4607      	mov	r7, r0
 8002f90:	4605      	mov	r5, r0
 8002f92:	9b07      	ldr	r3, [sp, #28]
 8002f94:	3301      	adds	r3, #1
 8002f96:	9307      	str	r3, [sp, #28]
 8002f98:	e774      	b.n	8002e84 <_dtoa_r+0x9ac>
 8002f9a:	f000 f9c3 	bl	8003324 <__multadd>
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	4607      	mov	r7, r0
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	220a      	movs	r2, #10
 8002fa6:	4658      	mov	r0, fp
 8002fa8:	f000 f9bc 	bl	8003324 <__multadd>
 8002fac:	4605      	mov	r5, r0
 8002fae:	e7f0      	b.n	8002f92 <_dtoa_r+0xaba>
 8002fb0:	9b00      	ldr	r3, [sp, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bfcc      	ite	gt
 8002fb6:	461e      	movgt	r6, r3
 8002fb8:	2601      	movle	r6, #1
 8002fba:	4456      	add	r6, sl
 8002fbc:	2700      	movs	r7, #0
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4658      	mov	r0, fp
 8002fc4:	f000 fb5a 	bl	800367c <__lshift>
 8002fc8:	4621      	mov	r1, r4
 8002fca:	4681      	mov	r9, r0
 8002fcc:	f000 fbc2 	bl	8003754 <__mcmp>
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	dcb0      	bgt.n	8002f36 <_dtoa_r+0xa5e>
 8002fd4:	d102      	bne.n	8002fdc <_dtoa_r+0xb04>
 8002fd6:	f018 0f01 	tst.w	r8, #1
 8002fda:	d1ac      	bne.n	8002f36 <_dtoa_r+0xa5e>
 8002fdc:	4633      	mov	r3, r6
 8002fde:	461e      	mov	r6, r3
 8002fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002fe4:	2a30      	cmp	r2, #48	@ 0x30
 8002fe6:	d0fa      	beq.n	8002fde <_dtoa_r+0xb06>
 8002fe8:	e5c2      	b.n	8002b70 <_dtoa_r+0x698>
 8002fea:	459a      	cmp	sl, r3
 8002fec:	d1a4      	bne.n	8002f38 <_dtoa_r+0xa60>
 8002fee:	9b04      	ldr	r3, [sp, #16]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	9304      	str	r3, [sp, #16]
 8002ff4:	2331      	movs	r3, #49	@ 0x31
 8002ff6:	f88a 3000 	strb.w	r3, [sl]
 8002ffa:	e5b9      	b.n	8002b70 <_dtoa_r+0x698>
 8002ffc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002ffe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800305c <_dtoa_r+0xb84>
 8003002:	b11b      	cbz	r3, 800300c <_dtoa_r+0xb34>
 8003004:	f10a 0308 	add.w	r3, sl, #8
 8003008:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4650      	mov	r0, sl
 800300e:	b019      	add	sp, #100	@ 0x64
 8003010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003016:	2b01      	cmp	r3, #1
 8003018:	f77f ae37 	ble.w	8002c8a <_dtoa_r+0x7b2>
 800301c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800301e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003020:	2001      	movs	r0, #1
 8003022:	e655      	b.n	8002cd0 <_dtoa_r+0x7f8>
 8003024:	9b00      	ldr	r3, [sp, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f77f aed6 	ble.w	8002dd8 <_dtoa_r+0x900>
 800302c:	4656      	mov	r6, sl
 800302e:	4621      	mov	r1, r4
 8003030:	4648      	mov	r0, r9
 8003032:	f7ff f9c8 	bl	80023c6 <quorem>
 8003036:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800303a:	f806 8b01 	strb.w	r8, [r6], #1
 800303e:	9b00      	ldr	r3, [sp, #0]
 8003040:	eba6 020a 	sub.w	r2, r6, sl
 8003044:	4293      	cmp	r3, r2
 8003046:	ddb3      	ble.n	8002fb0 <_dtoa_r+0xad8>
 8003048:	4649      	mov	r1, r9
 800304a:	2300      	movs	r3, #0
 800304c:	220a      	movs	r2, #10
 800304e:	4658      	mov	r0, fp
 8003050:	f000 f968 	bl	8003324 <__multadd>
 8003054:	4681      	mov	r9, r0
 8003056:	e7ea      	b.n	800302e <_dtoa_r+0xb56>
 8003058:	080045ea 	.word	0x080045ea
 800305c:	0800456e 	.word	0x0800456e

08003060 <_free_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4605      	mov	r5, r0
 8003064:	2900      	cmp	r1, #0
 8003066:	d041      	beq.n	80030ec <_free_r+0x8c>
 8003068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800306c:	1f0c      	subs	r4, r1, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	bfb8      	it	lt
 8003072:	18e4      	addlt	r4, r4, r3
 8003074:	f000 f8e8 	bl	8003248 <__malloc_lock>
 8003078:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <_free_r+0x90>)
 800307a:	6813      	ldr	r3, [r2, #0]
 800307c:	b933      	cbnz	r3, 800308c <_free_r+0x2c>
 800307e:	6063      	str	r3, [r4, #4]
 8003080:	6014      	str	r4, [r2, #0]
 8003082:	4628      	mov	r0, r5
 8003084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003088:	f000 b8e4 	b.w	8003254 <__malloc_unlock>
 800308c:	42a3      	cmp	r3, r4
 800308e:	d908      	bls.n	80030a2 <_free_r+0x42>
 8003090:	6820      	ldr	r0, [r4, #0]
 8003092:	1821      	adds	r1, r4, r0
 8003094:	428b      	cmp	r3, r1
 8003096:	bf01      	itttt	eq
 8003098:	6819      	ldreq	r1, [r3, #0]
 800309a:	685b      	ldreq	r3, [r3, #4]
 800309c:	1809      	addeq	r1, r1, r0
 800309e:	6021      	streq	r1, [r4, #0]
 80030a0:	e7ed      	b.n	800307e <_free_r+0x1e>
 80030a2:	461a      	mov	r2, r3
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	b10b      	cbz	r3, 80030ac <_free_r+0x4c>
 80030a8:	42a3      	cmp	r3, r4
 80030aa:	d9fa      	bls.n	80030a2 <_free_r+0x42>
 80030ac:	6811      	ldr	r1, [r2, #0]
 80030ae:	1850      	adds	r0, r2, r1
 80030b0:	42a0      	cmp	r0, r4
 80030b2:	d10b      	bne.n	80030cc <_free_r+0x6c>
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	4401      	add	r1, r0
 80030b8:	1850      	adds	r0, r2, r1
 80030ba:	4283      	cmp	r3, r0
 80030bc:	6011      	str	r1, [r2, #0]
 80030be:	d1e0      	bne.n	8003082 <_free_r+0x22>
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	6053      	str	r3, [r2, #4]
 80030c6:	4408      	add	r0, r1
 80030c8:	6010      	str	r0, [r2, #0]
 80030ca:	e7da      	b.n	8003082 <_free_r+0x22>
 80030cc:	d902      	bls.n	80030d4 <_free_r+0x74>
 80030ce:	230c      	movs	r3, #12
 80030d0:	602b      	str	r3, [r5, #0]
 80030d2:	e7d6      	b.n	8003082 <_free_r+0x22>
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	1821      	adds	r1, r4, r0
 80030d8:	428b      	cmp	r3, r1
 80030da:	bf04      	itt	eq
 80030dc:	6819      	ldreq	r1, [r3, #0]
 80030de:	685b      	ldreq	r3, [r3, #4]
 80030e0:	6063      	str	r3, [r4, #4]
 80030e2:	bf04      	itt	eq
 80030e4:	1809      	addeq	r1, r1, r0
 80030e6:	6021      	streq	r1, [r4, #0]
 80030e8:	6054      	str	r4, [r2, #4]
 80030ea:	e7ca      	b.n	8003082 <_free_r+0x22>
 80030ec:	bd38      	pop	{r3, r4, r5, pc}
 80030ee:	bf00      	nop
 80030f0:	20000350 	.word	0x20000350

080030f4 <malloc>:
 80030f4:	4b02      	ldr	r3, [pc, #8]	@ (8003100 <malloc+0xc>)
 80030f6:	4601      	mov	r1, r0
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	f000 b825 	b.w	8003148 <_malloc_r>
 80030fe:	bf00      	nop
 8003100:	2000000c 	.word	0x2000000c

08003104 <sbrk_aligned>:
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	4e0f      	ldr	r6, [pc, #60]	@ (8003144 <sbrk_aligned+0x40>)
 8003108:	460c      	mov	r4, r1
 800310a:	6831      	ldr	r1, [r6, #0]
 800310c:	4605      	mov	r5, r0
 800310e:	b911      	cbnz	r1, 8003116 <sbrk_aligned+0x12>
 8003110:	f001 f81c 	bl	800414c <_sbrk_r>
 8003114:	6030      	str	r0, [r6, #0]
 8003116:	4621      	mov	r1, r4
 8003118:	4628      	mov	r0, r5
 800311a:	f001 f817 	bl	800414c <_sbrk_r>
 800311e:	1c43      	adds	r3, r0, #1
 8003120:	d103      	bne.n	800312a <sbrk_aligned+0x26>
 8003122:	f04f 34ff 	mov.w	r4, #4294967295
 8003126:	4620      	mov	r0, r4
 8003128:	bd70      	pop	{r4, r5, r6, pc}
 800312a:	1cc4      	adds	r4, r0, #3
 800312c:	f024 0403 	bic.w	r4, r4, #3
 8003130:	42a0      	cmp	r0, r4
 8003132:	d0f8      	beq.n	8003126 <sbrk_aligned+0x22>
 8003134:	1a21      	subs	r1, r4, r0
 8003136:	4628      	mov	r0, r5
 8003138:	f001 f808 	bl	800414c <_sbrk_r>
 800313c:	3001      	adds	r0, #1
 800313e:	d1f2      	bne.n	8003126 <sbrk_aligned+0x22>
 8003140:	e7ef      	b.n	8003122 <sbrk_aligned+0x1e>
 8003142:	bf00      	nop
 8003144:	2000034c 	.word	0x2000034c

08003148 <_malloc_r>:
 8003148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800314c:	1ccd      	adds	r5, r1, #3
 800314e:	f025 0503 	bic.w	r5, r5, #3
 8003152:	3508      	adds	r5, #8
 8003154:	2d0c      	cmp	r5, #12
 8003156:	bf38      	it	cc
 8003158:	250c      	movcc	r5, #12
 800315a:	2d00      	cmp	r5, #0
 800315c:	4606      	mov	r6, r0
 800315e:	db01      	blt.n	8003164 <_malloc_r+0x1c>
 8003160:	42a9      	cmp	r1, r5
 8003162:	d904      	bls.n	800316e <_malloc_r+0x26>
 8003164:	230c      	movs	r3, #12
 8003166:	6033      	str	r3, [r6, #0]
 8003168:	2000      	movs	r0, #0
 800316a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800316e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003244 <_malloc_r+0xfc>
 8003172:	f000 f869 	bl	8003248 <__malloc_lock>
 8003176:	f8d8 3000 	ldr.w	r3, [r8]
 800317a:	461c      	mov	r4, r3
 800317c:	bb44      	cbnz	r4, 80031d0 <_malloc_r+0x88>
 800317e:	4629      	mov	r1, r5
 8003180:	4630      	mov	r0, r6
 8003182:	f7ff ffbf 	bl	8003104 <sbrk_aligned>
 8003186:	1c43      	adds	r3, r0, #1
 8003188:	4604      	mov	r4, r0
 800318a:	d158      	bne.n	800323e <_malloc_r+0xf6>
 800318c:	f8d8 4000 	ldr.w	r4, [r8]
 8003190:	4627      	mov	r7, r4
 8003192:	2f00      	cmp	r7, #0
 8003194:	d143      	bne.n	800321e <_malloc_r+0xd6>
 8003196:	2c00      	cmp	r4, #0
 8003198:	d04b      	beq.n	8003232 <_malloc_r+0xea>
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	4639      	mov	r1, r7
 800319e:	4630      	mov	r0, r6
 80031a0:	eb04 0903 	add.w	r9, r4, r3
 80031a4:	f000 ffd2 	bl	800414c <_sbrk_r>
 80031a8:	4581      	cmp	r9, r0
 80031aa:	d142      	bne.n	8003232 <_malloc_r+0xea>
 80031ac:	6821      	ldr	r1, [r4, #0]
 80031ae:	1a6d      	subs	r5, r5, r1
 80031b0:	4629      	mov	r1, r5
 80031b2:	4630      	mov	r0, r6
 80031b4:	f7ff ffa6 	bl	8003104 <sbrk_aligned>
 80031b8:	3001      	adds	r0, #1
 80031ba:	d03a      	beq.n	8003232 <_malloc_r+0xea>
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	442b      	add	r3, r5
 80031c0:	6023      	str	r3, [r4, #0]
 80031c2:	f8d8 3000 	ldr.w	r3, [r8]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	bb62      	cbnz	r2, 8003224 <_malloc_r+0xdc>
 80031ca:	f8c8 7000 	str.w	r7, [r8]
 80031ce:	e00f      	b.n	80031f0 <_malloc_r+0xa8>
 80031d0:	6822      	ldr	r2, [r4, #0]
 80031d2:	1b52      	subs	r2, r2, r5
 80031d4:	d420      	bmi.n	8003218 <_malloc_r+0xd0>
 80031d6:	2a0b      	cmp	r2, #11
 80031d8:	d917      	bls.n	800320a <_malloc_r+0xc2>
 80031da:	1961      	adds	r1, r4, r5
 80031dc:	42a3      	cmp	r3, r4
 80031de:	6025      	str	r5, [r4, #0]
 80031e0:	bf18      	it	ne
 80031e2:	6059      	strne	r1, [r3, #4]
 80031e4:	6863      	ldr	r3, [r4, #4]
 80031e6:	bf08      	it	eq
 80031e8:	f8c8 1000 	streq.w	r1, [r8]
 80031ec:	5162      	str	r2, [r4, r5]
 80031ee:	604b      	str	r3, [r1, #4]
 80031f0:	4630      	mov	r0, r6
 80031f2:	f000 f82f 	bl	8003254 <__malloc_unlock>
 80031f6:	f104 000b 	add.w	r0, r4, #11
 80031fa:	1d23      	adds	r3, r4, #4
 80031fc:	f020 0007 	bic.w	r0, r0, #7
 8003200:	1ac2      	subs	r2, r0, r3
 8003202:	bf1c      	itt	ne
 8003204:	1a1b      	subne	r3, r3, r0
 8003206:	50a3      	strne	r3, [r4, r2]
 8003208:	e7af      	b.n	800316a <_malloc_r+0x22>
 800320a:	6862      	ldr	r2, [r4, #4]
 800320c:	42a3      	cmp	r3, r4
 800320e:	bf0c      	ite	eq
 8003210:	f8c8 2000 	streq.w	r2, [r8]
 8003214:	605a      	strne	r2, [r3, #4]
 8003216:	e7eb      	b.n	80031f0 <_malloc_r+0xa8>
 8003218:	4623      	mov	r3, r4
 800321a:	6864      	ldr	r4, [r4, #4]
 800321c:	e7ae      	b.n	800317c <_malloc_r+0x34>
 800321e:	463c      	mov	r4, r7
 8003220:	687f      	ldr	r7, [r7, #4]
 8003222:	e7b6      	b.n	8003192 <_malloc_r+0x4a>
 8003224:	461a      	mov	r2, r3
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	42a3      	cmp	r3, r4
 800322a:	d1fb      	bne.n	8003224 <_malloc_r+0xdc>
 800322c:	2300      	movs	r3, #0
 800322e:	6053      	str	r3, [r2, #4]
 8003230:	e7de      	b.n	80031f0 <_malloc_r+0xa8>
 8003232:	230c      	movs	r3, #12
 8003234:	6033      	str	r3, [r6, #0]
 8003236:	4630      	mov	r0, r6
 8003238:	f000 f80c 	bl	8003254 <__malloc_unlock>
 800323c:	e794      	b.n	8003168 <_malloc_r+0x20>
 800323e:	6005      	str	r5, [r0, #0]
 8003240:	e7d6      	b.n	80031f0 <_malloc_r+0xa8>
 8003242:	bf00      	nop
 8003244:	20000350 	.word	0x20000350

08003248 <__malloc_lock>:
 8003248:	4801      	ldr	r0, [pc, #4]	@ (8003250 <__malloc_lock+0x8>)
 800324a:	f7ff b8ba 	b.w	80023c2 <__retarget_lock_acquire_recursive>
 800324e:	bf00      	nop
 8003250:	20000348 	.word	0x20000348

08003254 <__malloc_unlock>:
 8003254:	4801      	ldr	r0, [pc, #4]	@ (800325c <__malloc_unlock+0x8>)
 8003256:	f7ff b8b5 	b.w	80023c4 <__retarget_lock_release_recursive>
 800325a:	bf00      	nop
 800325c:	20000348 	.word	0x20000348

08003260 <_Balloc>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	69c6      	ldr	r6, [r0, #28]
 8003264:	4604      	mov	r4, r0
 8003266:	460d      	mov	r5, r1
 8003268:	b976      	cbnz	r6, 8003288 <_Balloc+0x28>
 800326a:	2010      	movs	r0, #16
 800326c:	f7ff ff42 	bl	80030f4 <malloc>
 8003270:	4602      	mov	r2, r0
 8003272:	61e0      	str	r0, [r4, #28]
 8003274:	b920      	cbnz	r0, 8003280 <_Balloc+0x20>
 8003276:	4b18      	ldr	r3, [pc, #96]	@ (80032d8 <_Balloc+0x78>)
 8003278:	4818      	ldr	r0, [pc, #96]	@ (80032dc <_Balloc+0x7c>)
 800327a:	216b      	movs	r1, #107	@ 0x6b
 800327c:	f000 ff84 	bl	8004188 <__assert_func>
 8003280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003284:	6006      	str	r6, [r0, #0]
 8003286:	60c6      	str	r6, [r0, #12]
 8003288:	69e6      	ldr	r6, [r4, #28]
 800328a:	68f3      	ldr	r3, [r6, #12]
 800328c:	b183      	cbz	r3, 80032b0 <_Balloc+0x50>
 800328e:	69e3      	ldr	r3, [r4, #28]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003296:	b9b8      	cbnz	r0, 80032c8 <_Balloc+0x68>
 8003298:	2101      	movs	r1, #1
 800329a:	fa01 f605 	lsl.w	r6, r1, r5
 800329e:	1d72      	adds	r2, r6, #5
 80032a0:	0092      	lsls	r2, r2, #2
 80032a2:	4620      	mov	r0, r4
 80032a4:	f000 ff8e 	bl	80041c4 <_calloc_r>
 80032a8:	b160      	cbz	r0, 80032c4 <_Balloc+0x64>
 80032aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80032ae:	e00e      	b.n	80032ce <_Balloc+0x6e>
 80032b0:	2221      	movs	r2, #33	@ 0x21
 80032b2:	2104      	movs	r1, #4
 80032b4:	4620      	mov	r0, r4
 80032b6:	f000 ff85 	bl	80041c4 <_calloc_r>
 80032ba:	69e3      	ldr	r3, [r4, #28]
 80032bc:	60f0      	str	r0, [r6, #12]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e4      	bne.n	800328e <_Balloc+0x2e>
 80032c4:	2000      	movs	r0, #0
 80032c6:	bd70      	pop	{r4, r5, r6, pc}
 80032c8:	6802      	ldr	r2, [r0, #0]
 80032ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80032ce:	2300      	movs	r3, #0
 80032d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80032d4:	e7f7      	b.n	80032c6 <_Balloc+0x66>
 80032d6:	bf00      	nop
 80032d8:	0800457b 	.word	0x0800457b
 80032dc:	080045fb 	.word	0x080045fb

080032e0 <_Bfree>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	69c6      	ldr	r6, [r0, #28]
 80032e4:	4605      	mov	r5, r0
 80032e6:	460c      	mov	r4, r1
 80032e8:	b976      	cbnz	r6, 8003308 <_Bfree+0x28>
 80032ea:	2010      	movs	r0, #16
 80032ec:	f7ff ff02 	bl	80030f4 <malloc>
 80032f0:	4602      	mov	r2, r0
 80032f2:	61e8      	str	r0, [r5, #28]
 80032f4:	b920      	cbnz	r0, 8003300 <_Bfree+0x20>
 80032f6:	4b09      	ldr	r3, [pc, #36]	@ (800331c <_Bfree+0x3c>)
 80032f8:	4809      	ldr	r0, [pc, #36]	@ (8003320 <_Bfree+0x40>)
 80032fa:	218f      	movs	r1, #143	@ 0x8f
 80032fc:	f000 ff44 	bl	8004188 <__assert_func>
 8003300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003304:	6006      	str	r6, [r0, #0]
 8003306:	60c6      	str	r6, [r0, #12]
 8003308:	b13c      	cbz	r4, 800331a <_Bfree+0x3a>
 800330a:	69eb      	ldr	r3, [r5, #28]
 800330c:	6862      	ldr	r2, [r4, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003314:	6021      	str	r1, [r4, #0]
 8003316:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800331a:	bd70      	pop	{r4, r5, r6, pc}
 800331c:	0800457b 	.word	0x0800457b
 8003320:	080045fb 	.word	0x080045fb

08003324 <__multadd>:
 8003324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003328:	690d      	ldr	r5, [r1, #16]
 800332a:	4607      	mov	r7, r0
 800332c:	460c      	mov	r4, r1
 800332e:	461e      	mov	r6, r3
 8003330:	f101 0c14 	add.w	ip, r1, #20
 8003334:	2000      	movs	r0, #0
 8003336:	f8dc 3000 	ldr.w	r3, [ip]
 800333a:	b299      	uxth	r1, r3
 800333c:	fb02 6101 	mla	r1, r2, r1, r6
 8003340:	0c1e      	lsrs	r6, r3, #16
 8003342:	0c0b      	lsrs	r3, r1, #16
 8003344:	fb02 3306 	mla	r3, r2, r6, r3
 8003348:	b289      	uxth	r1, r1
 800334a:	3001      	adds	r0, #1
 800334c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003350:	4285      	cmp	r5, r0
 8003352:	f84c 1b04 	str.w	r1, [ip], #4
 8003356:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800335a:	dcec      	bgt.n	8003336 <__multadd+0x12>
 800335c:	b30e      	cbz	r6, 80033a2 <__multadd+0x7e>
 800335e:	68a3      	ldr	r3, [r4, #8]
 8003360:	42ab      	cmp	r3, r5
 8003362:	dc19      	bgt.n	8003398 <__multadd+0x74>
 8003364:	6861      	ldr	r1, [r4, #4]
 8003366:	4638      	mov	r0, r7
 8003368:	3101      	adds	r1, #1
 800336a:	f7ff ff79 	bl	8003260 <_Balloc>
 800336e:	4680      	mov	r8, r0
 8003370:	b928      	cbnz	r0, 800337e <__multadd+0x5a>
 8003372:	4602      	mov	r2, r0
 8003374:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <__multadd+0x84>)
 8003376:	480d      	ldr	r0, [pc, #52]	@ (80033ac <__multadd+0x88>)
 8003378:	21ba      	movs	r1, #186	@ 0xba
 800337a:	f000 ff05 	bl	8004188 <__assert_func>
 800337e:	6922      	ldr	r2, [r4, #16]
 8003380:	3202      	adds	r2, #2
 8003382:	f104 010c 	add.w	r1, r4, #12
 8003386:	0092      	lsls	r2, r2, #2
 8003388:	300c      	adds	r0, #12
 800338a:	f000 feef 	bl	800416c <memcpy>
 800338e:	4621      	mov	r1, r4
 8003390:	4638      	mov	r0, r7
 8003392:	f7ff ffa5 	bl	80032e0 <_Bfree>
 8003396:	4644      	mov	r4, r8
 8003398:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800339c:	3501      	adds	r5, #1
 800339e:	615e      	str	r6, [r3, #20]
 80033a0:	6125      	str	r5, [r4, #16]
 80033a2:	4620      	mov	r0, r4
 80033a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033a8:	080045ea 	.word	0x080045ea
 80033ac:	080045fb 	.word	0x080045fb

080033b0 <__hi0bits>:
 80033b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80033b4:	4603      	mov	r3, r0
 80033b6:	bf36      	itet	cc
 80033b8:	0403      	lslcc	r3, r0, #16
 80033ba:	2000      	movcs	r0, #0
 80033bc:	2010      	movcc	r0, #16
 80033be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033c2:	bf3c      	itt	cc
 80033c4:	021b      	lslcc	r3, r3, #8
 80033c6:	3008      	addcc	r0, #8
 80033c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033cc:	bf3c      	itt	cc
 80033ce:	011b      	lslcc	r3, r3, #4
 80033d0:	3004      	addcc	r0, #4
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d6:	bf3c      	itt	cc
 80033d8:	009b      	lslcc	r3, r3, #2
 80033da:	3002      	addcc	r0, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	db05      	blt.n	80033ec <__hi0bits+0x3c>
 80033e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80033e4:	f100 0001 	add.w	r0, r0, #1
 80033e8:	bf08      	it	eq
 80033ea:	2020      	moveq	r0, #32
 80033ec:	4770      	bx	lr

080033ee <__lo0bits>:
 80033ee:	6803      	ldr	r3, [r0, #0]
 80033f0:	4602      	mov	r2, r0
 80033f2:	f013 0007 	ands.w	r0, r3, #7
 80033f6:	d00b      	beq.n	8003410 <__lo0bits+0x22>
 80033f8:	07d9      	lsls	r1, r3, #31
 80033fa:	d421      	bmi.n	8003440 <__lo0bits+0x52>
 80033fc:	0798      	lsls	r0, r3, #30
 80033fe:	bf49      	itett	mi
 8003400:	085b      	lsrmi	r3, r3, #1
 8003402:	089b      	lsrpl	r3, r3, #2
 8003404:	2001      	movmi	r0, #1
 8003406:	6013      	strmi	r3, [r2, #0]
 8003408:	bf5c      	itt	pl
 800340a:	6013      	strpl	r3, [r2, #0]
 800340c:	2002      	movpl	r0, #2
 800340e:	4770      	bx	lr
 8003410:	b299      	uxth	r1, r3
 8003412:	b909      	cbnz	r1, 8003418 <__lo0bits+0x2a>
 8003414:	0c1b      	lsrs	r3, r3, #16
 8003416:	2010      	movs	r0, #16
 8003418:	b2d9      	uxtb	r1, r3
 800341a:	b909      	cbnz	r1, 8003420 <__lo0bits+0x32>
 800341c:	3008      	adds	r0, #8
 800341e:	0a1b      	lsrs	r3, r3, #8
 8003420:	0719      	lsls	r1, r3, #28
 8003422:	bf04      	itt	eq
 8003424:	091b      	lsreq	r3, r3, #4
 8003426:	3004      	addeq	r0, #4
 8003428:	0799      	lsls	r1, r3, #30
 800342a:	bf04      	itt	eq
 800342c:	089b      	lsreq	r3, r3, #2
 800342e:	3002      	addeq	r0, #2
 8003430:	07d9      	lsls	r1, r3, #31
 8003432:	d403      	bmi.n	800343c <__lo0bits+0x4e>
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	f100 0001 	add.w	r0, r0, #1
 800343a:	d003      	beq.n	8003444 <__lo0bits+0x56>
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4770      	bx	lr
 8003440:	2000      	movs	r0, #0
 8003442:	4770      	bx	lr
 8003444:	2020      	movs	r0, #32
 8003446:	4770      	bx	lr

08003448 <__i2b>:
 8003448:	b510      	push	{r4, lr}
 800344a:	460c      	mov	r4, r1
 800344c:	2101      	movs	r1, #1
 800344e:	f7ff ff07 	bl	8003260 <_Balloc>
 8003452:	4602      	mov	r2, r0
 8003454:	b928      	cbnz	r0, 8003462 <__i2b+0x1a>
 8003456:	4b05      	ldr	r3, [pc, #20]	@ (800346c <__i2b+0x24>)
 8003458:	4805      	ldr	r0, [pc, #20]	@ (8003470 <__i2b+0x28>)
 800345a:	f240 1145 	movw	r1, #325	@ 0x145
 800345e:	f000 fe93 	bl	8004188 <__assert_func>
 8003462:	2301      	movs	r3, #1
 8003464:	6144      	str	r4, [r0, #20]
 8003466:	6103      	str	r3, [r0, #16]
 8003468:	bd10      	pop	{r4, pc}
 800346a:	bf00      	nop
 800346c:	080045ea 	.word	0x080045ea
 8003470:	080045fb 	.word	0x080045fb

08003474 <__multiply>:
 8003474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003478:	4614      	mov	r4, r2
 800347a:	690a      	ldr	r2, [r1, #16]
 800347c:	6923      	ldr	r3, [r4, #16]
 800347e:	429a      	cmp	r2, r3
 8003480:	bfa8      	it	ge
 8003482:	4623      	movge	r3, r4
 8003484:	460f      	mov	r7, r1
 8003486:	bfa4      	itt	ge
 8003488:	460c      	movge	r4, r1
 800348a:	461f      	movge	r7, r3
 800348c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003490:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8003494:	68a3      	ldr	r3, [r4, #8]
 8003496:	6861      	ldr	r1, [r4, #4]
 8003498:	eb0a 0609 	add.w	r6, sl, r9
 800349c:	42b3      	cmp	r3, r6
 800349e:	b085      	sub	sp, #20
 80034a0:	bfb8      	it	lt
 80034a2:	3101      	addlt	r1, #1
 80034a4:	f7ff fedc 	bl	8003260 <_Balloc>
 80034a8:	b930      	cbnz	r0, 80034b8 <__multiply+0x44>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4b44      	ldr	r3, [pc, #272]	@ (80035c0 <__multiply+0x14c>)
 80034ae:	4845      	ldr	r0, [pc, #276]	@ (80035c4 <__multiply+0x150>)
 80034b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80034b4:	f000 fe68 	bl	8004188 <__assert_func>
 80034b8:	f100 0514 	add.w	r5, r0, #20
 80034bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80034c0:	462b      	mov	r3, r5
 80034c2:	2200      	movs	r2, #0
 80034c4:	4543      	cmp	r3, r8
 80034c6:	d321      	bcc.n	800350c <__multiply+0x98>
 80034c8:	f107 0114 	add.w	r1, r7, #20
 80034cc:	f104 0214 	add.w	r2, r4, #20
 80034d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80034d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80034d8:	9302      	str	r3, [sp, #8]
 80034da:	1b13      	subs	r3, r2, r4
 80034dc:	3b15      	subs	r3, #21
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	3304      	adds	r3, #4
 80034e4:	f104 0715 	add.w	r7, r4, #21
 80034e8:	42ba      	cmp	r2, r7
 80034ea:	bf38      	it	cc
 80034ec:	2304      	movcc	r3, #4
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	9b02      	ldr	r3, [sp, #8]
 80034f2:	9103      	str	r1, [sp, #12]
 80034f4:	428b      	cmp	r3, r1
 80034f6:	d80c      	bhi.n	8003512 <__multiply+0x9e>
 80034f8:	2e00      	cmp	r6, #0
 80034fa:	dd03      	ble.n	8003504 <__multiply+0x90>
 80034fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003500:	2b00      	cmp	r3, #0
 8003502:	d05b      	beq.n	80035bc <__multiply+0x148>
 8003504:	6106      	str	r6, [r0, #16]
 8003506:	b005      	add	sp, #20
 8003508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800350c:	f843 2b04 	str.w	r2, [r3], #4
 8003510:	e7d8      	b.n	80034c4 <__multiply+0x50>
 8003512:	f8b1 a000 	ldrh.w	sl, [r1]
 8003516:	f1ba 0f00 	cmp.w	sl, #0
 800351a:	d024      	beq.n	8003566 <__multiply+0xf2>
 800351c:	f104 0e14 	add.w	lr, r4, #20
 8003520:	46a9      	mov	r9, r5
 8003522:	f04f 0c00 	mov.w	ip, #0
 8003526:	f85e 7b04 	ldr.w	r7, [lr], #4
 800352a:	f8d9 3000 	ldr.w	r3, [r9]
 800352e:	fa1f fb87 	uxth.w	fp, r7
 8003532:	b29b      	uxth	r3, r3
 8003534:	fb0a 330b 	mla	r3, sl, fp, r3
 8003538:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800353c:	f8d9 7000 	ldr.w	r7, [r9]
 8003540:	4463      	add	r3, ip
 8003542:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003546:	fb0a c70b 	mla	r7, sl, fp, ip
 800354a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800354e:	b29b      	uxth	r3, r3
 8003550:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003554:	4572      	cmp	r2, lr
 8003556:	f849 3b04 	str.w	r3, [r9], #4
 800355a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800355e:	d8e2      	bhi.n	8003526 <__multiply+0xb2>
 8003560:	9b01      	ldr	r3, [sp, #4]
 8003562:	f845 c003 	str.w	ip, [r5, r3]
 8003566:	9b03      	ldr	r3, [sp, #12]
 8003568:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800356c:	3104      	adds	r1, #4
 800356e:	f1b9 0f00 	cmp.w	r9, #0
 8003572:	d021      	beq.n	80035b8 <__multiply+0x144>
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	f104 0c14 	add.w	ip, r4, #20
 800357a:	46ae      	mov	lr, r5
 800357c:	f04f 0a00 	mov.w	sl, #0
 8003580:	f8bc b000 	ldrh.w	fp, [ip]
 8003584:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8003588:	fb09 770b 	mla	r7, r9, fp, r7
 800358c:	4457      	add	r7, sl
 800358e:	b29b      	uxth	r3, r3
 8003590:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003594:	f84e 3b04 	str.w	r3, [lr], #4
 8003598:	f85c 3b04 	ldr.w	r3, [ip], #4
 800359c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80035a0:	f8be 3000 	ldrh.w	r3, [lr]
 80035a4:	fb09 330a 	mla	r3, r9, sl, r3
 80035a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80035ac:	4562      	cmp	r2, ip
 80035ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80035b2:	d8e5      	bhi.n	8003580 <__multiply+0x10c>
 80035b4:	9f01      	ldr	r7, [sp, #4]
 80035b6:	51eb      	str	r3, [r5, r7]
 80035b8:	3504      	adds	r5, #4
 80035ba:	e799      	b.n	80034f0 <__multiply+0x7c>
 80035bc:	3e01      	subs	r6, #1
 80035be:	e79b      	b.n	80034f8 <__multiply+0x84>
 80035c0:	080045ea 	.word	0x080045ea
 80035c4:	080045fb 	.word	0x080045fb

080035c8 <__pow5mult>:
 80035c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035cc:	4615      	mov	r5, r2
 80035ce:	f012 0203 	ands.w	r2, r2, #3
 80035d2:	4607      	mov	r7, r0
 80035d4:	460e      	mov	r6, r1
 80035d6:	d007      	beq.n	80035e8 <__pow5mult+0x20>
 80035d8:	4c25      	ldr	r4, [pc, #148]	@ (8003670 <__pow5mult+0xa8>)
 80035da:	3a01      	subs	r2, #1
 80035dc:	2300      	movs	r3, #0
 80035de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80035e2:	f7ff fe9f 	bl	8003324 <__multadd>
 80035e6:	4606      	mov	r6, r0
 80035e8:	10ad      	asrs	r5, r5, #2
 80035ea:	d03d      	beq.n	8003668 <__pow5mult+0xa0>
 80035ec:	69fc      	ldr	r4, [r7, #28]
 80035ee:	b97c      	cbnz	r4, 8003610 <__pow5mult+0x48>
 80035f0:	2010      	movs	r0, #16
 80035f2:	f7ff fd7f 	bl	80030f4 <malloc>
 80035f6:	4602      	mov	r2, r0
 80035f8:	61f8      	str	r0, [r7, #28]
 80035fa:	b928      	cbnz	r0, 8003608 <__pow5mult+0x40>
 80035fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003674 <__pow5mult+0xac>)
 80035fe:	481e      	ldr	r0, [pc, #120]	@ (8003678 <__pow5mult+0xb0>)
 8003600:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003604:	f000 fdc0 	bl	8004188 <__assert_func>
 8003608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800360c:	6004      	str	r4, [r0, #0]
 800360e:	60c4      	str	r4, [r0, #12]
 8003610:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003618:	b94c      	cbnz	r4, 800362e <__pow5mult+0x66>
 800361a:	f240 2171 	movw	r1, #625	@ 0x271
 800361e:	4638      	mov	r0, r7
 8003620:	f7ff ff12 	bl	8003448 <__i2b>
 8003624:	2300      	movs	r3, #0
 8003626:	f8c8 0008 	str.w	r0, [r8, #8]
 800362a:	4604      	mov	r4, r0
 800362c:	6003      	str	r3, [r0, #0]
 800362e:	f04f 0900 	mov.w	r9, #0
 8003632:	07eb      	lsls	r3, r5, #31
 8003634:	d50a      	bpl.n	800364c <__pow5mult+0x84>
 8003636:	4631      	mov	r1, r6
 8003638:	4622      	mov	r2, r4
 800363a:	4638      	mov	r0, r7
 800363c:	f7ff ff1a 	bl	8003474 <__multiply>
 8003640:	4631      	mov	r1, r6
 8003642:	4680      	mov	r8, r0
 8003644:	4638      	mov	r0, r7
 8003646:	f7ff fe4b 	bl	80032e0 <_Bfree>
 800364a:	4646      	mov	r6, r8
 800364c:	106d      	asrs	r5, r5, #1
 800364e:	d00b      	beq.n	8003668 <__pow5mult+0xa0>
 8003650:	6820      	ldr	r0, [r4, #0]
 8003652:	b938      	cbnz	r0, 8003664 <__pow5mult+0x9c>
 8003654:	4622      	mov	r2, r4
 8003656:	4621      	mov	r1, r4
 8003658:	4638      	mov	r0, r7
 800365a:	f7ff ff0b 	bl	8003474 <__multiply>
 800365e:	6020      	str	r0, [r4, #0]
 8003660:	f8c0 9000 	str.w	r9, [r0]
 8003664:	4604      	mov	r4, r0
 8003666:	e7e4      	b.n	8003632 <__pow5mult+0x6a>
 8003668:	4630      	mov	r0, r6
 800366a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800366e:	bf00      	nop
 8003670:	08004654 	.word	0x08004654
 8003674:	0800457b 	.word	0x0800457b
 8003678:	080045fb 	.word	0x080045fb

0800367c <__lshift>:
 800367c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003680:	460c      	mov	r4, r1
 8003682:	6849      	ldr	r1, [r1, #4]
 8003684:	6923      	ldr	r3, [r4, #16]
 8003686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800368a:	68a3      	ldr	r3, [r4, #8]
 800368c:	4607      	mov	r7, r0
 800368e:	4691      	mov	r9, r2
 8003690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003694:	f108 0601 	add.w	r6, r8, #1
 8003698:	42b3      	cmp	r3, r6
 800369a:	db0b      	blt.n	80036b4 <__lshift+0x38>
 800369c:	4638      	mov	r0, r7
 800369e:	f7ff fddf 	bl	8003260 <_Balloc>
 80036a2:	4605      	mov	r5, r0
 80036a4:	b948      	cbnz	r0, 80036ba <__lshift+0x3e>
 80036a6:	4602      	mov	r2, r0
 80036a8:	4b28      	ldr	r3, [pc, #160]	@ (800374c <__lshift+0xd0>)
 80036aa:	4829      	ldr	r0, [pc, #164]	@ (8003750 <__lshift+0xd4>)
 80036ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80036b0:	f000 fd6a 	bl	8004188 <__assert_func>
 80036b4:	3101      	adds	r1, #1
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	e7ee      	b.n	8003698 <__lshift+0x1c>
 80036ba:	2300      	movs	r3, #0
 80036bc:	f100 0114 	add.w	r1, r0, #20
 80036c0:	f100 0210 	add.w	r2, r0, #16
 80036c4:	4618      	mov	r0, r3
 80036c6:	4553      	cmp	r3, sl
 80036c8:	db33      	blt.n	8003732 <__lshift+0xb6>
 80036ca:	6920      	ldr	r0, [r4, #16]
 80036cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80036d0:	f104 0314 	add.w	r3, r4, #20
 80036d4:	f019 091f 	ands.w	r9, r9, #31
 80036d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80036dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80036e0:	d02b      	beq.n	800373a <__lshift+0xbe>
 80036e2:	f1c9 0e20 	rsb	lr, r9, #32
 80036e6:	468a      	mov	sl, r1
 80036e8:	2200      	movs	r2, #0
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	fa00 f009 	lsl.w	r0, r0, r9
 80036f0:	4310      	orrs	r0, r2
 80036f2:	f84a 0b04 	str.w	r0, [sl], #4
 80036f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80036fa:	459c      	cmp	ip, r3
 80036fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8003700:	d8f3      	bhi.n	80036ea <__lshift+0x6e>
 8003702:	ebac 0304 	sub.w	r3, ip, r4
 8003706:	3b15      	subs	r3, #21
 8003708:	f023 0303 	bic.w	r3, r3, #3
 800370c:	3304      	adds	r3, #4
 800370e:	f104 0015 	add.w	r0, r4, #21
 8003712:	4584      	cmp	ip, r0
 8003714:	bf38      	it	cc
 8003716:	2304      	movcc	r3, #4
 8003718:	50ca      	str	r2, [r1, r3]
 800371a:	b10a      	cbz	r2, 8003720 <__lshift+0xa4>
 800371c:	f108 0602 	add.w	r6, r8, #2
 8003720:	3e01      	subs	r6, #1
 8003722:	4638      	mov	r0, r7
 8003724:	612e      	str	r6, [r5, #16]
 8003726:	4621      	mov	r1, r4
 8003728:	f7ff fdda 	bl	80032e0 <_Bfree>
 800372c:	4628      	mov	r0, r5
 800372e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003732:	f842 0f04 	str.w	r0, [r2, #4]!
 8003736:	3301      	adds	r3, #1
 8003738:	e7c5      	b.n	80036c6 <__lshift+0x4a>
 800373a:	3904      	subs	r1, #4
 800373c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003740:	f841 2f04 	str.w	r2, [r1, #4]!
 8003744:	459c      	cmp	ip, r3
 8003746:	d8f9      	bhi.n	800373c <__lshift+0xc0>
 8003748:	e7ea      	b.n	8003720 <__lshift+0xa4>
 800374a:	bf00      	nop
 800374c:	080045ea 	.word	0x080045ea
 8003750:	080045fb 	.word	0x080045fb

08003754 <__mcmp>:
 8003754:	690a      	ldr	r2, [r1, #16]
 8003756:	4603      	mov	r3, r0
 8003758:	6900      	ldr	r0, [r0, #16]
 800375a:	1a80      	subs	r0, r0, r2
 800375c:	b530      	push	{r4, r5, lr}
 800375e:	d10e      	bne.n	800377e <__mcmp+0x2a>
 8003760:	3314      	adds	r3, #20
 8003762:	3114      	adds	r1, #20
 8003764:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003768:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800376c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003770:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003774:	4295      	cmp	r5, r2
 8003776:	d003      	beq.n	8003780 <__mcmp+0x2c>
 8003778:	d205      	bcs.n	8003786 <__mcmp+0x32>
 800377a:	f04f 30ff 	mov.w	r0, #4294967295
 800377e:	bd30      	pop	{r4, r5, pc}
 8003780:	42a3      	cmp	r3, r4
 8003782:	d3f3      	bcc.n	800376c <__mcmp+0x18>
 8003784:	e7fb      	b.n	800377e <__mcmp+0x2a>
 8003786:	2001      	movs	r0, #1
 8003788:	e7f9      	b.n	800377e <__mcmp+0x2a>
	...

0800378c <__mdiff>:
 800378c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003790:	4689      	mov	r9, r1
 8003792:	4606      	mov	r6, r0
 8003794:	4611      	mov	r1, r2
 8003796:	4648      	mov	r0, r9
 8003798:	4614      	mov	r4, r2
 800379a:	f7ff ffdb 	bl	8003754 <__mcmp>
 800379e:	1e05      	subs	r5, r0, #0
 80037a0:	d112      	bne.n	80037c8 <__mdiff+0x3c>
 80037a2:	4629      	mov	r1, r5
 80037a4:	4630      	mov	r0, r6
 80037a6:	f7ff fd5b 	bl	8003260 <_Balloc>
 80037aa:	4602      	mov	r2, r0
 80037ac:	b928      	cbnz	r0, 80037ba <__mdiff+0x2e>
 80037ae:	4b3f      	ldr	r3, [pc, #252]	@ (80038ac <__mdiff+0x120>)
 80037b0:	f240 2137 	movw	r1, #567	@ 0x237
 80037b4:	483e      	ldr	r0, [pc, #248]	@ (80038b0 <__mdiff+0x124>)
 80037b6:	f000 fce7 	bl	8004188 <__assert_func>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80037c0:	4610      	mov	r0, r2
 80037c2:	b003      	add	sp, #12
 80037c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c8:	bfbc      	itt	lt
 80037ca:	464b      	movlt	r3, r9
 80037cc:	46a1      	movlt	r9, r4
 80037ce:	4630      	mov	r0, r6
 80037d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80037d4:	bfba      	itte	lt
 80037d6:	461c      	movlt	r4, r3
 80037d8:	2501      	movlt	r5, #1
 80037da:	2500      	movge	r5, #0
 80037dc:	f7ff fd40 	bl	8003260 <_Balloc>
 80037e0:	4602      	mov	r2, r0
 80037e2:	b918      	cbnz	r0, 80037ec <__mdiff+0x60>
 80037e4:	4b31      	ldr	r3, [pc, #196]	@ (80038ac <__mdiff+0x120>)
 80037e6:	f240 2145 	movw	r1, #581	@ 0x245
 80037ea:	e7e3      	b.n	80037b4 <__mdiff+0x28>
 80037ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80037f0:	6926      	ldr	r6, [r4, #16]
 80037f2:	60c5      	str	r5, [r0, #12]
 80037f4:	f109 0310 	add.w	r3, r9, #16
 80037f8:	f109 0514 	add.w	r5, r9, #20
 80037fc:	f104 0e14 	add.w	lr, r4, #20
 8003800:	f100 0b14 	add.w	fp, r0, #20
 8003804:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8003808:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	46d9      	mov	r9, fp
 8003810:	f04f 0c00 	mov.w	ip, #0
 8003814:	9b01      	ldr	r3, [sp, #4]
 8003816:	f85e 0b04 	ldr.w	r0, [lr], #4
 800381a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	fa1f f38a 	uxth.w	r3, sl
 8003824:	4619      	mov	r1, r3
 8003826:	b283      	uxth	r3, r0
 8003828:	1acb      	subs	r3, r1, r3
 800382a:	0c00      	lsrs	r0, r0, #16
 800382c:	4463      	add	r3, ip
 800382e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8003832:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8003836:	b29b      	uxth	r3, r3
 8003838:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800383c:	4576      	cmp	r6, lr
 800383e:	f849 3b04 	str.w	r3, [r9], #4
 8003842:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003846:	d8e5      	bhi.n	8003814 <__mdiff+0x88>
 8003848:	1b33      	subs	r3, r6, r4
 800384a:	3b15      	subs	r3, #21
 800384c:	f023 0303 	bic.w	r3, r3, #3
 8003850:	3415      	adds	r4, #21
 8003852:	3304      	adds	r3, #4
 8003854:	42a6      	cmp	r6, r4
 8003856:	bf38      	it	cc
 8003858:	2304      	movcc	r3, #4
 800385a:	441d      	add	r5, r3
 800385c:	445b      	add	r3, fp
 800385e:	461e      	mov	r6, r3
 8003860:	462c      	mov	r4, r5
 8003862:	4544      	cmp	r4, r8
 8003864:	d30e      	bcc.n	8003884 <__mdiff+0xf8>
 8003866:	f108 0103 	add.w	r1, r8, #3
 800386a:	1b49      	subs	r1, r1, r5
 800386c:	f021 0103 	bic.w	r1, r1, #3
 8003870:	3d03      	subs	r5, #3
 8003872:	45a8      	cmp	r8, r5
 8003874:	bf38      	it	cc
 8003876:	2100      	movcc	r1, #0
 8003878:	440b      	add	r3, r1
 800387a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800387e:	b191      	cbz	r1, 80038a6 <__mdiff+0x11a>
 8003880:	6117      	str	r7, [r2, #16]
 8003882:	e79d      	b.n	80037c0 <__mdiff+0x34>
 8003884:	f854 1b04 	ldr.w	r1, [r4], #4
 8003888:	46e6      	mov	lr, ip
 800388a:	0c08      	lsrs	r0, r1, #16
 800388c:	fa1c fc81 	uxtah	ip, ip, r1
 8003890:	4471      	add	r1, lr
 8003892:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8003896:	b289      	uxth	r1, r1
 8003898:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800389c:	f846 1b04 	str.w	r1, [r6], #4
 80038a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80038a4:	e7dd      	b.n	8003862 <__mdiff+0xd6>
 80038a6:	3f01      	subs	r7, #1
 80038a8:	e7e7      	b.n	800387a <__mdiff+0xee>
 80038aa:	bf00      	nop
 80038ac:	080045ea 	.word	0x080045ea
 80038b0:	080045fb 	.word	0x080045fb

080038b4 <__d2b>:
 80038b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80038b8:	460f      	mov	r7, r1
 80038ba:	2101      	movs	r1, #1
 80038bc:	ec59 8b10 	vmov	r8, r9, d0
 80038c0:	4616      	mov	r6, r2
 80038c2:	f7ff fccd 	bl	8003260 <_Balloc>
 80038c6:	4604      	mov	r4, r0
 80038c8:	b930      	cbnz	r0, 80038d8 <__d2b+0x24>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b23      	ldr	r3, [pc, #140]	@ (800395c <__d2b+0xa8>)
 80038ce:	4824      	ldr	r0, [pc, #144]	@ (8003960 <__d2b+0xac>)
 80038d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80038d4:	f000 fc58 	bl	8004188 <__assert_func>
 80038d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80038dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80038e0:	b10d      	cbz	r5, 80038e6 <__d2b+0x32>
 80038e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	f1b8 0300 	subs.w	r3, r8, #0
 80038ec:	d023      	beq.n	8003936 <__d2b+0x82>
 80038ee:	4668      	mov	r0, sp
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	f7ff fd7c 	bl	80033ee <__lo0bits>
 80038f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80038fa:	b1d0      	cbz	r0, 8003932 <__d2b+0x7e>
 80038fc:	f1c0 0320 	rsb	r3, r0, #32
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	430b      	orrs	r3, r1
 8003906:	40c2      	lsrs	r2, r0
 8003908:	6163      	str	r3, [r4, #20]
 800390a:	9201      	str	r2, [sp, #4]
 800390c:	9b01      	ldr	r3, [sp, #4]
 800390e:	61a3      	str	r3, [r4, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf0c      	ite	eq
 8003914:	2201      	moveq	r2, #1
 8003916:	2202      	movne	r2, #2
 8003918:	6122      	str	r2, [r4, #16]
 800391a:	b1a5      	cbz	r5, 8003946 <__d2b+0x92>
 800391c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8003920:	4405      	add	r5, r0
 8003922:	603d      	str	r5, [r7, #0]
 8003924:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8003928:	6030      	str	r0, [r6, #0]
 800392a:	4620      	mov	r0, r4
 800392c:	b003      	add	sp, #12
 800392e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003932:	6161      	str	r1, [r4, #20]
 8003934:	e7ea      	b.n	800390c <__d2b+0x58>
 8003936:	a801      	add	r0, sp, #4
 8003938:	f7ff fd59 	bl	80033ee <__lo0bits>
 800393c:	9b01      	ldr	r3, [sp, #4]
 800393e:	6163      	str	r3, [r4, #20]
 8003940:	3020      	adds	r0, #32
 8003942:	2201      	movs	r2, #1
 8003944:	e7e8      	b.n	8003918 <__d2b+0x64>
 8003946:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800394a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800394e:	6038      	str	r0, [r7, #0]
 8003950:	6918      	ldr	r0, [r3, #16]
 8003952:	f7ff fd2d 	bl	80033b0 <__hi0bits>
 8003956:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800395a:	e7e5      	b.n	8003928 <__d2b+0x74>
 800395c:	080045ea 	.word	0x080045ea
 8003960:	080045fb 	.word	0x080045fb

08003964 <__ssputs_r>:
 8003964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003968:	688e      	ldr	r6, [r1, #8]
 800396a:	461f      	mov	r7, r3
 800396c:	42be      	cmp	r6, r7
 800396e:	680b      	ldr	r3, [r1, #0]
 8003970:	4682      	mov	sl, r0
 8003972:	460c      	mov	r4, r1
 8003974:	4690      	mov	r8, r2
 8003976:	d82d      	bhi.n	80039d4 <__ssputs_r+0x70>
 8003978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800397c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003980:	d026      	beq.n	80039d0 <__ssputs_r+0x6c>
 8003982:	6965      	ldr	r5, [r4, #20]
 8003984:	6909      	ldr	r1, [r1, #16]
 8003986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800398a:	eba3 0901 	sub.w	r9, r3, r1
 800398e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003992:	1c7b      	adds	r3, r7, #1
 8003994:	444b      	add	r3, r9
 8003996:	106d      	asrs	r5, r5, #1
 8003998:	429d      	cmp	r5, r3
 800399a:	bf38      	it	cc
 800399c:	461d      	movcc	r5, r3
 800399e:	0553      	lsls	r3, r2, #21
 80039a0:	d527      	bpl.n	80039f2 <__ssputs_r+0x8e>
 80039a2:	4629      	mov	r1, r5
 80039a4:	f7ff fbd0 	bl	8003148 <_malloc_r>
 80039a8:	4606      	mov	r6, r0
 80039aa:	b360      	cbz	r0, 8003a06 <__ssputs_r+0xa2>
 80039ac:	6921      	ldr	r1, [r4, #16]
 80039ae:	464a      	mov	r2, r9
 80039b0:	f000 fbdc 	bl	800416c <memcpy>
 80039b4:	89a3      	ldrh	r3, [r4, #12]
 80039b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039be:	81a3      	strh	r3, [r4, #12]
 80039c0:	6126      	str	r6, [r4, #16]
 80039c2:	6165      	str	r5, [r4, #20]
 80039c4:	444e      	add	r6, r9
 80039c6:	eba5 0509 	sub.w	r5, r5, r9
 80039ca:	6026      	str	r6, [r4, #0]
 80039cc:	60a5      	str	r5, [r4, #8]
 80039ce:	463e      	mov	r6, r7
 80039d0:	42be      	cmp	r6, r7
 80039d2:	d900      	bls.n	80039d6 <__ssputs_r+0x72>
 80039d4:	463e      	mov	r6, r7
 80039d6:	6820      	ldr	r0, [r4, #0]
 80039d8:	4632      	mov	r2, r6
 80039da:	4641      	mov	r1, r8
 80039dc:	f000 fb9c 	bl	8004118 <memmove>
 80039e0:	68a3      	ldr	r3, [r4, #8]
 80039e2:	1b9b      	subs	r3, r3, r6
 80039e4:	60a3      	str	r3, [r4, #8]
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	4433      	add	r3, r6
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	2000      	movs	r0, #0
 80039ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f2:	462a      	mov	r2, r5
 80039f4:	f000 fc0c 	bl	8004210 <_realloc_r>
 80039f8:	4606      	mov	r6, r0
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d1e0      	bne.n	80039c0 <__ssputs_r+0x5c>
 80039fe:	6921      	ldr	r1, [r4, #16]
 8003a00:	4650      	mov	r0, sl
 8003a02:	f7ff fb2d 	bl	8003060 <_free_r>
 8003a06:	230c      	movs	r3, #12
 8003a08:	f8ca 3000 	str.w	r3, [sl]
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	e7e9      	b.n	80039ee <__ssputs_r+0x8a>
	...

08003a1c <_svfiprintf_r>:
 8003a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a20:	4698      	mov	r8, r3
 8003a22:	898b      	ldrh	r3, [r1, #12]
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	b09d      	sub	sp, #116	@ 0x74
 8003a28:	4607      	mov	r7, r0
 8003a2a:	460d      	mov	r5, r1
 8003a2c:	4614      	mov	r4, r2
 8003a2e:	d510      	bpl.n	8003a52 <_svfiprintf_r+0x36>
 8003a30:	690b      	ldr	r3, [r1, #16]
 8003a32:	b973      	cbnz	r3, 8003a52 <_svfiprintf_r+0x36>
 8003a34:	2140      	movs	r1, #64	@ 0x40
 8003a36:	f7ff fb87 	bl	8003148 <_malloc_r>
 8003a3a:	6028      	str	r0, [r5, #0]
 8003a3c:	6128      	str	r0, [r5, #16]
 8003a3e:	b930      	cbnz	r0, 8003a4e <_svfiprintf_r+0x32>
 8003a40:	230c      	movs	r3, #12
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	b01d      	add	sp, #116	@ 0x74
 8003a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a4e:	2340      	movs	r3, #64	@ 0x40
 8003a50:	616b      	str	r3, [r5, #20]
 8003a52:	2300      	movs	r3, #0
 8003a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a56:	2320      	movs	r3, #32
 8003a58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a60:	2330      	movs	r3, #48	@ 0x30
 8003a62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c00 <_svfiprintf_r+0x1e4>
 8003a66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a6a:	f04f 0901 	mov.w	r9, #1
 8003a6e:	4623      	mov	r3, r4
 8003a70:	469a      	mov	sl, r3
 8003a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a76:	b10a      	cbz	r2, 8003a7c <_svfiprintf_r+0x60>
 8003a78:	2a25      	cmp	r2, #37	@ 0x25
 8003a7a:	d1f9      	bne.n	8003a70 <_svfiprintf_r+0x54>
 8003a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a80:	d00b      	beq.n	8003a9a <_svfiprintf_r+0x7e>
 8003a82:	465b      	mov	r3, fp
 8003a84:	4622      	mov	r2, r4
 8003a86:	4629      	mov	r1, r5
 8003a88:	4638      	mov	r0, r7
 8003a8a:	f7ff ff6b 	bl	8003964 <__ssputs_r>
 8003a8e:	3001      	adds	r0, #1
 8003a90:	f000 80a7 	beq.w	8003be2 <_svfiprintf_r+0x1c6>
 8003a94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a96:	445a      	add	r2, fp
 8003a98:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 809f 	beq.w	8003be2 <_svfiprintf_r+0x1c6>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aae:	f10a 0a01 	add.w	sl, sl, #1
 8003ab2:	9304      	str	r3, [sp, #16]
 8003ab4:	9307      	str	r3, [sp, #28]
 8003ab6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003aba:	931a      	str	r3, [sp, #104]	@ 0x68
 8003abc:	4654      	mov	r4, sl
 8003abe:	2205      	movs	r2, #5
 8003ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac4:	484e      	ldr	r0, [pc, #312]	@ (8003c00 <_svfiprintf_r+0x1e4>)
 8003ac6:	f7fc fb8b 	bl	80001e0 <memchr>
 8003aca:	9a04      	ldr	r2, [sp, #16]
 8003acc:	b9d8      	cbnz	r0, 8003b06 <_svfiprintf_r+0xea>
 8003ace:	06d0      	lsls	r0, r2, #27
 8003ad0:	bf44      	itt	mi
 8003ad2:	2320      	movmi	r3, #32
 8003ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ad8:	0711      	lsls	r1, r2, #28
 8003ada:	bf44      	itt	mi
 8003adc:	232b      	movmi	r3, #43	@ 0x2b
 8003ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ae8:	d015      	beq.n	8003b16 <_svfiprintf_r+0xfa>
 8003aea:	9a07      	ldr	r2, [sp, #28]
 8003aec:	4654      	mov	r4, sl
 8003aee:	2000      	movs	r0, #0
 8003af0:	f04f 0c0a 	mov.w	ip, #10
 8003af4:	4621      	mov	r1, r4
 8003af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003afa:	3b30      	subs	r3, #48	@ 0x30
 8003afc:	2b09      	cmp	r3, #9
 8003afe:	d94b      	bls.n	8003b98 <_svfiprintf_r+0x17c>
 8003b00:	b1b0      	cbz	r0, 8003b30 <_svfiprintf_r+0x114>
 8003b02:	9207      	str	r2, [sp, #28]
 8003b04:	e014      	b.n	8003b30 <_svfiprintf_r+0x114>
 8003b06:	eba0 0308 	sub.w	r3, r0, r8
 8003b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	9304      	str	r3, [sp, #16]
 8003b12:	46a2      	mov	sl, r4
 8003b14:	e7d2      	b.n	8003abc <_svfiprintf_r+0xa0>
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	1d19      	adds	r1, r3, #4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	9103      	str	r1, [sp, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bfbb      	ittet	lt
 8003b22:	425b      	neglt	r3, r3
 8003b24:	f042 0202 	orrlt.w	r2, r2, #2
 8003b28:	9307      	strge	r3, [sp, #28]
 8003b2a:	9307      	strlt	r3, [sp, #28]
 8003b2c:	bfb8      	it	lt
 8003b2e:	9204      	strlt	r2, [sp, #16]
 8003b30:	7823      	ldrb	r3, [r4, #0]
 8003b32:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b34:	d10a      	bne.n	8003b4c <_svfiprintf_r+0x130>
 8003b36:	7863      	ldrb	r3, [r4, #1]
 8003b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b3a:	d132      	bne.n	8003ba2 <_svfiprintf_r+0x186>
 8003b3c:	9b03      	ldr	r3, [sp, #12]
 8003b3e:	1d1a      	adds	r2, r3, #4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	9203      	str	r2, [sp, #12]
 8003b44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b48:	3402      	adds	r4, #2
 8003b4a:	9305      	str	r3, [sp, #20]
 8003b4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c10 <_svfiprintf_r+0x1f4>
 8003b50:	7821      	ldrb	r1, [r4, #0]
 8003b52:	2203      	movs	r2, #3
 8003b54:	4650      	mov	r0, sl
 8003b56:	f7fc fb43 	bl	80001e0 <memchr>
 8003b5a:	b138      	cbz	r0, 8003b6c <_svfiprintf_r+0x150>
 8003b5c:	9b04      	ldr	r3, [sp, #16]
 8003b5e:	eba0 000a 	sub.w	r0, r0, sl
 8003b62:	2240      	movs	r2, #64	@ 0x40
 8003b64:	4082      	lsls	r2, r0
 8003b66:	4313      	orrs	r3, r2
 8003b68:	3401      	adds	r4, #1
 8003b6a:	9304      	str	r3, [sp, #16]
 8003b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b70:	4824      	ldr	r0, [pc, #144]	@ (8003c04 <_svfiprintf_r+0x1e8>)
 8003b72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b76:	2206      	movs	r2, #6
 8003b78:	f7fc fb32 	bl	80001e0 <memchr>
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	d036      	beq.n	8003bee <_svfiprintf_r+0x1d2>
 8003b80:	4b21      	ldr	r3, [pc, #132]	@ (8003c08 <_svfiprintf_r+0x1ec>)
 8003b82:	bb1b      	cbnz	r3, 8003bcc <_svfiprintf_r+0x1b0>
 8003b84:	9b03      	ldr	r3, [sp, #12]
 8003b86:	3307      	adds	r3, #7
 8003b88:	f023 0307 	bic.w	r3, r3, #7
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b92:	4433      	add	r3, r6
 8003b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b96:	e76a      	b.n	8003a6e <_svfiprintf_r+0x52>
 8003b98:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	e7a8      	b.n	8003af4 <_svfiprintf_r+0xd8>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	3401      	adds	r4, #1
 8003ba6:	9305      	str	r3, [sp, #20]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f04f 0c0a 	mov.w	ip, #10
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bb4:	3a30      	subs	r2, #48	@ 0x30
 8003bb6:	2a09      	cmp	r2, #9
 8003bb8:	d903      	bls.n	8003bc2 <_svfiprintf_r+0x1a6>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0c6      	beq.n	8003b4c <_svfiprintf_r+0x130>
 8003bbe:	9105      	str	r1, [sp, #20]
 8003bc0:	e7c4      	b.n	8003b4c <_svfiprintf_r+0x130>
 8003bc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e7f0      	b.n	8003bae <_svfiprintf_r+0x192>
 8003bcc:	ab03      	add	r3, sp, #12
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	462a      	mov	r2, r5
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003c0c <_svfiprintf_r+0x1f0>)
 8003bd4:	a904      	add	r1, sp, #16
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	f7fd fe6e 	bl	80018b8 <_printf_float>
 8003bdc:	1c42      	adds	r2, r0, #1
 8003bde:	4606      	mov	r6, r0
 8003be0:	d1d6      	bne.n	8003b90 <_svfiprintf_r+0x174>
 8003be2:	89ab      	ldrh	r3, [r5, #12]
 8003be4:	065b      	lsls	r3, r3, #25
 8003be6:	f53f af2d 	bmi.w	8003a44 <_svfiprintf_r+0x28>
 8003bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bec:	e72c      	b.n	8003a48 <_svfiprintf_r+0x2c>
 8003bee:	ab03      	add	r3, sp, #12
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	462a      	mov	r2, r5
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <_svfiprintf_r+0x1f0>)
 8003bf6:	a904      	add	r1, sp, #16
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	f7fe f8f5 	bl	8001de8 <_printf_i>
 8003bfe:	e7ed      	b.n	8003bdc <_svfiprintf_r+0x1c0>
 8003c00:	08004750 	.word	0x08004750
 8003c04:	0800475a 	.word	0x0800475a
 8003c08:	080018b9 	.word	0x080018b9
 8003c0c:	08003965 	.word	0x08003965
 8003c10:	08004756 	.word	0x08004756

08003c14 <__sfputc_r>:
 8003c14:	6893      	ldr	r3, [r2, #8]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	b410      	push	{r4}
 8003c1c:	6093      	str	r3, [r2, #8]
 8003c1e:	da08      	bge.n	8003c32 <__sfputc_r+0x1e>
 8003c20:	6994      	ldr	r4, [r2, #24]
 8003c22:	42a3      	cmp	r3, r4
 8003c24:	db01      	blt.n	8003c2a <__sfputc_r+0x16>
 8003c26:	290a      	cmp	r1, #10
 8003c28:	d103      	bne.n	8003c32 <__sfputc_r+0x1e>
 8003c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c2e:	f000 b9df 	b.w	8003ff0 <__swbuf_r>
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	1c58      	adds	r0, r3, #1
 8003c36:	6010      	str	r0, [r2, #0]
 8003c38:	7019      	strb	r1, [r3, #0]
 8003c3a:	4608      	mov	r0, r1
 8003c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <__sfputs_r>:
 8003c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c44:	4606      	mov	r6, r0
 8003c46:	460f      	mov	r7, r1
 8003c48:	4614      	mov	r4, r2
 8003c4a:	18d5      	adds	r5, r2, r3
 8003c4c:	42ac      	cmp	r4, r5
 8003c4e:	d101      	bne.n	8003c54 <__sfputs_r+0x12>
 8003c50:	2000      	movs	r0, #0
 8003c52:	e007      	b.n	8003c64 <__sfputs_r+0x22>
 8003c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c58:	463a      	mov	r2, r7
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f7ff ffda 	bl	8003c14 <__sfputc_r>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d1f3      	bne.n	8003c4c <__sfputs_r+0xa>
 8003c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c68 <_vfiprintf_r>:
 8003c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c6c:	460d      	mov	r5, r1
 8003c6e:	b09d      	sub	sp, #116	@ 0x74
 8003c70:	4614      	mov	r4, r2
 8003c72:	4698      	mov	r8, r3
 8003c74:	4606      	mov	r6, r0
 8003c76:	b118      	cbz	r0, 8003c80 <_vfiprintf_r+0x18>
 8003c78:	6a03      	ldr	r3, [r0, #32]
 8003c7a:	b90b      	cbnz	r3, 8003c80 <_vfiprintf_r+0x18>
 8003c7c:	f7fe fa60 	bl	8002140 <__sinit>
 8003c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c82:	07d9      	lsls	r1, r3, #31
 8003c84:	d405      	bmi.n	8003c92 <_vfiprintf_r+0x2a>
 8003c86:	89ab      	ldrh	r3, [r5, #12]
 8003c88:	059a      	lsls	r2, r3, #22
 8003c8a:	d402      	bmi.n	8003c92 <_vfiprintf_r+0x2a>
 8003c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c8e:	f7fe fb98 	bl	80023c2 <__retarget_lock_acquire_recursive>
 8003c92:	89ab      	ldrh	r3, [r5, #12]
 8003c94:	071b      	lsls	r3, r3, #28
 8003c96:	d501      	bpl.n	8003c9c <_vfiprintf_r+0x34>
 8003c98:	692b      	ldr	r3, [r5, #16]
 8003c9a:	b99b      	cbnz	r3, 8003cc4 <_vfiprintf_r+0x5c>
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f000 f9e4 	bl	800406c <__swsetup_r>
 8003ca4:	b170      	cbz	r0, 8003cc4 <_vfiprintf_r+0x5c>
 8003ca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ca8:	07dc      	lsls	r4, r3, #31
 8003caa:	d504      	bpl.n	8003cb6 <_vfiprintf_r+0x4e>
 8003cac:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb0:	b01d      	add	sp, #116	@ 0x74
 8003cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb6:	89ab      	ldrh	r3, [r5, #12]
 8003cb8:	0598      	lsls	r0, r3, #22
 8003cba:	d4f7      	bmi.n	8003cac <_vfiprintf_r+0x44>
 8003cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cbe:	f7fe fb81 	bl	80023c4 <__retarget_lock_release_recursive>
 8003cc2:	e7f3      	b.n	8003cac <_vfiprintf_r+0x44>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cc8:	2320      	movs	r3, #32
 8003cca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cd2:	2330      	movs	r3, #48	@ 0x30
 8003cd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003e84 <_vfiprintf_r+0x21c>
 8003cd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cdc:	f04f 0901 	mov.w	r9, #1
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	469a      	mov	sl, r3
 8003ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ce8:	b10a      	cbz	r2, 8003cee <_vfiprintf_r+0x86>
 8003cea:	2a25      	cmp	r2, #37	@ 0x25
 8003cec:	d1f9      	bne.n	8003ce2 <_vfiprintf_r+0x7a>
 8003cee:	ebba 0b04 	subs.w	fp, sl, r4
 8003cf2:	d00b      	beq.n	8003d0c <_vfiprintf_r+0xa4>
 8003cf4:	465b      	mov	r3, fp
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	f7ff ffa1 	bl	8003c42 <__sfputs_r>
 8003d00:	3001      	adds	r0, #1
 8003d02:	f000 80a7 	beq.w	8003e54 <_vfiprintf_r+0x1ec>
 8003d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d08:	445a      	add	r2, fp
 8003d0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 809f 	beq.w	8003e54 <_vfiprintf_r+0x1ec>
 8003d16:	2300      	movs	r3, #0
 8003d18:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d20:	f10a 0a01 	add.w	sl, sl, #1
 8003d24:	9304      	str	r3, [sp, #16]
 8003d26:	9307      	str	r3, [sp, #28]
 8003d28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d2e:	4654      	mov	r4, sl
 8003d30:	2205      	movs	r2, #5
 8003d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d36:	4853      	ldr	r0, [pc, #332]	@ (8003e84 <_vfiprintf_r+0x21c>)
 8003d38:	f7fc fa52 	bl	80001e0 <memchr>
 8003d3c:	9a04      	ldr	r2, [sp, #16]
 8003d3e:	b9d8      	cbnz	r0, 8003d78 <_vfiprintf_r+0x110>
 8003d40:	06d1      	lsls	r1, r2, #27
 8003d42:	bf44      	itt	mi
 8003d44:	2320      	movmi	r3, #32
 8003d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d4a:	0713      	lsls	r3, r2, #28
 8003d4c:	bf44      	itt	mi
 8003d4e:	232b      	movmi	r3, #43	@ 0x2b
 8003d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d54:	f89a 3000 	ldrb.w	r3, [sl]
 8003d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d5a:	d015      	beq.n	8003d88 <_vfiprintf_r+0x120>
 8003d5c:	9a07      	ldr	r2, [sp, #28]
 8003d5e:	4654      	mov	r4, sl
 8003d60:	2000      	movs	r0, #0
 8003d62:	f04f 0c0a 	mov.w	ip, #10
 8003d66:	4621      	mov	r1, r4
 8003d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d6c:	3b30      	subs	r3, #48	@ 0x30
 8003d6e:	2b09      	cmp	r3, #9
 8003d70:	d94b      	bls.n	8003e0a <_vfiprintf_r+0x1a2>
 8003d72:	b1b0      	cbz	r0, 8003da2 <_vfiprintf_r+0x13a>
 8003d74:	9207      	str	r2, [sp, #28]
 8003d76:	e014      	b.n	8003da2 <_vfiprintf_r+0x13a>
 8003d78:	eba0 0308 	sub.w	r3, r0, r8
 8003d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8003d80:	4313      	orrs	r3, r2
 8003d82:	9304      	str	r3, [sp, #16]
 8003d84:	46a2      	mov	sl, r4
 8003d86:	e7d2      	b.n	8003d2e <_vfiprintf_r+0xc6>
 8003d88:	9b03      	ldr	r3, [sp, #12]
 8003d8a:	1d19      	adds	r1, r3, #4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	9103      	str	r1, [sp, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bfbb      	ittet	lt
 8003d94:	425b      	neglt	r3, r3
 8003d96:	f042 0202 	orrlt.w	r2, r2, #2
 8003d9a:	9307      	strge	r3, [sp, #28]
 8003d9c:	9307      	strlt	r3, [sp, #28]
 8003d9e:	bfb8      	it	lt
 8003da0:	9204      	strlt	r2, [sp, #16]
 8003da2:	7823      	ldrb	r3, [r4, #0]
 8003da4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003da6:	d10a      	bne.n	8003dbe <_vfiprintf_r+0x156>
 8003da8:	7863      	ldrb	r3, [r4, #1]
 8003daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dac:	d132      	bne.n	8003e14 <_vfiprintf_r+0x1ac>
 8003dae:	9b03      	ldr	r3, [sp, #12]
 8003db0:	1d1a      	adds	r2, r3, #4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	9203      	str	r2, [sp, #12]
 8003db6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dba:	3402      	adds	r4, #2
 8003dbc:	9305      	str	r3, [sp, #20]
 8003dbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003e94 <_vfiprintf_r+0x22c>
 8003dc2:	7821      	ldrb	r1, [r4, #0]
 8003dc4:	2203      	movs	r2, #3
 8003dc6:	4650      	mov	r0, sl
 8003dc8:	f7fc fa0a 	bl	80001e0 <memchr>
 8003dcc:	b138      	cbz	r0, 8003dde <_vfiprintf_r+0x176>
 8003dce:	9b04      	ldr	r3, [sp, #16]
 8003dd0:	eba0 000a 	sub.w	r0, r0, sl
 8003dd4:	2240      	movs	r2, #64	@ 0x40
 8003dd6:	4082      	lsls	r2, r0
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	3401      	adds	r4, #1
 8003ddc:	9304      	str	r3, [sp, #16]
 8003dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003de2:	4829      	ldr	r0, [pc, #164]	@ (8003e88 <_vfiprintf_r+0x220>)
 8003de4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003de8:	2206      	movs	r2, #6
 8003dea:	f7fc f9f9 	bl	80001e0 <memchr>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d03f      	beq.n	8003e72 <_vfiprintf_r+0x20a>
 8003df2:	4b26      	ldr	r3, [pc, #152]	@ (8003e8c <_vfiprintf_r+0x224>)
 8003df4:	bb1b      	cbnz	r3, 8003e3e <_vfiprintf_r+0x1d6>
 8003df6:	9b03      	ldr	r3, [sp, #12]
 8003df8:	3307      	adds	r3, #7
 8003dfa:	f023 0307 	bic.w	r3, r3, #7
 8003dfe:	3308      	adds	r3, #8
 8003e00:	9303      	str	r3, [sp, #12]
 8003e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e04:	443b      	add	r3, r7
 8003e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e08:	e76a      	b.n	8003ce0 <_vfiprintf_r+0x78>
 8003e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e0e:	460c      	mov	r4, r1
 8003e10:	2001      	movs	r0, #1
 8003e12:	e7a8      	b.n	8003d66 <_vfiprintf_r+0xfe>
 8003e14:	2300      	movs	r3, #0
 8003e16:	3401      	adds	r4, #1
 8003e18:	9305      	str	r3, [sp, #20]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f04f 0c0a 	mov.w	ip, #10
 8003e20:	4620      	mov	r0, r4
 8003e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e26:	3a30      	subs	r2, #48	@ 0x30
 8003e28:	2a09      	cmp	r2, #9
 8003e2a:	d903      	bls.n	8003e34 <_vfiprintf_r+0x1cc>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0c6      	beq.n	8003dbe <_vfiprintf_r+0x156>
 8003e30:	9105      	str	r1, [sp, #20]
 8003e32:	e7c4      	b.n	8003dbe <_vfiprintf_r+0x156>
 8003e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e38:	4604      	mov	r4, r0
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e7f0      	b.n	8003e20 <_vfiprintf_r+0x1b8>
 8003e3e:	ab03      	add	r3, sp, #12
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	462a      	mov	r2, r5
 8003e44:	4b12      	ldr	r3, [pc, #72]	@ (8003e90 <_vfiprintf_r+0x228>)
 8003e46:	a904      	add	r1, sp, #16
 8003e48:	4630      	mov	r0, r6
 8003e4a:	f7fd fd35 	bl	80018b8 <_printf_float>
 8003e4e:	4607      	mov	r7, r0
 8003e50:	1c78      	adds	r0, r7, #1
 8003e52:	d1d6      	bne.n	8003e02 <_vfiprintf_r+0x19a>
 8003e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e56:	07d9      	lsls	r1, r3, #31
 8003e58:	d405      	bmi.n	8003e66 <_vfiprintf_r+0x1fe>
 8003e5a:	89ab      	ldrh	r3, [r5, #12]
 8003e5c:	059a      	lsls	r2, r3, #22
 8003e5e:	d402      	bmi.n	8003e66 <_vfiprintf_r+0x1fe>
 8003e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e62:	f7fe faaf 	bl	80023c4 <__retarget_lock_release_recursive>
 8003e66:	89ab      	ldrh	r3, [r5, #12]
 8003e68:	065b      	lsls	r3, r3, #25
 8003e6a:	f53f af1f 	bmi.w	8003cac <_vfiprintf_r+0x44>
 8003e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e70:	e71e      	b.n	8003cb0 <_vfiprintf_r+0x48>
 8003e72:	ab03      	add	r3, sp, #12
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	462a      	mov	r2, r5
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <_vfiprintf_r+0x228>)
 8003e7a:	a904      	add	r1, sp, #16
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	f7fd ffb3 	bl	8001de8 <_printf_i>
 8003e82:	e7e4      	b.n	8003e4e <_vfiprintf_r+0x1e6>
 8003e84:	08004750 	.word	0x08004750
 8003e88:	0800475a 	.word	0x0800475a
 8003e8c:	080018b9 	.word	0x080018b9
 8003e90:	08003c43 	.word	0x08003c43
 8003e94:	08004756 	.word	0x08004756

08003e98 <__sflush_r>:
 8003e98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea0:	0716      	lsls	r6, r2, #28
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	d454      	bmi.n	8003f52 <__sflush_r+0xba>
 8003ea8:	684b      	ldr	r3, [r1, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	dc02      	bgt.n	8003eb4 <__sflush_r+0x1c>
 8003eae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	dd48      	ble.n	8003f46 <__sflush_r+0xae>
 8003eb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003eb6:	2e00      	cmp	r6, #0
 8003eb8:	d045      	beq.n	8003f46 <__sflush_r+0xae>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ec0:	682f      	ldr	r7, [r5, #0]
 8003ec2:	6a21      	ldr	r1, [r4, #32]
 8003ec4:	602b      	str	r3, [r5, #0]
 8003ec6:	d030      	beq.n	8003f2a <__sflush_r+0x92>
 8003ec8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003eca:	89a3      	ldrh	r3, [r4, #12]
 8003ecc:	0759      	lsls	r1, r3, #29
 8003ece:	d505      	bpl.n	8003edc <__sflush_r+0x44>
 8003ed0:	6863      	ldr	r3, [r4, #4]
 8003ed2:	1ad2      	subs	r2, r2, r3
 8003ed4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ed6:	b10b      	cbz	r3, 8003edc <__sflush_r+0x44>
 8003ed8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003eda:	1ad2      	subs	r2, r2, r3
 8003edc:	2300      	movs	r3, #0
 8003ede:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ee0:	6a21      	ldr	r1, [r4, #32]
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	47b0      	blx	r6
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	d106      	bne.n	8003efa <__sflush_r+0x62>
 8003eec:	6829      	ldr	r1, [r5, #0]
 8003eee:	291d      	cmp	r1, #29
 8003ef0:	d82b      	bhi.n	8003f4a <__sflush_r+0xb2>
 8003ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f9c <__sflush_r+0x104>)
 8003ef4:	410a      	asrs	r2, r1
 8003ef6:	07d6      	lsls	r6, r2, #31
 8003ef8:	d427      	bmi.n	8003f4a <__sflush_r+0xb2>
 8003efa:	2200      	movs	r2, #0
 8003efc:	6062      	str	r2, [r4, #4]
 8003efe:	04d9      	lsls	r1, r3, #19
 8003f00:	6922      	ldr	r2, [r4, #16]
 8003f02:	6022      	str	r2, [r4, #0]
 8003f04:	d504      	bpl.n	8003f10 <__sflush_r+0x78>
 8003f06:	1c42      	adds	r2, r0, #1
 8003f08:	d101      	bne.n	8003f0e <__sflush_r+0x76>
 8003f0a:	682b      	ldr	r3, [r5, #0]
 8003f0c:	b903      	cbnz	r3, 8003f10 <__sflush_r+0x78>
 8003f0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f12:	602f      	str	r7, [r5, #0]
 8003f14:	b1b9      	cbz	r1, 8003f46 <__sflush_r+0xae>
 8003f16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f1a:	4299      	cmp	r1, r3
 8003f1c:	d002      	beq.n	8003f24 <__sflush_r+0x8c>
 8003f1e:	4628      	mov	r0, r5
 8003f20:	f7ff f89e 	bl	8003060 <_free_r>
 8003f24:	2300      	movs	r3, #0
 8003f26:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f28:	e00d      	b.n	8003f46 <__sflush_r+0xae>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	47b0      	blx	r6
 8003f30:	4602      	mov	r2, r0
 8003f32:	1c50      	adds	r0, r2, #1
 8003f34:	d1c9      	bne.n	8003eca <__sflush_r+0x32>
 8003f36:	682b      	ldr	r3, [r5, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0c6      	beq.n	8003eca <__sflush_r+0x32>
 8003f3c:	2b1d      	cmp	r3, #29
 8003f3e:	d001      	beq.n	8003f44 <__sflush_r+0xac>
 8003f40:	2b16      	cmp	r3, #22
 8003f42:	d11e      	bne.n	8003f82 <__sflush_r+0xea>
 8003f44:	602f      	str	r7, [r5, #0]
 8003f46:	2000      	movs	r0, #0
 8003f48:	e022      	b.n	8003f90 <__sflush_r+0xf8>
 8003f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f4e:	b21b      	sxth	r3, r3
 8003f50:	e01b      	b.n	8003f8a <__sflush_r+0xf2>
 8003f52:	690f      	ldr	r7, [r1, #16]
 8003f54:	2f00      	cmp	r7, #0
 8003f56:	d0f6      	beq.n	8003f46 <__sflush_r+0xae>
 8003f58:	0793      	lsls	r3, r2, #30
 8003f5a:	680e      	ldr	r6, [r1, #0]
 8003f5c:	bf08      	it	eq
 8003f5e:	694b      	ldreq	r3, [r1, #20]
 8003f60:	600f      	str	r7, [r1, #0]
 8003f62:	bf18      	it	ne
 8003f64:	2300      	movne	r3, #0
 8003f66:	eba6 0807 	sub.w	r8, r6, r7
 8003f6a:	608b      	str	r3, [r1, #8]
 8003f6c:	f1b8 0f00 	cmp.w	r8, #0
 8003f70:	dde9      	ble.n	8003f46 <__sflush_r+0xae>
 8003f72:	6a21      	ldr	r1, [r4, #32]
 8003f74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003f76:	4643      	mov	r3, r8
 8003f78:	463a      	mov	r2, r7
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	47b0      	blx	r6
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	dc08      	bgt.n	8003f94 <__sflush_r+0xfc>
 8003f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f8a:	81a3      	strh	r3, [r4, #12]
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f94:	4407      	add	r7, r0
 8003f96:	eba8 0800 	sub.w	r8, r8, r0
 8003f9a:	e7e7      	b.n	8003f6c <__sflush_r+0xd4>
 8003f9c:	dfbffffe 	.word	0xdfbffffe

08003fa0 <_fflush_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	690b      	ldr	r3, [r1, #16]
 8003fa4:	4605      	mov	r5, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	b913      	cbnz	r3, 8003fb0 <_fflush_r+0x10>
 8003faa:	2500      	movs	r5, #0
 8003fac:	4628      	mov	r0, r5
 8003fae:	bd38      	pop	{r3, r4, r5, pc}
 8003fb0:	b118      	cbz	r0, 8003fba <_fflush_r+0x1a>
 8003fb2:	6a03      	ldr	r3, [r0, #32]
 8003fb4:	b90b      	cbnz	r3, 8003fba <_fflush_r+0x1a>
 8003fb6:	f7fe f8c3 	bl	8002140 <__sinit>
 8003fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f3      	beq.n	8003faa <_fflush_r+0xa>
 8003fc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003fc4:	07d0      	lsls	r0, r2, #31
 8003fc6:	d404      	bmi.n	8003fd2 <_fflush_r+0x32>
 8003fc8:	0599      	lsls	r1, r3, #22
 8003fca:	d402      	bmi.n	8003fd2 <_fflush_r+0x32>
 8003fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fce:	f7fe f9f8 	bl	80023c2 <__retarget_lock_acquire_recursive>
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	f7ff ff5f 	bl	8003e98 <__sflush_r>
 8003fda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fdc:	07da      	lsls	r2, r3, #31
 8003fde:	4605      	mov	r5, r0
 8003fe0:	d4e4      	bmi.n	8003fac <_fflush_r+0xc>
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	059b      	lsls	r3, r3, #22
 8003fe6:	d4e1      	bmi.n	8003fac <_fflush_r+0xc>
 8003fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fea:	f7fe f9eb 	bl	80023c4 <__retarget_lock_release_recursive>
 8003fee:	e7dd      	b.n	8003fac <_fflush_r+0xc>

08003ff0 <__swbuf_r>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	460e      	mov	r6, r1
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	4605      	mov	r5, r0
 8003ff8:	b118      	cbz	r0, 8004002 <__swbuf_r+0x12>
 8003ffa:	6a03      	ldr	r3, [r0, #32]
 8003ffc:	b90b      	cbnz	r3, 8004002 <__swbuf_r+0x12>
 8003ffe:	f7fe f89f 	bl	8002140 <__sinit>
 8004002:	69a3      	ldr	r3, [r4, #24]
 8004004:	60a3      	str	r3, [r4, #8]
 8004006:	89a3      	ldrh	r3, [r4, #12]
 8004008:	071a      	lsls	r2, r3, #28
 800400a:	d501      	bpl.n	8004010 <__swbuf_r+0x20>
 800400c:	6923      	ldr	r3, [r4, #16]
 800400e:	b943      	cbnz	r3, 8004022 <__swbuf_r+0x32>
 8004010:	4621      	mov	r1, r4
 8004012:	4628      	mov	r0, r5
 8004014:	f000 f82a 	bl	800406c <__swsetup_r>
 8004018:	b118      	cbz	r0, 8004022 <__swbuf_r+0x32>
 800401a:	f04f 37ff 	mov.w	r7, #4294967295
 800401e:	4638      	mov	r0, r7
 8004020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	6922      	ldr	r2, [r4, #16]
 8004026:	1a98      	subs	r0, r3, r2
 8004028:	6963      	ldr	r3, [r4, #20]
 800402a:	b2f6      	uxtb	r6, r6
 800402c:	4283      	cmp	r3, r0
 800402e:	4637      	mov	r7, r6
 8004030:	dc05      	bgt.n	800403e <__swbuf_r+0x4e>
 8004032:	4621      	mov	r1, r4
 8004034:	4628      	mov	r0, r5
 8004036:	f7ff ffb3 	bl	8003fa0 <_fflush_r>
 800403a:	2800      	cmp	r0, #0
 800403c:	d1ed      	bne.n	800401a <__swbuf_r+0x2a>
 800403e:	68a3      	ldr	r3, [r4, #8]
 8004040:	3b01      	subs	r3, #1
 8004042:	60a3      	str	r3, [r4, #8]
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	6022      	str	r2, [r4, #0]
 800404a:	701e      	strb	r6, [r3, #0]
 800404c:	6962      	ldr	r2, [r4, #20]
 800404e:	1c43      	adds	r3, r0, #1
 8004050:	429a      	cmp	r2, r3
 8004052:	d004      	beq.n	800405e <__swbuf_r+0x6e>
 8004054:	89a3      	ldrh	r3, [r4, #12]
 8004056:	07db      	lsls	r3, r3, #31
 8004058:	d5e1      	bpl.n	800401e <__swbuf_r+0x2e>
 800405a:	2e0a      	cmp	r6, #10
 800405c:	d1df      	bne.n	800401e <__swbuf_r+0x2e>
 800405e:	4621      	mov	r1, r4
 8004060:	4628      	mov	r0, r5
 8004062:	f7ff ff9d 	bl	8003fa0 <_fflush_r>
 8004066:	2800      	cmp	r0, #0
 8004068:	d0d9      	beq.n	800401e <__swbuf_r+0x2e>
 800406a:	e7d6      	b.n	800401a <__swbuf_r+0x2a>

0800406c <__swsetup_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4b29      	ldr	r3, [pc, #164]	@ (8004114 <__swsetup_r+0xa8>)
 8004070:	4605      	mov	r5, r0
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	460c      	mov	r4, r1
 8004076:	b118      	cbz	r0, 8004080 <__swsetup_r+0x14>
 8004078:	6a03      	ldr	r3, [r0, #32]
 800407a:	b90b      	cbnz	r3, 8004080 <__swsetup_r+0x14>
 800407c:	f7fe f860 	bl	8002140 <__sinit>
 8004080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004084:	0719      	lsls	r1, r3, #28
 8004086:	d422      	bmi.n	80040ce <__swsetup_r+0x62>
 8004088:	06da      	lsls	r2, r3, #27
 800408a:	d407      	bmi.n	800409c <__swsetup_r+0x30>
 800408c:	2209      	movs	r2, #9
 800408e:	602a      	str	r2, [r5, #0]
 8004090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004094:	81a3      	strh	r3, [r4, #12]
 8004096:	f04f 30ff 	mov.w	r0, #4294967295
 800409a:	e033      	b.n	8004104 <__swsetup_r+0x98>
 800409c:	0758      	lsls	r0, r3, #29
 800409e:	d512      	bpl.n	80040c6 <__swsetup_r+0x5a>
 80040a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040a2:	b141      	cbz	r1, 80040b6 <__swsetup_r+0x4a>
 80040a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040a8:	4299      	cmp	r1, r3
 80040aa:	d002      	beq.n	80040b2 <__swsetup_r+0x46>
 80040ac:	4628      	mov	r0, r5
 80040ae:	f7fe ffd7 	bl	8003060 <_free_r>
 80040b2:	2300      	movs	r3, #0
 80040b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80040bc:	81a3      	strh	r3, [r4, #12]
 80040be:	2300      	movs	r3, #0
 80040c0:	6063      	str	r3, [r4, #4]
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	f043 0308 	orr.w	r3, r3, #8
 80040cc:	81a3      	strh	r3, [r4, #12]
 80040ce:	6923      	ldr	r3, [r4, #16]
 80040d0:	b94b      	cbnz	r3, 80040e6 <__swsetup_r+0x7a>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80040d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040dc:	d003      	beq.n	80040e6 <__swsetup_r+0x7a>
 80040de:	4621      	mov	r1, r4
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f909 	bl	80042f8 <__smakebuf_r>
 80040e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ea:	f013 0201 	ands.w	r2, r3, #1
 80040ee:	d00a      	beq.n	8004106 <__swsetup_r+0x9a>
 80040f0:	2200      	movs	r2, #0
 80040f2:	60a2      	str	r2, [r4, #8]
 80040f4:	6962      	ldr	r2, [r4, #20]
 80040f6:	4252      	negs	r2, r2
 80040f8:	61a2      	str	r2, [r4, #24]
 80040fa:	6922      	ldr	r2, [r4, #16]
 80040fc:	b942      	cbnz	r2, 8004110 <__swsetup_r+0xa4>
 80040fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004102:	d1c5      	bne.n	8004090 <__swsetup_r+0x24>
 8004104:	bd38      	pop	{r3, r4, r5, pc}
 8004106:	0799      	lsls	r1, r3, #30
 8004108:	bf58      	it	pl
 800410a:	6962      	ldrpl	r2, [r4, #20]
 800410c:	60a2      	str	r2, [r4, #8]
 800410e:	e7f4      	b.n	80040fa <__swsetup_r+0x8e>
 8004110:	2000      	movs	r0, #0
 8004112:	e7f7      	b.n	8004104 <__swsetup_r+0x98>
 8004114:	2000000c 	.word	0x2000000c

08004118 <memmove>:
 8004118:	4288      	cmp	r0, r1
 800411a:	b510      	push	{r4, lr}
 800411c:	eb01 0402 	add.w	r4, r1, r2
 8004120:	d902      	bls.n	8004128 <memmove+0x10>
 8004122:	4284      	cmp	r4, r0
 8004124:	4623      	mov	r3, r4
 8004126:	d807      	bhi.n	8004138 <memmove+0x20>
 8004128:	1e43      	subs	r3, r0, #1
 800412a:	42a1      	cmp	r1, r4
 800412c:	d008      	beq.n	8004140 <memmove+0x28>
 800412e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004132:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004136:	e7f8      	b.n	800412a <memmove+0x12>
 8004138:	4402      	add	r2, r0
 800413a:	4601      	mov	r1, r0
 800413c:	428a      	cmp	r2, r1
 800413e:	d100      	bne.n	8004142 <memmove+0x2a>
 8004140:	bd10      	pop	{r4, pc}
 8004142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800414a:	e7f7      	b.n	800413c <memmove+0x24>

0800414c <_sbrk_r>:
 800414c:	b538      	push	{r3, r4, r5, lr}
 800414e:	4d06      	ldr	r5, [pc, #24]	@ (8004168 <_sbrk_r+0x1c>)
 8004150:	2300      	movs	r3, #0
 8004152:	4604      	mov	r4, r0
 8004154:	4608      	mov	r0, r1
 8004156:	602b      	str	r3, [r5, #0]
 8004158:	f7fc fe66 	bl	8000e28 <_sbrk>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_sbrk_r+0x1a>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_sbrk_r+0x1a>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	20000344 	.word	0x20000344

0800416c <memcpy>:
 800416c:	440a      	add	r2, r1
 800416e:	4291      	cmp	r1, r2
 8004170:	f100 33ff 	add.w	r3, r0, #4294967295
 8004174:	d100      	bne.n	8004178 <memcpy+0xc>
 8004176:	4770      	bx	lr
 8004178:	b510      	push	{r4, lr}
 800417a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800417e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004182:	4291      	cmp	r1, r2
 8004184:	d1f9      	bne.n	800417a <memcpy+0xe>
 8004186:	bd10      	pop	{r4, pc}

08004188 <__assert_func>:
 8004188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800418a:	4614      	mov	r4, r2
 800418c:	461a      	mov	r2, r3
 800418e:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <__assert_func+0x2c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4605      	mov	r5, r0
 8004194:	68d8      	ldr	r0, [r3, #12]
 8004196:	b954      	cbnz	r4, 80041ae <__assert_func+0x26>
 8004198:	4b07      	ldr	r3, [pc, #28]	@ (80041b8 <__assert_func+0x30>)
 800419a:	461c      	mov	r4, r3
 800419c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80041a0:	9100      	str	r1, [sp, #0]
 80041a2:	462b      	mov	r3, r5
 80041a4:	4905      	ldr	r1, [pc, #20]	@ (80041bc <__assert_func+0x34>)
 80041a6:	f000 f86f 	bl	8004288 <fiprintf>
 80041aa:	f000 f903 	bl	80043b4 <abort>
 80041ae:	4b04      	ldr	r3, [pc, #16]	@ (80041c0 <__assert_func+0x38>)
 80041b0:	e7f4      	b.n	800419c <__assert_func+0x14>
 80041b2:	bf00      	nop
 80041b4:	2000000c 	.word	0x2000000c
 80041b8:	080047a6 	.word	0x080047a6
 80041bc:	08004778 	.word	0x08004778
 80041c0:	0800476b 	.word	0x0800476b

080041c4 <_calloc_r>:
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	fba1 5402 	umull	r5, r4, r1, r2
 80041ca:	b93c      	cbnz	r4, 80041dc <_calloc_r+0x18>
 80041cc:	4629      	mov	r1, r5
 80041ce:	f7fe ffbb 	bl	8003148 <_malloc_r>
 80041d2:	4606      	mov	r6, r0
 80041d4:	b928      	cbnz	r0, 80041e2 <_calloc_r+0x1e>
 80041d6:	2600      	movs	r6, #0
 80041d8:	4630      	mov	r0, r6
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	220c      	movs	r2, #12
 80041de:	6002      	str	r2, [r0, #0]
 80041e0:	e7f9      	b.n	80041d6 <_calloc_r+0x12>
 80041e2:	462a      	mov	r2, r5
 80041e4:	4621      	mov	r1, r4
 80041e6:	f7fe f86f 	bl	80022c8 <memset>
 80041ea:	e7f5      	b.n	80041d8 <_calloc_r+0x14>

080041ec <__ascii_mbtowc>:
 80041ec:	b082      	sub	sp, #8
 80041ee:	b901      	cbnz	r1, 80041f2 <__ascii_mbtowc+0x6>
 80041f0:	a901      	add	r1, sp, #4
 80041f2:	b142      	cbz	r2, 8004206 <__ascii_mbtowc+0x1a>
 80041f4:	b14b      	cbz	r3, 800420a <__ascii_mbtowc+0x1e>
 80041f6:	7813      	ldrb	r3, [r2, #0]
 80041f8:	600b      	str	r3, [r1, #0]
 80041fa:	7812      	ldrb	r2, [r2, #0]
 80041fc:	1e10      	subs	r0, r2, #0
 80041fe:	bf18      	it	ne
 8004200:	2001      	movne	r0, #1
 8004202:	b002      	add	sp, #8
 8004204:	4770      	bx	lr
 8004206:	4610      	mov	r0, r2
 8004208:	e7fb      	b.n	8004202 <__ascii_mbtowc+0x16>
 800420a:	f06f 0001 	mvn.w	r0, #1
 800420e:	e7f8      	b.n	8004202 <__ascii_mbtowc+0x16>

08004210 <_realloc_r>:
 8004210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004214:	4680      	mov	r8, r0
 8004216:	4615      	mov	r5, r2
 8004218:	460c      	mov	r4, r1
 800421a:	b921      	cbnz	r1, 8004226 <_realloc_r+0x16>
 800421c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004220:	4611      	mov	r1, r2
 8004222:	f7fe bf91 	b.w	8003148 <_malloc_r>
 8004226:	b92a      	cbnz	r2, 8004234 <_realloc_r+0x24>
 8004228:	f7fe ff1a 	bl	8003060 <_free_r>
 800422c:	2400      	movs	r4, #0
 800422e:	4620      	mov	r0, r4
 8004230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004234:	f000 f8c5 	bl	80043c2 <_malloc_usable_size_r>
 8004238:	4285      	cmp	r5, r0
 800423a:	4606      	mov	r6, r0
 800423c:	d802      	bhi.n	8004244 <_realloc_r+0x34>
 800423e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004242:	d8f4      	bhi.n	800422e <_realloc_r+0x1e>
 8004244:	4629      	mov	r1, r5
 8004246:	4640      	mov	r0, r8
 8004248:	f7fe ff7e 	bl	8003148 <_malloc_r>
 800424c:	4607      	mov	r7, r0
 800424e:	2800      	cmp	r0, #0
 8004250:	d0ec      	beq.n	800422c <_realloc_r+0x1c>
 8004252:	42b5      	cmp	r5, r6
 8004254:	462a      	mov	r2, r5
 8004256:	4621      	mov	r1, r4
 8004258:	bf28      	it	cs
 800425a:	4632      	movcs	r2, r6
 800425c:	f7ff ff86 	bl	800416c <memcpy>
 8004260:	4621      	mov	r1, r4
 8004262:	4640      	mov	r0, r8
 8004264:	f7fe fefc 	bl	8003060 <_free_r>
 8004268:	463c      	mov	r4, r7
 800426a:	e7e0      	b.n	800422e <_realloc_r+0x1e>

0800426c <__ascii_wctomb>:
 800426c:	4603      	mov	r3, r0
 800426e:	4608      	mov	r0, r1
 8004270:	b141      	cbz	r1, 8004284 <__ascii_wctomb+0x18>
 8004272:	2aff      	cmp	r2, #255	@ 0xff
 8004274:	d904      	bls.n	8004280 <__ascii_wctomb+0x14>
 8004276:	228a      	movs	r2, #138	@ 0x8a
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	f04f 30ff 	mov.w	r0, #4294967295
 800427e:	4770      	bx	lr
 8004280:	700a      	strb	r2, [r1, #0]
 8004282:	2001      	movs	r0, #1
 8004284:	4770      	bx	lr
	...

08004288 <fiprintf>:
 8004288:	b40e      	push	{r1, r2, r3}
 800428a:	b503      	push	{r0, r1, lr}
 800428c:	4601      	mov	r1, r0
 800428e:	ab03      	add	r3, sp, #12
 8004290:	4805      	ldr	r0, [pc, #20]	@ (80042a8 <fiprintf+0x20>)
 8004292:	f853 2b04 	ldr.w	r2, [r3], #4
 8004296:	6800      	ldr	r0, [r0, #0]
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	f7ff fce5 	bl	8003c68 <_vfiprintf_r>
 800429e:	b002      	add	sp, #8
 80042a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80042a4:	b003      	add	sp, #12
 80042a6:	4770      	bx	lr
 80042a8:	2000000c 	.word	0x2000000c

080042ac <__swhatbuf_r>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	460c      	mov	r4, r1
 80042b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b4:	2900      	cmp	r1, #0
 80042b6:	b096      	sub	sp, #88	@ 0x58
 80042b8:	4615      	mov	r5, r2
 80042ba:	461e      	mov	r6, r3
 80042bc:	da0d      	bge.n	80042da <__swhatbuf_r+0x2e>
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	bf14      	ite	ne
 80042ca:	2340      	movne	r3, #64	@ 0x40
 80042cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80042d0:	2000      	movs	r0, #0
 80042d2:	6031      	str	r1, [r6, #0]
 80042d4:	602b      	str	r3, [r5, #0]
 80042d6:	b016      	add	sp, #88	@ 0x58
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
 80042da:	466a      	mov	r2, sp
 80042dc:	f000 f848 	bl	8004370 <_fstat_r>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	dbec      	blt.n	80042be <__swhatbuf_r+0x12>
 80042e4:	9901      	ldr	r1, [sp, #4]
 80042e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80042ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80042ee:	4259      	negs	r1, r3
 80042f0:	4159      	adcs	r1, r3
 80042f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042f6:	e7eb      	b.n	80042d0 <__swhatbuf_r+0x24>

080042f8 <__smakebuf_r>:
 80042f8:	898b      	ldrh	r3, [r1, #12]
 80042fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042fc:	079d      	lsls	r5, r3, #30
 80042fe:	4606      	mov	r6, r0
 8004300:	460c      	mov	r4, r1
 8004302:	d507      	bpl.n	8004314 <__smakebuf_r+0x1c>
 8004304:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	6123      	str	r3, [r4, #16]
 800430c:	2301      	movs	r3, #1
 800430e:	6163      	str	r3, [r4, #20]
 8004310:	b003      	add	sp, #12
 8004312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004314:	ab01      	add	r3, sp, #4
 8004316:	466a      	mov	r2, sp
 8004318:	f7ff ffc8 	bl	80042ac <__swhatbuf_r>
 800431c:	9f00      	ldr	r7, [sp, #0]
 800431e:	4605      	mov	r5, r0
 8004320:	4639      	mov	r1, r7
 8004322:	4630      	mov	r0, r6
 8004324:	f7fe ff10 	bl	8003148 <_malloc_r>
 8004328:	b948      	cbnz	r0, 800433e <__smakebuf_r+0x46>
 800432a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800432e:	059a      	lsls	r2, r3, #22
 8004330:	d4ee      	bmi.n	8004310 <__smakebuf_r+0x18>
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	f043 0302 	orr.w	r3, r3, #2
 800433a:	81a3      	strh	r3, [r4, #12]
 800433c:	e7e2      	b.n	8004304 <__smakebuf_r+0xc>
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	6020      	str	r0, [r4, #0]
 8004342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	9b01      	ldr	r3, [sp, #4]
 800434a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800434e:	b15b      	cbz	r3, 8004368 <__smakebuf_r+0x70>
 8004350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004354:	4630      	mov	r0, r6
 8004356:	f000 f81d 	bl	8004394 <_isatty_r>
 800435a:	b128      	cbz	r0, 8004368 <__smakebuf_r+0x70>
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	81a3      	strh	r3, [r4, #12]
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	431d      	orrs	r5, r3
 800436c:	81a5      	strh	r5, [r4, #12]
 800436e:	e7cf      	b.n	8004310 <__smakebuf_r+0x18>

08004370 <_fstat_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4d07      	ldr	r5, [pc, #28]	@ (8004390 <_fstat_r+0x20>)
 8004374:	2300      	movs	r3, #0
 8004376:	4604      	mov	r4, r0
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	f7fc fd2a 	bl	8000dd6 <_fstat>
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	d102      	bne.n	800438c <_fstat_r+0x1c>
 8004386:	682b      	ldr	r3, [r5, #0]
 8004388:	b103      	cbz	r3, 800438c <_fstat_r+0x1c>
 800438a:	6023      	str	r3, [r4, #0]
 800438c:	bd38      	pop	{r3, r4, r5, pc}
 800438e:	bf00      	nop
 8004390:	20000344 	.word	0x20000344

08004394 <_isatty_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4d06      	ldr	r5, [pc, #24]	@ (80043b0 <_isatty_r+0x1c>)
 8004398:	2300      	movs	r3, #0
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	f7fc fd29 	bl	8000df6 <_isatty>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_isatty_r+0x1a>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_isatty_r+0x1a>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20000344 	.word	0x20000344

080043b4 <abort>:
 80043b4:	b508      	push	{r3, lr}
 80043b6:	2006      	movs	r0, #6
 80043b8:	f000 f834 	bl	8004424 <raise>
 80043bc:	2001      	movs	r0, #1
 80043be:	f7fc fcba 	bl	8000d36 <_exit>

080043c2 <_malloc_usable_size_r>:
 80043c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c6:	1f18      	subs	r0, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bfbc      	itt	lt
 80043cc:	580b      	ldrlt	r3, [r1, r0]
 80043ce:	18c0      	addlt	r0, r0, r3
 80043d0:	4770      	bx	lr

080043d2 <_raise_r>:
 80043d2:	291f      	cmp	r1, #31
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4605      	mov	r5, r0
 80043d8:	460c      	mov	r4, r1
 80043da:	d904      	bls.n	80043e6 <_raise_r+0x14>
 80043dc:	2316      	movs	r3, #22
 80043de:	6003      	str	r3, [r0, #0]
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	bd38      	pop	{r3, r4, r5, pc}
 80043e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80043e8:	b112      	cbz	r2, 80043f0 <_raise_r+0x1e>
 80043ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80043ee:	b94b      	cbnz	r3, 8004404 <_raise_r+0x32>
 80043f0:	4628      	mov	r0, r5
 80043f2:	f000 f831 	bl	8004458 <_getpid_r>
 80043f6:	4622      	mov	r2, r4
 80043f8:	4601      	mov	r1, r0
 80043fa:	4628      	mov	r0, r5
 80043fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004400:	f000 b818 	b.w	8004434 <_kill_r>
 8004404:	2b01      	cmp	r3, #1
 8004406:	d00a      	beq.n	800441e <_raise_r+0x4c>
 8004408:	1c59      	adds	r1, r3, #1
 800440a:	d103      	bne.n	8004414 <_raise_r+0x42>
 800440c:	2316      	movs	r3, #22
 800440e:	6003      	str	r3, [r0, #0]
 8004410:	2001      	movs	r0, #1
 8004412:	e7e7      	b.n	80043e4 <_raise_r+0x12>
 8004414:	2100      	movs	r1, #0
 8004416:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800441a:	4620      	mov	r0, r4
 800441c:	4798      	blx	r3
 800441e:	2000      	movs	r0, #0
 8004420:	e7e0      	b.n	80043e4 <_raise_r+0x12>
	...

08004424 <raise>:
 8004424:	4b02      	ldr	r3, [pc, #8]	@ (8004430 <raise+0xc>)
 8004426:	4601      	mov	r1, r0
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	f7ff bfd2 	b.w	80043d2 <_raise_r>
 800442e:	bf00      	nop
 8004430:	2000000c 	.word	0x2000000c

08004434 <_kill_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4d07      	ldr	r5, [pc, #28]	@ (8004454 <_kill_r+0x20>)
 8004438:	2300      	movs	r3, #0
 800443a:	4604      	mov	r4, r0
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	602b      	str	r3, [r5, #0]
 8004442:	f7fc fc68 	bl	8000d16 <_kill>
 8004446:	1c43      	adds	r3, r0, #1
 8004448:	d102      	bne.n	8004450 <_kill_r+0x1c>
 800444a:	682b      	ldr	r3, [r5, #0]
 800444c:	b103      	cbz	r3, 8004450 <_kill_r+0x1c>
 800444e:	6023      	str	r3, [r4, #0]
 8004450:	bd38      	pop	{r3, r4, r5, pc}
 8004452:	bf00      	nop
 8004454:	20000344 	.word	0x20000344

08004458 <_getpid_r>:
 8004458:	f7fc bc55 	b.w	8000d06 <_getpid>

0800445c <_init>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	bf00      	nop
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr

08004468 <_fini>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	bf00      	nop
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr
