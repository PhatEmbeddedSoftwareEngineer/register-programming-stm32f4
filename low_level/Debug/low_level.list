
low_level.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000136c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800150c  0800150c  0000250c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001574  08001574  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001574  08001574  00002574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800157c  0800157c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800157c  0800157c  0000257c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001580  08001580  00002580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001584  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000005c  080015e0  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  080015e0  000031d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000185d  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007b3  00000000  00000000  000048e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  000050a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000110  00000000  00000000  00005230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002147  00000000  00000000  00005340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002237  00000000  00000000  00007487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a99b  00000000  00000000  000096be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00014059  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c5c  00000000  00000000  0001409c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00014cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014f4 	.word	0x080014f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080014f4 	.word	0x080014f4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <callBack>:
    init->cnt =0;   
}
// we are continue , demo code with even external interrupt on gpio 

static void callBack(event_t *process)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    printf("even come from EXTI13 line:= %d and cnt:= %d\n", process->evenISR= !process->evenISR, ++process->cnt);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	bf14      	ite	ne
 8000292:	2301      	movne	r3, #1
 8000294:	2300      	moveq	r3, #0
 8000296:	b2db      	uxtb	r3, r3
 8000298:	f083 0301 	eor.w	r3, r3, #1
 800029c:	b2db      	uxtb	r3, r3
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4611      	mov	r1, r2
 80002a8:	7019      	strb	r1, [r3, #0]
 80002aa:	4611      	mov	r1, r2
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	3301      	adds	r3, #1
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	6053      	str	r3, [r2, #4]
 80002b6:	461a      	mov	r2, r3
 80002b8:	4803      	ldr	r0, [pc, #12]	@ (80002c8 <callBack+0x48>)
 80002ba:	f000 faad 	bl	8000818 <iprintf>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	0800150c 	.word	0x0800150c

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    if((EXTI->EXTI_PR & (1U << 13)))
 80002d0:	4b08      	ldr	r3, [pc, #32]	@ (80002f4 <EXTI15_10_IRQHandler+0x28>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
    {
        EXTI->EXTI_PR |= (1U << 13);
 80002dc:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <EXTI15_10_IRQHandler+0x28>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a04      	ldr	r2, [pc, #16]	@ (80002f4 <EXTI15_10_IRQHandler+0x28>)
 80002e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002e6:	6153      	str	r3, [r2, #20]
        callBack(&_even);
 80002e8:	4803      	ldr	r0, [pc, #12]	@ (80002f8 <EXTI15_10_IRQHandler+0x2c>)
 80002ea:	f7ff ffc9 	bl	8000280 <callBack>
    }
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40013c00 	.word	0x40013c00
 80002f8:	20000078 	.word	0x20000078

080002fc <main>:
// hello my name is Phat ^^ to day I intoduce uart rx config 
#define PIN5					(1U<<5)
#define LED_PIN					PIN5
void processDataFromISRUsart(Handle_variable_t *_data);
int main()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	myData.data=0;
 8000300:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <main+0x1c>)
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
	myData.haveISR=false;
 8000306:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <main+0x1c>)
 8000308:	2200      	movs	r2, #0
 800030a:	705a      	strb	r2, [r3, #1]
	// set pin 26 to 1
	// set pin 27 to 0
	// GPIOC->GPIO_PUPDR |= (1U << 26);
	// GPIOC->GPIO_PUPDR &= ~(1U << 27);
	/***************************************************************************** */
	uart1_rxtx();
 800030c:	f000 f8f0 	bl	80004f0 <uart1_rxtx>
	/********************************************************************* */
	//pc13_init_exti();

	while(1)
	{
		processDataFromISRUsart(&myData);
 8000310:	4801      	ldr	r0, [pc, #4]	@ (8000318 <main+0x1c>)
 8000312:	f000 f803 	bl	800031c <processDataFromISRUsart>
 8000316:	e7fb      	b.n	8000310 <main+0x14>
 8000318:	20000080 	.word	0x20000080

0800031c <processDataFromISRUsart>:
		
	}
}

void processDataFromISRUsart(Handle_variable_t *_data)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]

	if(_data->haveISR)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	785b      	ldrb	r3, [r3, #1]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	d00e      	beq.n	800034c <processDataFromISRUsart+0x30>
	{
		if(_data->data != 0)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2b00      	cmp	r3, #0
 8000336:	d006      	beq.n	8000346 <processDataFromISRUsart+0x2a>
		{
			printf("%c\n",_data->data);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	b2db      	uxtb	r3, r3
 800033e:	4619      	mov	r1, r3
 8000340:	480c      	ldr	r0, [pc, #48]	@ (8000374 <processDataFromISRUsart+0x58>)
 8000342:	f000 fa69 	bl	8000818 <iprintf>

		}
		_data->haveISR=false;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	705a      	strb	r2, [r3, #1]
	}
	if(!_data->haveISR && _data->data != 0)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	785b      	ldrb	r3, [r3, #1]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	f083 0301 	eor.w	r3, r3, #1
 8000356:	b2db      	uxtb	r3, r3
 8000358:	2b00      	cmp	r3, #0
 800035a:	d007      	beq.n	800036c <processDataFromISRUsart+0x50>
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d002      	beq.n	800036c <processDataFromISRUsart+0x50>
	{
		_data->data =0;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
	}
	

}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	0800153c 	.word	0x0800153c

08000378 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]
 8000388:	e00a      	b.n	80003a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800038a:	f3af 8000 	nop.w
 800038e:	4601      	mov	r1, r0
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	1c5a      	adds	r2, r3, #1
 8000394:	60ba      	str	r2, [r7, #8]
 8000396:	b2ca      	uxtb	r2, r1
 8000398:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	3301      	adds	r3, #1
 800039e:	617b      	str	r3, [r7, #20]
 80003a0:	697a      	ldr	r2, [r7, #20]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	dbf0      	blt.n	800038a <_read+0x12>
  }

  return len;
 80003a8:	687b      	ldr	r3, [r7, #4]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3718      	adds	r7, #24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b086      	sub	sp, #24
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	60f8      	str	r0, [r7, #12]
 80003ba:	60b9      	str	r1, [r7, #8]
 80003bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	e009      	b.n	80003d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	60ba      	str	r2, [r7, #8]
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 f877 	bl	80004c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	3301      	adds	r3, #1
 80003d6:	617b      	str	r3, [r7, #20]
 80003d8:	697a      	ldr	r2, [r7, #20]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	429a      	cmp	r2, r3
 80003de:	dbf1      	blt.n	80003c4 <_write+0x12>
  }
  return len;
 80003e0:	687b      	ldr	r3, [r7, #4]
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <_close>:

int _close(int file)
{
 80003ea:	b480      	push	{r7}
 80003ec:	b083      	sub	sp, #12
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
 800040a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000412:	605a      	str	r2, [r3, #4]
  return 0;
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <_isatty>:

int _isatty(int file)
{
 8000422:	b480      	push	{r7}
 8000424:	b083      	sub	sp, #12
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800042a:	2301      	movs	r3, #1
}
 800042c:	4618      	mov	r0, r3
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000444:	2300      	movs	r3, #0
}
 8000446:	4618      	mov	r0, r3
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800045c:	4a14      	ldr	r2, [pc, #80]	@ (80004b0 <_sbrk+0x5c>)
 800045e:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <_sbrk+0x60>)
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000468:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <_sbrk+0x64>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d102      	bne.n	8000476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000470:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <_sbrk+0x64>)
 8000472:	4a12      	ldr	r2, [pc, #72]	@ (80004bc <_sbrk+0x68>)
 8000474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000476:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <_sbrk+0x64>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	693a      	ldr	r2, [r7, #16]
 8000480:	429a      	cmp	r2, r3
 8000482:	d207      	bcs.n	8000494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000484:	f000 fa6c 	bl	8000960 <__errno>
 8000488:	4603      	mov	r3, r0
 800048a:	220c      	movs	r2, #12
 800048c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
 8000492:	e009      	b.n	80004a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000494:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <_sbrk+0x64>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800049a:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <_sbrk+0x64>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	4a05      	ldr	r2, [pc, #20]	@ (80004b8 <_sbrk+0x64>)
 80004a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004a6:	68fb      	ldr	r3, [r7, #12]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20018000 	.word	0x20018000
 80004b4:	00000400 	.word	0x00000400
 80004b8:	20000084 	.word	0x20000084
 80004bc:	200001d8 	.word	0x200001d8

080004c0 <__io_putchar>:




int __io_putchar(int ch)
{	
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	USART1->USART_DR = (ch & 0xFF);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a08      	ldr	r2, [pc, #32]	@ (80004ec <__io_putchar+0x2c>)
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	6053      	str	r3, [r2, #4]
	while(!(USART1->USART_SR & (1U << 7)));
 80004d0:	bf00      	nop
 80004d2:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <__io_putchar+0x2c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f9      	beq.n	80004d2 <__io_putchar+0x12>
	return ch;
 80004de:	687b      	ldr	r3, [r7, #4]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40011000 	.word	0x40011000

080004f0 <uart1_rxtx>:
	//if(!(USART1->USART_SR & (1U << 5)));
	return USART1->USART_DR;
}

void uart1_rxtx(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
	// PA9 TX 
	// 1. enable clock gpioa
	RCC->RCC_AHB1ENR |= GPIOA_ENABLE;
 80004f6:	4b41      	ldr	r3, [pc, #260]	@ (80005fc <uart1_rxtx+0x10c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a40      	ldr	r2, [pc, #256]	@ (80005fc <uart1_rxtx+0x10c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
	//2 . set mode alternate 
	GPIOA->GPIO_MODER &= ~(1U << 18); 
 8000502:	4b3f      	ldr	r3, [pc, #252]	@ (8000600 <uart1_rxtx+0x110>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a3e      	ldr	r2, [pc, #248]	@ (8000600 <uart1_rxtx+0x110>)
 8000508:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800050c:	6013      	str	r3, [r2, #0]
	GPIOA->GPIO_MODER |= (1U << 19);
 800050e:	4b3c      	ldr	r3, [pc, #240]	@ (8000600 <uart1_rxtx+0x110>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a3b      	ldr	r2, [pc, #236]	@ (8000600 <uart1_rxtx+0x110>)
 8000514:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000518:	6013      	str	r3, [r2, #0]
	// 3.  SET ALTERNATE PIN FOR PA9
	GPIOA->GPIO_AFR[1] &= ~ (0xF << 4);
 800051a:	4b39      	ldr	r3, [pc, #228]	@ (8000600 <uart1_rxtx+0x110>)
 800051c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800051e:	4a38      	ldr	r2, [pc, #224]	@ (8000600 <uart1_rxtx+0x110>)
 8000520:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000524:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->GPIO_AFR[1] |= (1U << 6) | (1U << 5) | (1U << 4);
 8000526:	4b36      	ldr	r3, [pc, #216]	@ (8000600 <uart1_rxtx+0x110>)
 8000528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800052a:	4a35      	ldr	r2, [pc, #212]	@ (8000600 <uart1_rxtx+0x110>)
 800052c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000530:	6253      	str	r3, [r2, #36]	@ 0x24
	// PA10 RX 
	// set mode alternate
	GPIOA->GPIO_MODER &= ~(3U << 20);
 8000532:	4b33      	ldr	r3, [pc, #204]	@ (8000600 <uart1_rxtx+0x110>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a32      	ldr	r2, [pc, #200]	@ (8000600 <uart1_rxtx+0x110>)
 8000538:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800053c:	6013      	str	r3, [r2, #0]
	GPIOA->GPIO_MODER |= (2U << 20); 
 800053e:	4b30      	ldr	r3, [pc, #192]	@ (8000600 <uart1_rxtx+0x110>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a2f      	ldr	r2, [pc, #188]	@ (8000600 <uart1_rxtx+0x110>)
 8000544:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000548:	6013      	str	r3, [r2, #0]

	// set alternate pin for PA10
	GPIOA->GPIO_AFR[1] &= ~ (0xF << 8);
 800054a:	4b2d      	ldr	r3, [pc, #180]	@ (8000600 <uart1_rxtx+0x110>)
 800054c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800054e:	4a2c      	ldr	r2, [pc, #176]	@ (8000600 <uart1_rxtx+0x110>)
 8000550:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000554:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->GPIO_AFR[1] |= (7U << 8);
 8000556:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <uart1_rxtx+0x110>)
 8000558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800055a:	4a29      	ldr	r2, [pc, #164]	@ (8000600 <uart1_rxtx+0x110>)
 800055c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000560:	6253      	str	r3, [r2, #36]	@ 0x24

	// 1. enable clock usart 1
	RCC->RCC_APB2ENR |= USART1_ENABLE;
 8000562:	4b26      	ldr	r3, [pc, #152]	@ (80005fc <uart1_rxtx+0x10c>)
 8000564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000566:	4a25      	ldr	r2, [pc, #148]	@ (80005fc <uart1_rxtx+0x10c>)
 8000568:	f043 0310 	orr.w	r3, r3, #16
 800056c:	6453      	str	r3, [r2, #68]	@ 0x44
	// over8 = 0
	USART1->USART_CR1 &= ~ (1U << 15); // OVER8 ==0 
 800056e:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <uart1_rxtx+0x114>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	4a24      	ldr	r2, [pc, #144]	@ (8000604 <uart1_rxtx+0x114>)
 8000574:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000578:	60d3      	str	r3, [r2, #12]
	// 2. set baudrate
	/**
	 * baudrate = flck/(8*(2-OVER8)*USARTDIV)
	 */
	USART1->USART_BRR |= (8U << 4) | (11U << 0);
 800057a:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <uart1_rxtx+0x114>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	4a21      	ldr	r2, [pc, #132]	@ (8000604 <uart1_rxtx+0x114>)
 8000580:	f043 038b 	orr.w	r3, r3, #139	@ 0x8b
 8000584:	6093      	str	r3, [r2, #8]
	// 3. SET MODE TE
	USART1->USART_CR1 |= (1U << 3);
 8000586:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <uart1_rxtx+0x114>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	4a1e      	ldr	r2, [pc, #120]	@ (8000604 <uart1_rxtx+0x114>)
 800058c:	f043 0308 	orr.w	r3, r3, #8
 8000590:	60d3      	str	r3, [r2, #12]

	// SET MODE RX 
	USART1->USART_CR1 |= (1U << 2);
 8000592:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <uart1_rxtx+0x114>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	4a1b      	ldr	r2, [pc, #108]	@ (8000604 <uart1_rxtx+0x114>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	60d3      	str	r3, [r2, #12]

	// 4. 1 bit start, 8 bit data, 1 stop bit
	USART1->USART_CR1 &= ~ (1U << 12);
 800059e:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <uart1_rxtx+0x114>)
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	4a18      	ldr	r2, [pc, #96]	@ (8000604 <uart1_rxtx+0x114>)
 80005a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80005a8:	60d3      	str	r3, [r2, #12]
	USART1->USART_CR2 &= ~(3U << 12);
 80005aa:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <uart1_rxtx+0x114>)
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	4a15      	ldr	r2, [pc, #84]	@ (8000604 <uart1_rxtx+0x114>)
 80005b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80005b4:	6113      	str	r3, [r2, #16]
	// 6 enable interrupt rx
	USART1->USART_CR1 |= (1U << 5);
 80005b6:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <uart1_rxtx+0x114>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	4a12      	ldr	r2, [pc, #72]	@ (8000604 <uart1_rxtx+0x114>)
 80005bc:	f043 0320 	orr.w	r3, r3, #32
 80005c0:	60d3      	str	r3, [r2, #12]
 80005c2:	2325      	movs	r3, #37	@ 0x25
 80005c4:	71fb      	strb	r3, [r7, #7]
__STATIC_FORCEINLINE void __NVIC_EnableIRQ(IRQ_Priority_t type_IRQ)
{
    if(((int32_t)type_IRQ) >=0)
    {
        __COMPILER_BARRIER();
        NVIC->NVIC_ISER[(((uint32_t)type_IRQ) >> 5U)] = (uint32_t) (1U << (uint32_t)(((uint32_t)type_IRQ) & 0x1F));   
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 031f 	and.w	r3, r3, #31
 80005cc:	490e      	ldr	r1, [pc, #56]	@ (8000608 <uart1_rxtx+0x118>)
 80005ce:	79fa      	ldrb	r2, [r7, #7]
 80005d0:	0952      	lsrs	r2, r2, #5
 80005d2:	b2d2      	uxtb	r2, r2
 80005d4:	4610      	mov	r0, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
        __COMPILER_BARRIER();    
    }
}
 80005e0:	bf00      	nop
	__NVIC_EnableIRQ(USART1_position);
	//  5. enable usart
	USART1->USART_CR1 |= (1U<<13);//enable uart
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <uart1_rxtx+0x114>)
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	4a07      	ldr	r2, [pc, #28]	@ (8000604 <uart1_rxtx+0x114>)
 80005e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005ec:	60d3      	str	r3, [r2, #12]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40020000 	.word	0x40020000
 8000604:	40011000 	.word	0x40011000
 8000608:	e000e100 	.word	0xe000e100

0800060c <USART1_IRQHandler>:
		}
	}
}

void USART1_IRQHandler()
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	
	if(USART1->USART_SR & (1U <<5))
 8000610:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <USART1_IRQHandler+0x2c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	2b00      	cmp	r3, #0
 800061a:	d007      	beq.n	800062c <USART1_IRQHandler+0x20>
	{
		myData.haveISR=true;
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <USART1_IRQHandler+0x30>)
 800061e:	2201      	movs	r2, #1
 8000620:	705a      	strb	r2, [r3, #1]
		myData.data = USART1->USART_DR;
 8000622:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <USART1_IRQHandler+0x2c>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <USART1_IRQHandler+0x30>)
 800062a:	701a      	strb	r2, [r3, #0]
		//printf("%c\n",_var.data);
	}

}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40011000 	.word	0x40011000
 800063c:	20000080 	.word	0x20000080

08000640 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000640:	480d      	ldr	r0, [pc, #52]	@ (8000678 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000642:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000644:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480c      	ldr	r0, [pc, #48]	@ (800067c <LoopForever+0x6>)
  ldr r1, =_edata
 800064a:	490d      	ldr	r1, [pc, #52]	@ (8000680 <LoopForever+0xa>)
  ldr r2, =_sidata
 800064c:	4a0d      	ldr	r2, [pc, #52]	@ (8000684 <LoopForever+0xe>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a0a      	ldr	r2, [pc, #40]	@ (8000688 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000660:	4c0a      	ldr	r4, [pc, #40]	@ (800068c <LoopForever+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800066e:	f000 f97d 	bl	800096c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fe43 	bl	80002fc <main>

08000676 <LoopForever>:

LoopForever:
  b LoopForever
 8000676:	e7fe      	b.n	8000676 <LoopForever>
  ldr   r0, =_estack
 8000678:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000680:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000684:	08001584 	.word	0x08001584
  ldr r2, =_sbss
 8000688:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800068c:	200001d4 	.word	0x200001d4

08000690 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC_IRQHandler>
	...

08000694 <std>:
 8000694:	2300      	movs	r3, #0
 8000696:	b510      	push	{r4, lr}
 8000698:	4604      	mov	r4, r0
 800069a:	e9c0 3300 	strd	r3, r3, [r0]
 800069e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006a2:	6083      	str	r3, [r0, #8]
 80006a4:	8181      	strh	r1, [r0, #12]
 80006a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80006a8:	81c2      	strh	r2, [r0, #14]
 80006aa:	6183      	str	r3, [r0, #24]
 80006ac:	4619      	mov	r1, r3
 80006ae:	2208      	movs	r2, #8
 80006b0:	305c      	adds	r0, #92	@ 0x5c
 80006b2:	f000 f906 	bl	80008c2 <memset>
 80006b6:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <std+0x58>)
 80006b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <std+0x5c>)
 80006bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <std+0x60>)
 80006c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <std+0x64>)
 80006c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <std+0x68>)
 80006c8:	6224      	str	r4, [r4, #32]
 80006ca:	429c      	cmp	r4, r3
 80006cc:	d006      	beq.n	80006dc <std+0x48>
 80006ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006d2:	4294      	cmp	r4, r2
 80006d4:	d002      	beq.n	80006dc <std+0x48>
 80006d6:	33d0      	adds	r3, #208	@ 0xd0
 80006d8:	429c      	cmp	r4, r3
 80006da:	d105      	bne.n	80006e8 <std+0x54>
 80006dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e4:	f000 b966 	b.w	80009b4 <__retarget_lock_init_recursive>
 80006e8:	bd10      	pop	{r4, pc}
 80006ea:	bf00      	nop
 80006ec:	0800083d 	.word	0x0800083d
 80006f0:	0800085f 	.word	0x0800085f
 80006f4:	08000897 	.word	0x08000897
 80006f8:	080008bb 	.word	0x080008bb
 80006fc:	20000088 	.word	0x20000088

08000700 <stdio_exit_handler>:
 8000700:	4a02      	ldr	r2, [pc, #8]	@ (800070c <stdio_exit_handler+0xc>)
 8000702:	4903      	ldr	r1, [pc, #12]	@ (8000710 <stdio_exit_handler+0x10>)
 8000704:	4803      	ldr	r0, [pc, #12]	@ (8000714 <stdio_exit_handler+0x14>)
 8000706:	f000 b869 	b.w	80007dc <_fwalk_sglue>
 800070a:	bf00      	nop
 800070c:	20000000 	.word	0x20000000
 8000710:	08001255 	.word	0x08001255
 8000714:	20000010 	.word	0x20000010

08000718 <cleanup_stdio>:
 8000718:	6841      	ldr	r1, [r0, #4]
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <cleanup_stdio+0x34>)
 800071c:	4299      	cmp	r1, r3
 800071e:	b510      	push	{r4, lr}
 8000720:	4604      	mov	r4, r0
 8000722:	d001      	beq.n	8000728 <cleanup_stdio+0x10>
 8000724:	f000 fd96 	bl	8001254 <_fflush_r>
 8000728:	68a1      	ldr	r1, [r4, #8]
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <cleanup_stdio+0x38>)
 800072c:	4299      	cmp	r1, r3
 800072e:	d002      	beq.n	8000736 <cleanup_stdio+0x1e>
 8000730:	4620      	mov	r0, r4
 8000732:	f000 fd8f 	bl	8001254 <_fflush_r>
 8000736:	68e1      	ldr	r1, [r4, #12]
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <cleanup_stdio+0x3c>)
 800073a:	4299      	cmp	r1, r3
 800073c:	d004      	beq.n	8000748 <cleanup_stdio+0x30>
 800073e:	4620      	mov	r0, r4
 8000740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000744:	f000 bd86 	b.w	8001254 <_fflush_r>
 8000748:	bd10      	pop	{r4, pc}
 800074a:	bf00      	nop
 800074c:	20000088 	.word	0x20000088
 8000750:	200000f0 	.word	0x200000f0
 8000754:	20000158 	.word	0x20000158

08000758 <global_stdio_init.part.0>:
 8000758:	b510      	push	{r4, lr}
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <global_stdio_init.part.0+0x30>)
 800075c:	4c0b      	ldr	r4, [pc, #44]	@ (800078c <global_stdio_init.part.0+0x34>)
 800075e:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <global_stdio_init.part.0+0x38>)
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	4620      	mov	r0, r4
 8000764:	2200      	movs	r2, #0
 8000766:	2104      	movs	r1, #4
 8000768:	f7ff ff94 	bl	8000694 <std>
 800076c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000770:	2201      	movs	r2, #1
 8000772:	2109      	movs	r1, #9
 8000774:	f7ff ff8e 	bl	8000694 <std>
 8000778:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800077c:	2202      	movs	r2, #2
 800077e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000782:	2112      	movs	r1, #18
 8000784:	f7ff bf86 	b.w	8000694 <std>
 8000788:	200001c0 	.word	0x200001c0
 800078c:	20000088 	.word	0x20000088
 8000790:	08000701 	.word	0x08000701

08000794 <__sfp_lock_acquire>:
 8000794:	4801      	ldr	r0, [pc, #4]	@ (800079c <__sfp_lock_acquire+0x8>)
 8000796:	f000 b90e 	b.w	80009b6 <__retarget_lock_acquire_recursive>
 800079a:	bf00      	nop
 800079c:	200001c9 	.word	0x200001c9

080007a0 <__sfp_lock_release>:
 80007a0:	4801      	ldr	r0, [pc, #4]	@ (80007a8 <__sfp_lock_release+0x8>)
 80007a2:	f000 b909 	b.w	80009b8 <__retarget_lock_release_recursive>
 80007a6:	bf00      	nop
 80007a8:	200001c9 	.word	0x200001c9

080007ac <__sinit>:
 80007ac:	b510      	push	{r4, lr}
 80007ae:	4604      	mov	r4, r0
 80007b0:	f7ff fff0 	bl	8000794 <__sfp_lock_acquire>
 80007b4:	6a23      	ldr	r3, [r4, #32]
 80007b6:	b11b      	cbz	r3, 80007c0 <__sinit+0x14>
 80007b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007bc:	f7ff bff0 	b.w	80007a0 <__sfp_lock_release>
 80007c0:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <__sinit+0x28>)
 80007c2:	6223      	str	r3, [r4, #32]
 80007c4:	4b04      	ldr	r3, [pc, #16]	@ (80007d8 <__sinit+0x2c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f5      	bne.n	80007b8 <__sinit+0xc>
 80007cc:	f7ff ffc4 	bl	8000758 <global_stdio_init.part.0>
 80007d0:	e7f2      	b.n	80007b8 <__sinit+0xc>
 80007d2:	bf00      	nop
 80007d4:	08000719 	.word	0x08000719
 80007d8:	200001c0 	.word	0x200001c0

080007dc <_fwalk_sglue>:
 80007dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007e0:	4607      	mov	r7, r0
 80007e2:	4688      	mov	r8, r1
 80007e4:	4614      	mov	r4, r2
 80007e6:	2600      	movs	r6, #0
 80007e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007ec:	f1b9 0901 	subs.w	r9, r9, #1
 80007f0:	d505      	bpl.n	80007fe <_fwalk_sglue+0x22>
 80007f2:	6824      	ldr	r4, [r4, #0]
 80007f4:	2c00      	cmp	r4, #0
 80007f6:	d1f7      	bne.n	80007e8 <_fwalk_sglue+0xc>
 80007f8:	4630      	mov	r0, r6
 80007fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007fe:	89ab      	ldrh	r3, [r5, #12]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d907      	bls.n	8000814 <_fwalk_sglue+0x38>
 8000804:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000808:	3301      	adds	r3, #1
 800080a:	d003      	beq.n	8000814 <_fwalk_sglue+0x38>
 800080c:	4629      	mov	r1, r5
 800080e:	4638      	mov	r0, r7
 8000810:	47c0      	blx	r8
 8000812:	4306      	orrs	r6, r0
 8000814:	3568      	adds	r5, #104	@ 0x68
 8000816:	e7e9      	b.n	80007ec <_fwalk_sglue+0x10>

08000818 <iprintf>:
 8000818:	b40f      	push	{r0, r1, r2, r3}
 800081a:	b507      	push	{r0, r1, r2, lr}
 800081c:	4906      	ldr	r1, [pc, #24]	@ (8000838 <iprintf+0x20>)
 800081e:	ab04      	add	r3, sp, #16
 8000820:	6808      	ldr	r0, [r1, #0]
 8000822:	f853 2b04 	ldr.w	r2, [r3], #4
 8000826:	6881      	ldr	r1, [r0, #8]
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	f000 f9e9 	bl	8000c00 <_vfiprintf_r>
 800082e:	b003      	add	sp, #12
 8000830:	f85d eb04 	ldr.w	lr, [sp], #4
 8000834:	b004      	add	sp, #16
 8000836:	4770      	bx	lr
 8000838:	2000000c 	.word	0x2000000c

0800083c <__sread>:
 800083c:	b510      	push	{r4, lr}
 800083e:	460c      	mov	r4, r1
 8000840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000844:	f000 f868 	bl	8000918 <_read_r>
 8000848:	2800      	cmp	r0, #0
 800084a:	bfab      	itete	ge
 800084c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800084e:	89a3      	ldrhlt	r3, [r4, #12]
 8000850:	181b      	addge	r3, r3, r0
 8000852:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000856:	bfac      	ite	ge
 8000858:	6563      	strge	r3, [r4, #84]	@ 0x54
 800085a:	81a3      	strhlt	r3, [r4, #12]
 800085c:	bd10      	pop	{r4, pc}

0800085e <__swrite>:
 800085e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000862:	461f      	mov	r7, r3
 8000864:	898b      	ldrh	r3, [r1, #12]
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	4605      	mov	r5, r0
 800086a:	460c      	mov	r4, r1
 800086c:	4616      	mov	r6, r2
 800086e:	d505      	bpl.n	800087c <__swrite+0x1e>
 8000870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000874:	2302      	movs	r3, #2
 8000876:	2200      	movs	r2, #0
 8000878:	f000 f83c 	bl	80008f4 <_lseek_r>
 800087c:	89a3      	ldrh	r3, [r4, #12]
 800087e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000882:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000886:	81a3      	strh	r3, [r4, #12]
 8000888:	4632      	mov	r2, r6
 800088a:	463b      	mov	r3, r7
 800088c:	4628      	mov	r0, r5
 800088e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000892:	f000 b853 	b.w	800093c <_write_r>

08000896 <__sseek>:
 8000896:	b510      	push	{r4, lr}
 8000898:	460c      	mov	r4, r1
 800089a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800089e:	f000 f829 	bl	80008f4 <_lseek_r>
 80008a2:	1c43      	adds	r3, r0, #1
 80008a4:	89a3      	ldrh	r3, [r4, #12]
 80008a6:	bf15      	itete	ne
 80008a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008b2:	81a3      	strheq	r3, [r4, #12]
 80008b4:	bf18      	it	ne
 80008b6:	81a3      	strhne	r3, [r4, #12]
 80008b8:	bd10      	pop	{r4, pc}

080008ba <__sclose>:
 80008ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008be:	f000 b809 	b.w	80008d4 <_close_r>

080008c2 <memset>:
 80008c2:	4402      	add	r2, r0
 80008c4:	4603      	mov	r3, r0
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d100      	bne.n	80008cc <memset+0xa>
 80008ca:	4770      	bx	lr
 80008cc:	f803 1b01 	strb.w	r1, [r3], #1
 80008d0:	e7f9      	b.n	80008c6 <memset+0x4>
	...

080008d4 <_close_r>:
 80008d4:	b538      	push	{r3, r4, r5, lr}
 80008d6:	4d06      	ldr	r5, [pc, #24]	@ (80008f0 <_close_r+0x1c>)
 80008d8:	2300      	movs	r3, #0
 80008da:	4604      	mov	r4, r0
 80008dc:	4608      	mov	r0, r1
 80008de:	602b      	str	r3, [r5, #0]
 80008e0:	f7ff fd83 	bl	80003ea <_close>
 80008e4:	1c43      	adds	r3, r0, #1
 80008e6:	d102      	bne.n	80008ee <_close_r+0x1a>
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	b103      	cbz	r3, 80008ee <_close_r+0x1a>
 80008ec:	6023      	str	r3, [r4, #0]
 80008ee:	bd38      	pop	{r3, r4, r5, pc}
 80008f0:	200001c4 	.word	0x200001c4

080008f4 <_lseek_r>:
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	4d07      	ldr	r5, [pc, #28]	@ (8000914 <_lseek_r+0x20>)
 80008f8:	4604      	mov	r4, r0
 80008fa:	4608      	mov	r0, r1
 80008fc:	4611      	mov	r1, r2
 80008fe:	2200      	movs	r2, #0
 8000900:	602a      	str	r2, [r5, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	f7ff fd98 	bl	8000438 <_lseek>
 8000908:	1c43      	adds	r3, r0, #1
 800090a:	d102      	bne.n	8000912 <_lseek_r+0x1e>
 800090c:	682b      	ldr	r3, [r5, #0]
 800090e:	b103      	cbz	r3, 8000912 <_lseek_r+0x1e>
 8000910:	6023      	str	r3, [r4, #0]
 8000912:	bd38      	pop	{r3, r4, r5, pc}
 8000914:	200001c4 	.word	0x200001c4

08000918 <_read_r>:
 8000918:	b538      	push	{r3, r4, r5, lr}
 800091a:	4d07      	ldr	r5, [pc, #28]	@ (8000938 <_read_r+0x20>)
 800091c:	4604      	mov	r4, r0
 800091e:	4608      	mov	r0, r1
 8000920:	4611      	mov	r1, r2
 8000922:	2200      	movs	r2, #0
 8000924:	602a      	str	r2, [r5, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	f7ff fd26 	bl	8000378 <_read>
 800092c:	1c43      	adds	r3, r0, #1
 800092e:	d102      	bne.n	8000936 <_read_r+0x1e>
 8000930:	682b      	ldr	r3, [r5, #0]
 8000932:	b103      	cbz	r3, 8000936 <_read_r+0x1e>
 8000934:	6023      	str	r3, [r4, #0]
 8000936:	bd38      	pop	{r3, r4, r5, pc}
 8000938:	200001c4 	.word	0x200001c4

0800093c <_write_r>:
 800093c:	b538      	push	{r3, r4, r5, lr}
 800093e:	4d07      	ldr	r5, [pc, #28]	@ (800095c <_write_r+0x20>)
 8000940:	4604      	mov	r4, r0
 8000942:	4608      	mov	r0, r1
 8000944:	4611      	mov	r1, r2
 8000946:	2200      	movs	r2, #0
 8000948:	602a      	str	r2, [r5, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	f7ff fd31 	bl	80003b2 <_write>
 8000950:	1c43      	adds	r3, r0, #1
 8000952:	d102      	bne.n	800095a <_write_r+0x1e>
 8000954:	682b      	ldr	r3, [r5, #0]
 8000956:	b103      	cbz	r3, 800095a <_write_r+0x1e>
 8000958:	6023      	str	r3, [r4, #0]
 800095a:	bd38      	pop	{r3, r4, r5, pc}
 800095c:	200001c4 	.word	0x200001c4

08000960 <__errno>:
 8000960:	4b01      	ldr	r3, [pc, #4]	@ (8000968 <__errno+0x8>)
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	2000000c 	.word	0x2000000c

0800096c <__libc_init_array>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	4d0d      	ldr	r5, [pc, #52]	@ (80009a4 <__libc_init_array+0x38>)
 8000970:	4c0d      	ldr	r4, [pc, #52]	@ (80009a8 <__libc_init_array+0x3c>)
 8000972:	1b64      	subs	r4, r4, r5
 8000974:	10a4      	asrs	r4, r4, #2
 8000976:	2600      	movs	r6, #0
 8000978:	42a6      	cmp	r6, r4
 800097a:	d109      	bne.n	8000990 <__libc_init_array+0x24>
 800097c:	4d0b      	ldr	r5, [pc, #44]	@ (80009ac <__libc_init_array+0x40>)
 800097e:	4c0c      	ldr	r4, [pc, #48]	@ (80009b0 <__libc_init_array+0x44>)
 8000980:	f000 fdb8 	bl	80014f4 <_init>
 8000984:	1b64      	subs	r4, r4, r5
 8000986:	10a4      	asrs	r4, r4, #2
 8000988:	2600      	movs	r6, #0
 800098a:	42a6      	cmp	r6, r4
 800098c:	d105      	bne.n	800099a <__libc_init_array+0x2e>
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f855 3b04 	ldr.w	r3, [r5], #4
 8000994:	4798      	blx	r3
 8000996:	3601      	adds	r6, #1
 8000998:	e7ee      	b.n	8000978 <__libc_init_array+0xc>
 800099a:	f855 3b04 	ldr.w	r3, [r5], #4
 800099e:	4798      	blx	r3
 80009a0:	3601      	adds	r6, #1
 80009a2:	e7f2      	b.n	800098a <__libc_init_array+0x1e>
 80009a4:	0800157c 	.word	0x0800157c
 80009a8:	0800157c 	.word	0x0800157c
 80009ac:	0800157c 	.word	0x0800157c
 80009b0:	08001580 	.word	0x08001580

080009b4 <__retarget_lock_init_recursive>:
 80009b4:	4770      	bx	lr

080009b6 <__retarget_lock_acquire_recursive>:
 80009b6:	4770      	bx	lr

080009b8 <__retarget_lock_release_recursive>:
 80009b8:	4770      	bx	lr
	...

080009bc <_free_r>:
 80009bc:	b538      	push	{r3, r4, r5, lr}
 80009be:	4605      	mov	r5, r0
 80009c0:	2900      	cmp	r1, #0
 80009c2:	d041      	beq.n	8000a48 <_free_r+0x8c>
 80009c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009c8:	1f0c      	subs	r4, r1, #4
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	bfb8      	it	lt
 80009ce:	18e4      	addlt	r4, r4, r3
 80009d0:	f000 f8e0 	bl	8000b94 <__malloc_lock>
 80009d4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a4c <_free_r+0x90>)
 80009d6:	6813      	ldr	r3, [r2, #0]
 80009d8:	b933      	cbnz	r3, 80009e8 <_free_r+0x2c>
 80009da:	6063      	str	r3, [r4, #4]
 80009dc:	6014      	str	r4, [r2, #0]
 80009de:	4628      	mov	r0, r5
 80009e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009e4:	f000 b8dc 	b.w	8000ba0 <__malloc_unlock>
 80009e8:	42a3      	cmp	r3, r4
 80009ea:	d908      	bls.n	80009fe <_free_r+0x42>
 80009ec:	6820      	ldr	r0, [r4, #0]
 80009ee:	1821      	adds	r1, r4, r0
 80009f0:	428b      	cmp	r3, r1
 80009f2:	bf01      	itttt	eq
 80009f4:	6819      	ldreq	r1, [r3, #0]
 80009f6:	685b      	ldreq	r3, [r3, #4]
 80009f8:	1809      	addeq	r1, r1, r0
 80009fa:	6021      	streq	r1, [r4, #0]
 80009fc:	e7ed      	b.n	80009da <_free_r+0x1e>
 80009fe:	461a      	mov	r2, r3
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	b10b      	cbz	r3, 8000a08 <_free_r+0x4c>
 8000a04:	42a3      	cmp	r3, r4
 8000a06:	d9fa      	bls.n	80009fe <_free_r+0x42>
 8000a08:	6811      	ldr	r1, [r2, #0]
 8000a0a:	1850      	adds	r0, r2, r1
 8000a0c:	42a0      	cmp	r0, r4
 8000a0e:	d10b      	bne.n	8000a28 <_free_r+0x6c>
 8000a10:	6820      	ldr	r0, [r4, #0]
 8000a12:	4401      	add	r1, r0
 8000a14:	1850      	adds	r0, r2, r1
 8000a16:	4283      	cmp	r3, r0
 8000a18:	6011      	str	r1, [r2, #0]
 8000a1a:	d1e0      	bne.n	80009de <_free_r+0x22>
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	6053      	str	r3, [r2, #4]
 8000a22:	4408      	add	r0, r1
 8000a24:	6010      	str	r0, [r2, #0]
 8000a26:	e7da      	b.n	80009de <_free_r+0x22>
 8000a28:	d902      	bls.n	8000a30 <_free_r+0x74>
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	602b      	str	r3, [r5, #0]
 8000a2e:	e7d6      	b.n	80009de <_free_r+0x22>
 8000a30:	6820      	ldr	r0, [r4, #0]
 8000a32:	1821      	adds	r1, r4, r0
 8000a34:	428b      	cmp	r3, r1
 8000a36:	bf04      	itt	eq
 8000a38:	6819      	ldreq	r1, [r3, #0]
 8000a3a:	685b      	ldreq	r3, [r3, #4]
 8000a3c:	6063      	str	r3, [r4, #4]
 8000a3e:	bf04      	itt	eq
 8000a40:	1809      	addeq	r1, r1, r0
 8000a42:	6021      	streq	r1, [r4, #0]
 8000a44:	6054      	str	r4, [r2, #4]
 8000a46:	e7ca      	b.n	80009de <_free_r+0x22>
 8000a48:	bd38      	pop	{r3, r4, r5, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200001d0 	.word	0x200001d0

08000a50 <sbrk_aligned>:
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	4e0f      	ldr	r6, [pc, #60]	@ (8000a90 <sbrk_aligned+0x40>)
 8000a54:	460c      	mov	r4, r1
 8000a56:	6831      	ldr	r1, [r6, #0]
 8000a58:	4605      	mov	r5, r0
 8000a5a:	b911      	cbnz	r1, 8000a62 <sbrk_aligned+0x12>
 8000a5c:	f000 fcb6 	bl	80013cc <_sbrk_r>
 8000a60:	6030      	str	r0, [r6, #0]
 8000a62:	4621      	mov	r1, r4
 8000a64:	4628      	mov	r0, r5
 8000a66:	f000 fcb1 	bl	80013cc <_sbrk_r>
 8000a6a:	1c43      	adds	r3, r0, #1
 8000a6c:	d103      	bne.n	8000a76 <sbrk_aligned+0x26>
 8000a6e:	f04f 34ff 	mov.w	r4, #4294967295
 8000a72:	4620      	mov	r0, r4
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
 8000a76:	1cc4      	adds	r4, r0, #3
 8000a78:	f024 0403 	bic.w	r4, r4, #3
 8000a7c:	42a0      	cmp	r0, r4
 8000a7e:	d0f8      	beq.n	8000a72 <sbrk_aligned+0x22>
 8000a80:	1a21      	subs	r1, r4, r0
 8000a82:	4628      	mov	r0, r5
 8000a84:	f000 fca2 	bl	80013cc <_sbrk_r>
 8000a88:	3001      	adds	r0, #1
 8000a8a:	d1f2      	bne.n	8000a72 <sbrk_aligned+0x22>
 8000a8c:	e7ef      	b.n	8000a6e <sbrk_aligned+0x1e>
 8000a8e:	bf00      	nop
 8000a90:	200001cc 	.word	0x200001cc

08000a94 <_malloc_r>:
 8000a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a98:	1ccd      	adds	r5, r1, #3
 8000a9a:	f025 0503 	bic.w	r5, r5, #3
 8000a9e:	3508      	adds	r5, #8
 8000aa0:	2d0c      	cmp	r5, #12
 8000aa2:	bf38      	it	cc
 8000aa4:	250c      	movcc	r5, #12
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	4606      	mov	r6, r0
 8000aaa:	db01      	blt.n	8000ab0 <_malloc_r+0x1c>
 8000aac:	42a9      	cmp	r1, r5
 8000aae:	d904      	bls.n	8000aba <_malloc_r+0x26>
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	6033      	str	r3, [r6, #0]
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b90 <_malloc_r+0xfc>
 8000abe:	f000 f869 	bl	8000b94 <__malloc_lock>
 8000ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ac6:	461c      	mov	r4, r3
 8000ac8:	bb44      	cbnz	r4, 8000b1c <_malloc_r+0x88>
 8000aca:	4629      	mov	r1, r5
 8000acc:	4630      	mov	r0, r6
 8000ace:	f7ff ffbf 	bl	8000a50 <sbrk_aligned>
 8000ad2:	1c43      	adds	r3, r0, #1
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	d158      	bne.n	8000b8a <_malloc_r+0xf6>
 8000ad8:	f8d8 4000 	ldr.w	r4, [r8]
 8000adc:	4627      	mov	r7, r4
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d143      	bne.n	8000b6a <_malloc_r+0xd6>
 8000ae2:	2c00      	cmp	r4, #0
 8000ae4:	d04b      	beq.n	8000b7e <_malloc_r+0xea>
 8000ae6:	6823      	ldr	r3, [r4, #0]
 8000ae8:	4639      	mov	r1, r7
 8000aea:	4630      	mov	r0, r6
 8000aec:	eb04 0903 	add.w	r9, r4, r3
 8000af0:	f000 fc6c 	bl	80013cc <_sbrk_r>
 8000af4:	4581      	cmp	r9, r0
 8000af6:	d142      	bne.n	8000b7e <_malloc_r+0xea>
 8000af8:	6821      	ldr	r1, [r4, #0]
 8000afa:	1a6d      	subs	r5, r5, r1
 8000afc:	4629      	mov	r1, r5
 8000afe:	4630      	mov	r0, r6
 8000b00:	f7ff ffa6 	bl	8000a50 <sbrk_aligned>
 8000b04:	3001      	adds	r0, #1
 8000b06:	d03a      	beq.n	8000b7e <_malloc_r+0xea>
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	442b      	add	r3, r5
 8000b0c:	6023      	str	r3, [r4, #0]
 8000b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	bb62      	cbnz	r2, 8000b70 <_malloc_r+0xdc>
 8000b16:	f8c8 7000 	str.w	r7, [r8]
 8000b1a:	e00f      	b.n	8000b3c <_malloc_r+0xa8>
 8000b1c:	6822      	ldr	r2, [r4, #0]
 8000b1e:	1b52      	subs	r2, r2, r5
 8000b20:	d420      	bmi.n	8000b64 <_malloc_r+0xd0>
 8000b22:	2a0b      	cmp	r2, #11
 8000b24:	d917      	bls.n	8000b56 <_malloc_r+0xc2>
 8000b26:	1961      	adds	r1, r4, r5
 8000b28:	42a3      	cmp	r3, r4
 8000b2a:	6025      	str	r5, [r4, #0]
 8000b2c:	bf18      	it	ne
 8000b2e:	6059      	strne	r1, [r3, #4]
 8000b30:	6863      	ldr	r3, [r4, #4]
 8000b32:	bf08      	it	eq
 8000b34:	f8c8 1000 	streq.w	r1, [r8]
 8000b38:	5162      	str	r2, [r4, r5]
 8000b3a:	604b      	str	r3, [r1, #4]
 8000b3c:	4630      	mov	r0, r6
 8000b3e:	f000 f82f 	bl	8000ba0 <__malloc_unlock>
 8000b42:	f104 000b 	add.w	r0, r4, #11
 8000b46:	1d23      	adds	r3, r4, #4
 8000b48:	f020 0007 	bic.w	r0, r0, #7
 8000b4c:	1ac2      	subs	r2, r0, r3
 8000b4e:	bf1c      	itt	ne
 8000b50:	1a1b      	subne	r3, r3, r0
 8000b52:	50a3      	strne	r3, [r4, r2]
 8000b54:	e7af      	b.n	8000ab6 <_malloc_r+0x22>
 8000b56:	6862      	ldr	r2, [r4, #4]
 8000b58:	42a3      	cmp	r3, r4
 8000b5a:	bf0c      	ite	eq
 8000b5c:	f8c8 2000 	streq.w	r2, [r8]
 8000b60:	605a      	strne	r2, [r3, #4]
 8000b62:	e7eb      	b.n	8000b3c <_malloc_r+0xa8>
 8000b64:	4623      	mov	r3, r4
 8000b66:	6864      	ldr	r4, [r4, #4]
 8000b68:	e7ae      	b.n	8000ac8 <_malloc_r+0x34>
 8000b6a:	463c      	mov	r4, r7
 8000b6c:	687f      	ldr	r7, [r7, #4]
 8000b6e:	e7b6      	b.n	8000ade <_malloc_r+0x4a>
 8000b70:	461a      	mov	r2, r3
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	42a3      	cmp	r3, r4
 8000b76:	d1fb      	bne.n	8000b70 <_malloc_r+0xdc>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	6053      	str	r3, [r2, #4]
 8000b7c:	e7de      	b.n	8000b3c <_malloc_r+0xa8>
 8000b7e:	230c      	movs	r3, #12
 8000b80:	6033      	str	r3, [r6, #0]
 8000b82:	4630      	mov	r0, r6
 8000b84:	f000 f80c 	bl	8000ba0 <__malloc_unlock>
 8000b88:	e794      	b.n	8000ab4 <_malloc_r+0x20>
 8000b8a:	6005      	str	r5, [r0, #0]
 8000b8c:	e7d6      	b.n	8000b3c <_malloc_r+0xa8>
 8000b8e:	bf00      	nop
 8000b90:	200001d0 	.word	0x200001d0

08000b94 <__malloc_lock>:
 8000b94:	4801      	ldr	r0, [pc, #4]	@ (8000b9c <__malloc_lock+0x8>)
 8000b96:	f7ff bf0e 	b.w	80009b6 <__retarget_lock_acquire_recursive>
 8000b9a:	bf00      	nop
 8000b9c:	200001c8 	.word	0x200001c8

08000ba0 <__malloc_unlock>:
 8000ba0:	4801      	ldr	r0, [pc, #4]	@ (8000ba8 <__malloc_unlock+0x8>)
 8000ba2:	f7ff bf09 	b.w	80009b8 <__retarget_lock_release_recursive>
 8000ba6:	bf00      	nop
 8000ba8:	200001c8 	.word	0x200001c8

08000bac <__sfputc_r>:
 8000bac:	6893      	ldr	r3, [r2, #8]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	b410      	push	{r4}
 8000bb4:	6093      	str	r3, [r2, #8]
 8000bb6:	da08      	bge.n	8000bca <__sfputc_r+0x1e>
 8000bb8:	6994      	ldr	r4, [r2, #24]
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	db01      	blt.n	8000bc2 <__sfputc_r+0x16>
 8000bbe:	290a      	cmp	r1, #10
 8000bc0:	d103      	bne.n	8000bca <__sfputc_r+0x1e>
 8000bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bc6:	f000 bb6d 	b.w	80012a4 <__swbuf_r>
 8000bca:	6813      	ldr	r3, [r2, #0]
 8000bcc:	1c58      	adds	r0, r3, #1
 8000bce:	6010      	str	r0, [r2, #0]
 8000bd0:	7019      	strb	r1, [r3, #0]
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <__sfputs_r>:
 8000bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bdc:	4606      	mov	r6, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	4614      	mov	r4, r2
 8000be2:	18d5      	adds	r5, r2, r3
 8000be4:	42ac      	cmp	r4, r5
 8000be6:	d101      	bne.n	8000bec <__sfputs_r+0x12>
 8000be8:	2000      	movs	r0, #0
 8000bea:	e007      	b.n	8000bfc <__sfputs_r+0x22>
 8000bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bf0:	463a      	mov	r2, r7
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	f7ff ffda 	bl	8000bac <__sfputc_r>
 8000bf8:	1c43      	adds	r3, r0, #1
 8000bfa:	d1f3      	bne.n	8000be4 <__sfputs_r+0xa>
 8000bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c00 <_vfiprintf_r>:
 8000c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c04:	460d      	mov	r5, r1
 8000c06:	b09d      	sub	sp, #116	@ 0x74
 8000c08:	4614      	mov	r4, r2
 8000c0a:	4698      	mov	r8, r3
 8000c0c:	4606      	mov	r6, r0
 8000c0e:	b118      	cbz	r0, 8000c18 <_vfiprintf_r+0x18>
 8000c10:	6a03      	ldr	r3, [r0, #32]
 8000c12:	b90b      	cbnz	r3, 8000c18 <_vfiprintf_r+0x18>
 8000c14:	f7ff fdca 	bl	80007ac <__sinit>
 8000c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c1a:	07d9      	lsls	r1, r3, #31
 8000c1c:	d405      	bmi.n	8000c2a <_vfiprintf_r+0x2a>
 8000c1e:	89ab      	ldrh	r3, [r5, #12]
 8000c20:	059a      	lsls	r2, r3, #22
 8000c22:	d402      	bmi.n	8000c2a <_vfiprintf_r+0x2a>
 8000c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c26:	f7ff fec6 	bl	80009b6 <__retarget_lock_acquire_recursive>
 8000c2a:	89ab      	ldrh	r3, [r5, #12]
 8000c2c:	071b      	lsls	r3, r3, #28
 8000c2e:	d501      	bpl.n	8000c34 <_vfiprintf_r+0x34>
 8000c30:	692b      	ldr	r3, [r5, #16]
 8000c32:	b99b      	cbnz	r3, 8000c5c <_vfiprintf_r+0x5c>
 8000c34:	4629      	mov	r1, r5
 8000c36:	4630      	mov	r0, r6
 8000c38:	f000 fb72 	bl	8001320 <__swsetup_r>
 8000c3c:	b170      	cbz	r0, 8000c5c <_vfiprintf_r+0x5c>
 8000c3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c40:	07dc      	lsls	r4, r3, #31
 8000c42:	d504      	bpl.n	8000c4e <_vfiprintf_r+0x4e>
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	b01d      	add	sp, #116	@ 0x74
 8000c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c4e:	89ab      	ldrh	r3, [r5, #12]
 8000c50:	0598      	lsls	r0, r3, #22
 8000c52:	d4f7      	bmi.n	8000c44 <_vfiprintf_r+0x44>
 8000c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c56:	f7ff feaf 	bl	80009b8 <__retarget_lock_release_recursive>
 8000c5a:	e7f3      	b.n	8000c44 <_vfiprintf_r+0x44>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c60:	2320      	movs	r3, #32
 8000c62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c6a:	2330      	movs	r3, #48	@ 0x30
 8000c6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e1c <_vfiprintf_r+0x21c>
 8000c70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c74:	f04f 0901 	mov.w	r9, #1
 8000c78:	4623      	mov	r3, r4
 8000c7a:	469a      	mov	sl, r3
 8000c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c80:	b10a      	cbz	r2, 8000c86 <_vfiprintf_r+0x86>
 8000c82:	2a25      	cmp	r2, #37	@ 0x25
 8000c84:	d1f9      	bne.n	8000c7a <_vfiprintf_r+0x7a>
 8000c86:	ebba 0b04 	subs.w	fp, sl, r4
 8000c8a:	d00b      	beq.n	8000ca4 <_vfiprintf_r+0xa4>
 8000c8c:	465b      	mov	r3, fp
 8000c8e:	4622      	mov	r2, r4
 8000c90:	4629      	mov	r1, r5
 8000c92:	4630      	mov	r0, r6
 8000c94:	f7ff ffa1 	bl	8000bda <__sfputs_r>
 8000c98:	3001      	adds	r0, #1
 8000c9a:	f000 80a7 	beq.w	8000dec <_vfiprintf_r+0x1ec>
 8000c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ca0:	445a      	add	r2, fp
 8000ca2:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 809f 	beq.w	8000dec <_vfiprintf_r+0x1ec>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cb8:	f10a 0a01 	add.w	sl, sl, #1
 8000cbc:	9304      	str	r3, [sp, #16]
 8000cbe:	9307      	str	r3, [sp, #28]
 8000cc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000cc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8000cc6:	4654      	mov	r4, sl
 8000cc8:	2205      	movs	r2, #5
 8000cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cce:	4853      	ldr	r0, [pc, #332]	@ (8000e1c <_vfiprintf_r+0x21c>)
 8000cd0:	f7ff fa86 	bl	80001e0 <memchr>
 8000cd4:	9a04      	ldr	r2, [sp, #16]
 8000cd6:	b9d8      	cbnz	r0, 8000d10 <_vfiprintf_r+0x110>
 8000cd8:	06d1      	lsls	r1, r2, #27
 8000cda:	bf44      	itt	mi
 8000cdc:	2320      	movmi	r3, #32
 8000cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ce2:	0713      	lsls	r3, r2, #28
 8000ce4:	bf44      	itt	mi
 8000ce6:	232b      	movmi	r3, #43	@ 0x2b
 8000ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000cec:	f89a 3000 	ldrb.w	r3, [sl]
 8000cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cf2:	d015      	beq.n	8000d20 <_vfiprintf_r+0x120>
 8000cf4:	9a07      	ldr	r2, [sp, #28]
 8000cf6:	4654      	mov	r4, sl
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f04f 0c0a 	mov.w	ip, #10
 8000cfe:	4621      	mov	r1, r4
 8000d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d04:	3b30      	subs	r3, #48	@ 0x30
 8000d06:	2b09      	cmp	r3, #9
 8000d08:	d94b      	bls.n	8000da2 <_vfiprintf_r+0x1a2>
 8000d0a:	b1b0      	cbz	r0, 8000d3a <_vfiprintf_r+0x13a>
 8000d0c:	9207      	str	r2, [sp, #28]
 8000d0e:	e014      	b.n	8000d3a <_vfiprintf_r+0x13a>
 8000d10:	eba0 0308 	sub.w	r3, r0, r8
 8000d14:	fa09 f303 	lsl.w	r3, r9, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	9304      	str	r3, [sp, #16]
 8000d1c:	46a2      	mov	sl, r4
 8000d1e:	e7d2      	b.n	8000cc6 <_vfiprintf_r+0xc6>
 8000d20:	9b03      	ldr	r3, [sp, #12]
 8000d22:	1d19      	adds	r1, r3, #4
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	9103      	str	r1, [sp, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	bfbb      	ittet	lt
 8000d2c:	425b      	neglt	r3, r3
 8000d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8000d32:	9307      	strge	r3, [sp, #28]
 8000d34:	9307      	strlt	r3, [sp, #28]
 8000d36:	bfb8      	it	lt
 8000d38:	9204      	strlt	r2, [sp, #16]
 8000d3a:	7823      	ldrb	r3, [r4, #0]
 8000d3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d3e:	d10a      	bne.n	8000d56 <_vfiprintf_r+0x156>
 8000d40:	7863      	ldrb	r3, [r4, #1]
 8000d42:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d44:	d132      	bne.n	8000dac <_vfiprintf_r+0x1ac>
 8000d46:	9b03      	ldr	r3, [sp, #12]
 8000d48:	1d1a      	adds	r2, r3, #4
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	9203      	str	r2, [sp, #12]
 8000d4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d52:	3402      	adds	r4, #2
 8000d54:	9305      	str	r3, [sp, #20]
 8000d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e2c <_vfiprintf_r+0x22c>
 8000d5a:	7821      	ldrb	r1, [r4, #0]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	4650      	mov	r0, sl
 8000d60:	f7ff fa3e 	bl	80001e0 <memchr>
 8000d64:	b138      	cbz	r0, 8000d76 <_vfiprintf_r+0x176>
 8000d66:	9b04      	ldr	r3, [sp, #16]
 8000d68:	eba0 000a 	sub.w	r0, r0, sl
 8000d6c:	2240      	movs	r2, #64	@ 0x40
 8000d6e:	4082      	lsls	r2, r0
 8000d70:	4313      	orrs	r3, r2
 8000d72:	3401      	adds	r4, #1
 8000d74:	9304      	str	r3, [sp, #16]
 8000d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d7a:	4829      	ldr	r0, [pc, #164]	@ (8000e20 <_vfiprintf_r+0x220>)
 8000d7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d80:	2206      	movs	r2, #6
 8000d82:	f7ff fa2d 	bl	80001e0 <memchr>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d03f      	beq.n	8000e0a <_vfiprintf_r+0x20a>
 8000d8a:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <_vfiprintf_r+0x224>)
 8000d8c:	bb1b      	cbnz	r3, 8000dd6 <_vfiprintf_r+0x1d6>
 8000d8e:	9b03      	ldr	r3, [sp, #12]
 8000d90:	3307      	adds	r3, #7
 8000d92:	f023 0307 	bic.w	r3, r3, #7
 8000d96:	3308      	adds	r3, #8
 8000d98:	9303      	str	r3, [sp, #12]
 8000d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d9c:	443b      	add	r3, r7
 8000d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000da0:	e76a      	b.n	8000c78 <_vfiprintf_r+0x78>
 8000da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000da6:	460c      	mov	r4, r1
 8000da8:	2001      	movs	r0, #1
 8000daa:	e7a8      	b.n	8000cfe <_vfiprintf_r+0xfe>
 8000dac:	2300      	movs	r3, #0
 8000dae:	3401      	adds	r4, #1
 8000db0:	9305      	str	r3, [sp, #20]
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 0c0a 	mov.w	ip, #10
 8000db8:	4620      	mov	r0, r4
 8000dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dbe:	3a30      	subs	r2, #48	@ 0x30
 8000dc0:	2a09      	cmp	r2, #9
 8000dc2:	d903      	bls.n	8000dcc <_vfiprintf_r+0x1cc>
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0c6      	beq.n	8000d56 <_vfiprintf_r+0x156>
 8000dc8:	9105      	str	r1, [sp, #20]
 8000dca:	e7c4      	b.n	8000d56 <_vfiprintf_r+0x156>
 8000dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8000dd0:	4604      	mov	r4, r0
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e7f0      	b.n	8000db8 <_vfiprintf_r+0x1b8>
 8000dd6:	ab03      	add	r3, sp, #12
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	462a      	mov	r2, r5
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <_vfiprintf_r+0x228>)
 8000dde:	a904      	add	r1, sp, #16
 8000de0:	4630      	mov	r0, r6
 8000de2:	f3af 8000 	nop.w
 8000de6:	4607      	mov	r7, r0
 8000de8:	1c78      	adds	r0, r7, #1
 8000dea:	d1d6      	bne.n	8000d9a <_vfiprintf_r+0x19a>
 8000dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000dee:	07d9      	lsls	r1, r3, #31
 8000df0:	d405      	bmi.n	8000dfe <_vfiprintf_r+0x1fe>
 8000df2:	89ab      	ldrh	r3, [r5, #12]
 8000df4:	059a      	lsls	r2, r3, #22
 8000df6:	d402      	bmi.n	8000dfe <_vfiprintf_r+0x1fe>
 8000df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000dfa:	f7ff fddd 	bl	80009b8 <__retarget_lock_release_recursive>
 8000dfe:	89ab      	ldrh	r3, [r5, #12]
 8000e00:	065b      	lsls	r3, r3, #25
 8000e02:	f53f af1f 	bmi.w	8000c44 <_vfiprintf_r+0x44>
 8000e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e08:	e71e      	b.n	8000c48 <_vfiprintf_r+0x48>
 8000e0a:	ab03      	add	r3, sp, #12
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	462a      	mov	r2, r5
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <_vfiprintf_r+0x228>)
 8000e12:	a904      	add	r1, sp, #16
 8000e14:	4630      	mov	r0, r6
 8000e16:	f000 f879 	bl	8000f0c <_printf_i>
 8000e1a:	e7e4      	b.n	8000de6 <_vfiprintf_r+0x1e6>
 8000e1c:	08001540 	.word	0x08001540
 8000e20:	0800154a 	.word	0x0800154a
 8000e24:	00000000 	.word	0x00000000
 8000e28:	08000bdb 	.word	0x08000bdb
 8000e2c:	08001546 	.word	0x08001546

08000e30 <_printf_common>:
 8000e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e34:	4616      	mov	r6, r2
 8000e36:	4698      	mov	r8, r3
 8000e38:	688a      	ldr	r2, [r1, #8]
 8000e3a:	690b      	ldr	r3, [r1, #16]
 8000e3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e40:	4293      	cmp	r3, r2
 8000e42:	bfb8      	it	lt
 8000e44:	4613      	movlt	r3, r2
 8000e46:	6033      	str	r3, [r6, #0]
 8000e48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e4c:	4607      	mov	r7, r0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	b10a      	cbz	r2, 8000e56 <_printf_common+0x26>
 8000e52:	3301      	adds	r3, #1
 8000e54:	6033      	str	r3, [r6, #0]
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	0699      	lsls	r1, r3, #26
 8000e5a:	bf42      	ittt	mi
 8000e5c:	6833      	ldrmi	r3, [r6, #0]
 8000e5e:	3302      	addmi	r3, #2
 8000e60:	6033      	strmi	r3, [r6, #0]
 8000e62:	6825      	ldr	r5, [r4, #0]
 8000e64:	f015 0506 	ands.w	r5, r5, #6
 8000e68:	d106      	bne.n	8000e78 <_printf_common+0x48>
 8000e6a:	f104 0a19 	add.w	sl, r4, #25
 8000e6e:	68e3      	ldr	r3, [r4, #12]
 8000e70:	6832      	ldr	r2, [r6, #0]
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	42ab      	cmp	r3, r5
 8000e76:	dc26      	bgt.n	8000ec6 <_printf_common+0x96>
 8000e78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e7c:	6822      	ldr	r2, [r4, #0]
 8000e7e:	3b00      	subs	r3, #0
 8000e80:	bf18      	it	ne
 8000e82:	2301      	movne	r3, #1
 8000e84:	0692      	lsls	r2, r2, #26
 8000e86:	d42b      	bmi.n	8000ee0 <_printf_common+0xb0>
 8000e88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e8c:	4641      	mov	r1, r8
 8000e8e:	4638      	mov	r0, r7
 8000e90:	47c8      	blx	r9
 8000e92:	3001      	adds	r0, #1
 8000e94:	d01e      	beq.n	8000ed4 <_printf_common+0xa4>
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	6922      	ldr	r2, [r4, #16]
 8000e9a:	f003 0306 	and.w	r3, r3, #6
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf02      	ittt	eq
 8000ea2:	68e5      	ldreq	r5, [r4, #12]
 8000ea4:	6833      	ldreq	r3, [r6, #0]
 8000ea6:	1aed      	subeq	r5, r5, r3
 8000ea8:	68a3      	ldr	r3, [r4, #8]
 8000eaa:	bf0c      	ite	eq
 8000eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000eb0:	2500      	movne	r5, #0
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	bfc4      	itt	gt
 8000eb6:	1a9b      	subgt	r3, r3, r2
 8000eb8:	18ed      	addgt	r5, r5, r3
 8000eba:	2600      	movs	r6, #0
 8000ebc:	341a      	adds	r4, #26
 8000ebe:	42b5      	cmp	r5, r6
 8000ec0:	d11a      	bne.n	8000ef8 <_printf_common+0xc8>
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	e008      	b.n	8000ed8 <_printf_common+0xa8>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	4652      	mov	r2, sl
 8000eca:	4641      	mov	r1, r8
 8000ecc:	4638      	mov	r0, r7
 8000ece:	47c8      	blx	r9
 8000ed0:	3001      	adds	r0, #1
 8000ed2:	d103      	bne.n	8000edc <_printf_common+0xac>
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000edc:	3501      	adds	r5, #1
 8000ede:	e7c6      	b.n	8000e6e <_printf_common+0x3e>
 8000ee0:	18e1      	adds	r1, r4, r3
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	2030      	movs	r0, #48	@ 0x30
 8000ee6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000eea:	4422      	add	r2, r4
 8000eec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000ef0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	e7c7      	b.n	8000e88 <_printf_common+0x58>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	4622      	mov	r2, r4
 8000efc:	4641      	mov	r1, r8
 8000efe:	4638      	mov	r0, r7
 8000f00:	47c8      	blx	r9
 8000f02:	3001      	adds	r0, #1
 8000f04:	d0e6      	beq.n	8000ed4 <_printf_common+0xa4>
 8000f06:	3601      	adds	r6, #1
 8000f08:	e7d9      	b.n	8000ebe <_printf_common+0x8e>
	...

08000f0c <_printf_i>:
 8000f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f10:	7e0f      	ldrb	r7, [r1, #24]
 8000f12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f14:	2f78      	cmp	r7, #120	@ 0x78
 8000f16:	4691      	mov	r9, r2
 8000f18:	4680      	mov	r8, r0
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	469a      	mov	sl, r3
 8000f1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f22:	d807      	bhi.n	8000f34 <_printf_i+0x28>
 8000f24:	2f62      	cmp	r7, #98	@ 0x62
 8000f26:	d80a      	bhi.n	8000f3e <_printf_i+0x32>
 8000f28:	2f00      	cmp	r7, #0
 8000f2a:	f000 80d2 	beq.w	80010d2 <_printf_i+0x1c6>
 8000f2e:	2f58      	cmp	r7, #88	@ 0x58
 8000f30:	f000 80b9 	beq.w	80010a6 <_printf_i+0x19a>
 8000f34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f3c:	e03a      	b.n	8000fb4 <_printf_i+0xa8>
 8000f3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f42:	2b15      	cmp	r3, #21
 8000f44:	d8f6      	bhi.n	8000f34 <_printf_i+0x28>
 8000f46:	a101      	add	r1, pc, #4	@ (adr r1, 8000f4c <_printf_i+0x40>)
 8000f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f4c:	08000fa5 	.word	0x08000fa5
 8000f50:	08000fb9 	.word	0x08000fb9
 8000f54:	08000f35 	.word	0x08000f35
 8000f58:	08000f35 	.word	0x08000f35
 8000f5c:	08000f35 	.word	0x08000f35
 8000f60:	08000f35 	.word	0x08000f35
 8000f64:	08000fb9 	.word	0x08000fb9
 8000f68:	08000f35 	.word	0x08000f35
 8000f6c:	08000f35 	.word	0x08000f35
 8000f70:	08000f35 	.word	0x08000f35
 8000f74:	08000f35 	.word	0x08000f35
 8000f78:	080010b9 	.word	0x080010b9
 8000f7c:	08000fe3 	.word	0x08000fe3
 8000f80:	08001073 	.word	0x08001073
 8000f84:	08000f35 	.word	0x08000f35
 8000f88:	08000f35 	.word	0x08000f35
 8000f8c:	080010db 	.word	0x080010db
 8000f90:	08000f35 	.word	0x08000f35
 8000f94:	08000fe3 	.word	0x08000fe3
 8000f98:	08000f35 	.word	0x08000f35
 8000f9c:	08000f35 	.word	0x08000f35
 8000fa0:	0800107b 	.word	0x0800107b
 8000fa4:	6833      	ldr	r3, [r6, #0]
 8000fa6:	1d1a      	adds	r2, r3, #4
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6032      	str	r2, [r6, #0]
 8000fac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e09d      	b.n	80010f4 <_printf_i+0x1e8>
 8000fb8:	6833      	ldr	r3, [r6, #0]
 8000fba:	6820      	ldr	r0, [r4, #0]
 8000fbc:	1d19      	adds	r1, r3, #4
 8000fbe:	6031      	str	r1, [r6, #0]
 8000fc0:	0606      	lsls	r6, r0, #24
 8000fc2:	d501      	bpl.n	8000fc8 <_printf_i+0xbc>
 8000fc4:	681d      	ldr	r5, [r3, #0]
 8000fc6:	e003      	b.n	8000fd0 <_printf_i+0xc4>
 8000fc8:	0645      	lsls	r5, r0, #25
 8000fca:	d5fb      	bpl.n	8000fc4 <_printf_i+0xb8>
 8000fcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000fd0:	2d00      	cmp	r5, #0
 8000fd2:	da03      	bge.n	8000fdc <_printf_i+0xd0>
 8000fd4:	232d      	movs	r3, #45	@ 0x2d
 8000fd6:	426d      	negs	r5, r5
 8000fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fdc:	4859      	ldr	r0, [pc, #356]	@ (8001144 <_printf_i+0x238>)
 8000fde:	230a      	movs	r3, #10
 8000fe0:	e011      	b.n	8001006 <_printf_i+0xfa>
 8000fe2:	6821      	ldr	r1, [r4, #0]
 8000fe4:	6833      	ldr	r3, [r6, #0]
 8000fe6:	0608      	lsls	r0, r1, #24
 8000fe8:	f853 5b04 	ldr.w	r5, [r3], #4
 8000fec:	d402      	bmi.n	8000ff4 <_printf_i+0xe8>
 8000fee:	0649      	lsls	r1, r1, #25
 8000ff0:	bf48      	it	mi
 8000ff2:	b2ad      	uxthmi	r5, r5
 8000ff4:	2f6f      	cmp	r7, #111	@ 0x6f
 8000ff6:	4853      	ldr	r0, [pc, #332]	@ (8001144 <_printf_i+0x238>)
 8000ff8:	6033      	str	r3, [r6, #0]
 8000ffa:	bf14      	ite	ne
 8000ffc:	230a      	movne	r3, #10
 8000ffe:	2308      	moveq	r3, #8
 8001000:	2100      	movs	r1, #0
 8001002:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001006:	6866      	ldr	r6, [r4, #4]
 8001008:	60a6      	str	r6, [r4, #8]
 800100a:	2e00      	cmp	r6, #0
 800100c:	bfa2      	ittt	ge
 800100e:	6821      	ldrge	r1, [r4, #0]
 8001010:	f021 0104 	bicge.w	r1, r1, #4
 8001014:	6021      	strge	r1, [r4, #0]
 8001016:	b90d      	cbnz	r5, 800101c <_printf_i+0x110>
 8001018:	2e00      	cmp	r6, #0
 800101a:	d04b      	beq.n	80010b4 <_printf_i+0x1a8>
 800101c:	4616      	mov	r6, r2
 800101e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001022:	fb03 5711 	mls	r7, r3, r1, r5
 8001026:	5dc7      	ldrb	r7, [r0, r7]
 8001028:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800102c:	462f      	mov	r7, r5
 800102e:	42bb      	cmp	r3, r7
 8001030:	460d      	mov	r5, r1
 8001032:	d9f4      	bls.n	800101e <_printf_i+0x112>
 8001034:	2b08      	cmp	r3, #8
 8001036:	d10b      	bne.n	8001050 <_printf_i+0x144>
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	07df      	lsls	r7, r3, #31
 800103c:	d508      	bpl.n	8001050 <_printf_i+0x144>
 800103e:	6923      	ldr	r3, [r4, #16]
 8001040:	6861      	ldr	r1, [r4, #4]
 8001042:	4299      	cmp	r1, r3
 8001044:	bfde      	ittt	le
 8001046:	2330      	movle	r3, #48	@ 0x30
 8001048:	f806 3c01 	strble.w	r3, [r6, #-1]
 800104c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001050:	1b92      	subs	r2, r2, r6
 8001052:	6122      	str	r2, [r4, #16]
 8001054:	f8cd a000 	str.w	sl, [sp]
 8001058:	464b      	mov	r3, r9
 800105a:	aa03      	add	r2, sp, #12
 800105c:	4621      	mov	r1, r4
 800105e:	4640      	mov	r0, r8
 8001060:	f7ff fee6 	bl	8000e30 <_printf_common>
 8001064:	3001      	adds	r0, #1
 8001066:	d14a      	bne.n	80010fe <_printf_i+0x1f2>
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	b004      	add	sp, #16
 800106e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	6023      	str	r3, [r4, #0]
 800107a:	4833      	ldr	r0, [pc, #204]	@ (8001148 <_printf_i+0x23c>)
 800107c:	2778      	movs	r7, #120	@ 0x78
 800107e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	6831      	ldr	r1, [r6, #0]
 8001086:	061f      	lsls	r7, r3, #24
 8001088:	f851 5b04 	ldr.w	r5, [r1], #4
 800108c:	d402      	bmi.n	8001094 <_printf_i+0x188>
 800108e:	065f      	lsls	r7, r3, #25
 8001090:	bf48      	it	mi
 8001092:	b2ad      	uxthmi	r5, r5
 8001094:	6031      	str	r1, [r6, #0]
 8001096:	07d9      	lsls	r1, r3, #31
 8001098:	bf44      	itt	mi
 800109a:	f043 0320 	orrmi.w	r3, r3, #32
 800109e:	6023      	strmi	r3, [r4, #0]
 80010a0:	b11d      	cbz	r5, 80010aa <_printf_i+0x19e>
 80010a2:	2310      	movs	r3, #16
 80010a4:	e7ac      	b.n	8001000 <_printf_i+0xf4>
 80010a6:	4827      	ldr	r0, [pc, #156]	@ (8001144 <_printf_i+0x238>)
 80010a8:	e7e9      	b.n	800107e <_printf_i+0x172>
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	f023 0320 	bic.w	r3, r3, #32
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	e7f6      	b.n	80010a2 <_printf_i+0x196>
 80010b4:	4616      	mov	r6, r2
 80010b6:	e7bd      	b.n	8001034 <_printf_i+0x128>
 80010b8:	6833      	ldr	r3, [r6, #0]
 80010ba:	6825      	ldr	r5, [r4, #0]
 80010bc:	6961      	ldr	r1, [r4, #20]
 80010be:	1d18      	adds	r0, r3, #4
 80010c0:	6030      	str	r0, [r6, #0]
 80010c2:	062e      	lsls	r6, r5, #24
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	d501      	bpl.n	80010cc <_printf_i+0x1c0>
 80010c8:	6019      	str	r1, [r3, #0]
 80010ca:	e002      	b.n	80010d2 <_printf_i+0x1c6>
 80010cc:	0668      	lsls	r0, r5, #25
 80010ce:	d5fb      	bpl.n	80010c8 <_printf_i+0x1bc>
 80010d0:	8019      	strh	r1, [r3, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	6123      	str	r3, [r4, #16]
 80010d6:	4616      	mov	r6, r2
 80010d8:	e7bc      	b.n	8001054 <_printf_i+0x148>
 80010da:	6833      	ldr	r3, [r6, #0]
 80010dc:	1d1a      	adds	r2, r3, #4
 80010de:	6032      	str	r2, [r6, #0]
 80010e0:	681e      	ldr	r6, [r3, #0]
 80010e2:	6862      	ldr	r2, [r4, #4]
 80010e4:	2100      	movs	r1, #0
 80010e6:	4630      	mov	r0, r6
 80010e8:	f7ff f87a 	bl	80001e0 <memchr>
 80010ec:	b108      	cbz	r0, 80010f2 <_printf_i+0x1e6>
 80010ee:	1b80      	subs	r0, r0, r6
 80010f0:	6060      	str	r0, [r4, #4]
 80010f2:	6863      	ldr	r3, [r4, #4]
 80010f4:	6123      	str	r3, [r4, #16]
 80010f6:	2300      	movs	r3, #0
 80010f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010fc:	e7aa      	b.n	8001054 <_printf_i+0x148>
 80010fe:	6923      	ldr	r3, [r4, #16]
 8001100:	4632      	mov	r2, r6
 8001102:	4649      	mov	r1, r9
 8001104:	4640      	mov	r0, r8
 8001106:	47d0      	blx	sl
 8001108:	3001      	adds	r0, #1
 800110a:	d0ad      	beq.n	8001068 <_printf_i+0x15c>
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	079b      	lsls	r3, r3, #30
 8001110:	d413      	bmi.n	800113a <_printf_i+0x22e>
 8001112:	68e0      	ldr	r0, [r4, #12]
 8001114:	9b03      	ldr	r3, [sp, #12]
 8001116:	4298      	cmp	r0, r3
 8001118:	bfb8      	it	lt
 800111a:	4618      	movlt	r0, r3
 800111c:	e7a6      	b.n	800106c <_printf_i+0x160>
 800111e:	2301      	movs	r3, #1
 8001120:	4632      	mov	r2, r6
 8001122:	4649      	mov	r1, r9
 8001124:	4640      	mov	r0, r8
 8001126:	47d0      	blx	sl
 8001128:	3001      	adds	r0, #1
 800112a:	d09d      	beq.n	8001068 <_printf_i+0x15c>
 800112c:	3501      	adds	r5, #1
 800112e:	68e3      	ldr	r3, [r4, #12]
 8001130:	9903      	ldr	r1, [sp, #12]
 8001132:	1a5b      	subs	r3, r3, r1
 8001134:	42ab      	cmp	r3, r5
 8001136:	dcf2      	bgt.n	800111e <_printf_i+0x212>
 8001138:	e7eb      	b.n	8001112 <_printf_i+0x206>
 800113a:	2500      	movs	r5, #0
 800113c:	f104 0619 	add.w	r6, r4, #25
 8001140:	e7f5      	b.n	800112e <_printf_i+0x222>
 8001142:	bf00      	nop
 8001144:	08001551 	.word	0x08001551
 8001148:	08001562 	.word	0x08001562

0800114c <__sflush_r>:
 800114c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001154:	0716      	lsls	r6, r2, #28
 8001156:	4605      	mov	r5, r0
 8001158:	460c      	mov	r4, r1
 800115a:	d454      	bmi.n	8001206 <__sflush_r+0xba>
 800115c:	684b      	ldr	r3, [r1, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	dc02      	bgt.n	8001168 <__sflush_r+0x1c>
 8001162:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001164:	2b00      	cmp	r3, #0
 8001166:	dd48      	ble.n	80011fa <__sflush_r+0xae>
 8001168:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800116a:	2e00      	cmp	r6, #0
 800116c:	d045      	beq.n	80011fa <__sflush_r+0xae>
 800116e:	2300      	movs	r3, #0
 8001170:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001174:	682f      	ldr	r7, [r5, #0]
 8001176:	6a21      	ldr	r1, [r4, #32]
 8001178:	602b      	str	r3, [r5, #0]
 800117a:	d030      	beq.n	80011de <__sflush_r+0x92>
 800117c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800117e:	89a3      	ldrh	r3, [r4, #12]
 8001180:	0759      	lsls	r1, r3, #29
 8001182:	d505      	bpl.n	8001190 <__sflush_r+0x44>
 8001184:	6863      	ldr	r3, [r4, #4]
 8001186:	1ad2      	subs	r2, r2, r3
 8001188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800118a:	b10b      	cbz	r3, 8001190 <__sflush_r+0x44>
 800118c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800118e:	1ad2      	subs	r2, r2, r3
 8001190:	2300      	movs	r3, #0
 8001192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001194:	6a21      	ldr	r1, [r4, #32]
 8001196:	4628      	mov	r0, r5
 8001198:	47b0      	blx	r6
 800119a:	1c43      	adds	r3, r0, #1
 800119c:	89a3      	ldrh	r3, [r4, #12]
 800119e:	d106      	bne.n	80011ae <__sflush_r+0x62>
 80011a0:	6829      	ldr	r1, [r5, #0]
 80011a2:	291d      	cmp	r1, #29
 80011a4:	d82b      	bhi.n	80011fe <__sflush_r+0xb2>
 80011a6:	4a2a      	ldr	r2, [pc, #168]	@ (8001250 <__sflush_r+0x104>)
 80011a8:	410a      	asrs	r2, r1
 80011aa:	07d6      	lsls	r6, r2, #31
 80011ac:	d427      	bmi.n	80011fe <__sflush_r+0xb2>
 80011ae:	2200      	movs	r2, #0
 80011b0:	6062      	str	r2, [r4, #4]
 80011b2:	04d9      	lsls	r1, r3, #19
 80011b4:	6922      	ldr	r2, [r4, #16]
 80011b6:	6022      	str	r2, [r4, #0]
 80011b8:	d504      	bpl.n	80011c4 <__sflush_r+0x78>
 80011ba:	1c42      	adds	r2, r0, #1
 80011bc:	d101      	bne.n	80011c2 <__sflush_r+0x76>
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	b903      	cbnz	r3, 80011c4 <__sflush_r+0x78>
 80011c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80011c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011c6:	602f      	str	r7, [r5, #0]
 80011c8:	b1b9      	cbz	r1, 80011fa <__sflush_r+0xae>
 80011ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011ce:	4299      	cmp	r1, r3
 80011d0:	d002      	beq.n	80011d8 <__sflush_r+0x8c>
 80011d2:	4628      	mov	r0, r5
 80011d4:	f7ff fbf2 	bl	80009bc <_free_r>
 80011d8:	2300      	movs	r3, #0
 80011da:	6363      	str	r3, [r4, #52]	@ 0x34
 80011dc:	e00d      	b.n	80011fa <__sflush_r+0xae>
 80011de:	2301      	movs	r3, #1
 80011e0:	4628      	mov	r0, r5
 80011e2:	47b0      	blx	r6
 80011e4:	4602      	mov	r2, r0
 80011e6:	1c50      	adds	r0, r2, #1
 80011e8:	d1c9      	bne.n	800117e <__sflush_r+0x32>
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0c6      	beq.n	800117e <__sflush_r+0x32>
 80011f0:	2b1d      	cmp	r3, #29
 80011f2:	d001      	beq.n	80011f8 <__sflush_r+0xac>
 80011f4:	2b16      	cmp	r3, #22
 80011f6:	d11e      	bne.n	8001236 <__sflush_r+0xea>
 80011f8:	602f      	str	r7, [r5, #0]
 80011fa:	2000      	movs	r0, #0
 80011fc:	e022      	b.n	8001244 <__sflush_r+0xf8>
 80011fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001202:	b21b      	sxth	r3, r3
 8001204:	e01b      	b.n	800123e <__sflush_r+0xf2>
 8001206:	690f      	ldr	r7, [r1, #16]
 8001208:	2f00      	cmp	r7, #0
 800120a:	d0f6      	beq.n	80011fa <__sflush_r+0xae>
 800120c:	0793      	lsls	r3, r2, #30
 800120e:	680e      	ldr	r6, [r1, #0]
 8001210:	bf08      	it	eq
 8001212:	694b      	ldreq	r3, [r1, #20]
 8001214:	600f      	str	r7, [r1, #0]
 8001216:	bf18      	it	ne
 8001218:	2300      	movne	r3, #0
 800121a:	eba6 0807 	sub.w	r8, r6, r7
 800121e:	608b      	str	r3, [r1, #8]
 8001220:	f1b8 0f00 	cmp.w	r8, #0
 8001224:	dde9      	ble.n	80011fa <__sflush_r+0xae>
 8001226:	6a21      	ldr	r1, [r4, #32]
 8001228:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800122a:	4643      	mov	r3, r8
 800122c:	463a      	mov	r2, r7
 800122e:	4628      	mov	r0, r5
 8001230:	47b0      	blx	r6
 8001232:	2800      	cmp	r0, #0
 8001234:	dc08      	bgt.n	8001248 <__sflush_r+0xfc>
 8001236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800123a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800123e:	81a3      	strh	r3, [r4, #12]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001248:	4407      	add	r7, r0
 800124a:	eba8 0800 	sub.w	r8, r8, r0
 800124e:	e7e7      	b.n	8001220 <__sflush_r+0xd4>
 8001250:	dfbffffe 	.word	0xdfbffffe

08001254 <_fflush_r>:
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	690b      	ldr	r3, [r1, #16]
 8001258:	4605      	mov	r5, r0
 800125a:	460c      	mov	r4, r1
 800125c:	b913      	cbnz	r3, 8001264 <_fflush_r+0x10>
 800125e:	2500      	movs	r5, #0
 8001260:	4628      	mov	r0, r5
 8001262:	bd38      	pop	{r3, r4, r5, pc}
 8001264:	b118      	cbz	r0, 800126e <_fflush_r+0x1a>
 8001266:	6a03      	ldr	r3, [r0, #32]
 8001268:	b90b      	cbnz	r3, 800126e <_fflush_r+0x1a>
 800126a:	f7ff fa9f 	bl	80007ac <__sinit>
 800126e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f3      	beq.n	800125e <_fflush_r+0xa>
 8001276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001278:	07d0      	lsls	r0, r2, #31
 800127a:	d404      	bmi.n	8001286 <_fflush_r+0x32>
 800127c:	0599      	lsls	r1, r3, #22
 800127e:	d402      	bmi.n	8001286 <_fflush_r+0x32>
 8001280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001282:	f7ff fb98 	bl	80009b6 <__retarget_lock_acquire_recursive>
 8001286:	4628      	mov	r0, r5
 8001288:	4621      	mov	r1, r4
 800128a:	f7ff ff5f 	bl	800114c <__sflush_r>
 800128e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001290:	07da      	lsls	r2, r3, #31
 8001292:	4605      	mov	r5, r0
 8001294:	d4e4      	bmi.n	8001260 <_fflush_r+0xc>
 8001296:	89a3      	ldrh	r3, [r4, #12]
 8001298:	059b      	lsls	r3, r3, #22
 800129a:	d4e1      	bmi.n	8001260 <_fflush_r+0xc>
 800129c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800129e:	f7ff fb8b 	bl	80009b8 <__retarget_lock_release_recursive>
 80012a2:	e7dd      	b.n	8001260 <_fflush_r+0xc>

080012a4 <__swbuf_r>:
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	460e      	mov	r6, r1
 80012a8:	4614      	mov	r4, r2
 80012aa:	4605      	mov	r5, r0
 80012ac:	b118      	cbz	r0, 80012b6 <__swbuf_r+0x12>
 80012ae:	6a03      	ldr	r3, [r0, #32]
 80012b0:	b90b      	cbnz	r3, 80012b6 <__swbuf_r+0x12>
 80012b2:	f7ff fa7b 	bl	80007ac <__sinit>
 80012b6:	69a3      	ldr	r3, [r4, #24]
 80012b8:	60a3      	str	r3, [r4, #8]
 80012ba:	89a3      	ldrh	r3, [r4, #12]
 80012bc:	071a      	lsls	r2, r3, #28
 80012be:	d501      	bpl.n	80012c4 <__swbuf_r+0x20>
 80012c0:	6923      	ldr	r3, [r4, #16]
 80012c2:	b943      	cbnz	r3, 80012d6 <__swbuf_r+0x32>
 80012c4:	4621      	mov	r1, r4
 80012c6:	4628      	mov	r0, r5
 80012c8:	f000 f82a 	bl	8001320 <__swsetup_r>
 80012cc:	b118      	cbz	r0, 80012d6 <__swbuf_r+0x32>
 80012ce:	f04f 37ff 	mov.w	r7, #4294967295
 80012d2:	4638      	mov	r0, r7
 80012d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	6922      	ldr	r2, [r4, #16]
 80012da:	1a98      	subs	r0, r3, r2
 80012dc:	6963      	ldr	r3, [r4, #20]
 80012de:	b2f6      	uxtb	r6, r6
 80012e0:	4283      	cmp	r3, r0
 80012e2:	4637      	mov	r7, r6
 80012e4:	dc05      	bgt.n	80012f2 <__swbuf_r+0x4e>
 80012e6:	4621      	mov	r1, r4
 80012e8:	4628      	mov	r0, r5
 80012ea:	f7ff ffb3 	bl	8001254 <_fflush_r>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d1ed      	bne.n	80012ce <__swbuf_r+0x2a>
 80012f2:	68a3      	ldr	r3, [r4, #8]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	60a3      	str	r3, [r4, #8]
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	6022      	str	r2, [r4, #0]
 80012fe:	701e      	strb	r6, [r3, #0]
 8001300:	6962      	ldr	r2, [r4, #20]
 8001302:	1c43      	adds	r3, r0, #1
 8001304:	429a      	cmp	r2, r3
 8001306:	d004      	beq.n	8001312 <__swbuf_r+0x6e>
 8001308:	89a3      	ldrh	r3, [r4, #12]
 800130a:	07db      	lsls	r3, r3, #31
 800130c:	d5e1      	bpl.n	80012d2 <__swbuf_r+0x2e>
 800130e:	2e0a      	cmp	r6, #10
 8001310:	d1df      	bne.n	80012d2 <__swbuf_r+0x2e>
 8001312:	4621      	mov	r1, r4
 8001314:	4628      	mov	r0, r5
 8001316:	f7ff ff9d 	bl	8001254 <_fflush_r>
 800131a:	2800      	cmp	r0, #0
 800131c:	d0d9      	beq.n	80012d2 <__swbuf_r+0x2e>
 800131e:	e7d6      	b.n	80012ce <__swbuf_r+0x2a>

08001320 <__swsetup_r>:
 8001320:	b538      	push	{r3, r4, r5, lr}
 8001322:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <__swsetup_r+0xa8>)
 8001324:	4605      	mov	r5, r0
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	460c      	mov	r4, r1
 800132a:	b118      	cbz	r0, 8001334 <__swsetup_r+0x14>
 800132c:	6a03      	ldr	r3, [r0, #32]
 800132e:	b90b      	cbnz	r3, 8001334 <__swsetup_r+0x14>
 8001330:	f7ff fa3c 	bl	80007ac <__sinit>
 8001334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001338:	0719      	lsls	r1, r3, #28
 800133a:	d422      	bmi.n	8001382 <__swsetup_r+0x62>
 800133c:	06da      	lsls	r2, r3, #27
 800133e:	d407      	bmi.n	8001350 <__swsetup_r+0x30>
 8001340:	2209      	movs	r2, #9
 8001342:	602a      	str	r2, [r5, #0]
 8001344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001348:	81a3      	strh	r3, [r4, #12]
 800134a:	f04f 30ff 	mov.w	r0, #4294967295
 800134e:	e033      	b.n	80013b8 <__swsetup_r+0x98>
 8001350:	0758      	lsls	r0, r3, #29
 8001352:	d512      	bpl.n	800137a <__swsetup_r+0x5a>
 8001354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001356:	b141      	cbz	r1, 800136a <__swsetup_r+0x4a>
 8001358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800135c:	4299      	cmp	r1, r3
 800135e:	d002      	beq.n	8001366 <__swsetup_r+0x46>
 8001360:	4628      	mov	r0, r5
 8001362:	f7ff fb2b 	bl	80009bc <_free_r>
 8001366:	2300      	movs	r3, #0
 8001368:	6363      	str	r3, [r4, #52]	@ 0x34
 800136a:	89a3      	ldrh	r3, [r4, #12]
 800136c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001370:	81a3      	strh	r3, [r4, #12]
 8001372:	2300      	movs	r3, #0
 8001374:	6063      	str	r3, [r4, #4]
 8001376:	6923      	ldr	r3, [r4, #16]
 8001378:	6023      	str	r3, [r4, #0]
 800137a:	89a3      	ldrh	r3, [r4, #12]
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	81a3      	strh	r3, [r4, #12]
 8001382:	6923      	ldr	r3, [r4, #16]
 8001384:	b94b      	cbnz	r3, 800139a <__swsetup_r+0x7a>
 8001386:	89a3      	ldrh	r3, [r4, #12]
 8001388:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800138c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001390:	d003      	beq.n	800139a <__swsetup_r+0x7a>
 8001392:	4621      	mov	r1, r4
 8001394:	4628      	mov	r0, r5
 8001396:	f000 f84f 	bl	8001438 <__smakebuf_r>
 800139a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800139e:	f013 0201 	ands.w	r2, r3, #1
 80013a2:	d00a      	beq.n	80013ba <__swsetup_r+0x9a>
 80013a4:	2200      	movs	r2, #0
 80013a6:	60a2      	str	r2, [r4, #8]
 80013a8:	6962      	ldr	r2, [r4, #20]
 80013aa:	4252      	negs	r2, r2
 80013ac:	61a2      	str	r2, [r4, #24]
 80013ae:	6922      	ldr	r2, [r4, #16]
 80013b0:	b942      	cbnz	r2, 80013c4 <__swsetup_r+0xa4>
 80013b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013b6:	d1c5      	bne.n	8001344 <__swsetup_r+0x24>
 80013b8:	bd38      	pop	{r3, r4, r5, pc}
 80013ba:	0799      	lsls	r1, r3, #30
 80013bc:	bf58      	it	pl
 80013be:	6962      	ldrpl	r2, [r4, #20]
 80013c0:	60a2      	str	r2, [r4, #8]
 80013c2:	e7f4      	b.n	80013ae <__swsetup_r+0x8e>
 80013c4:	2000      	movs	r0, #0
 80013c6:	e7f7      	b.n	80013b8 <__swsetup_r+0x98>
 80013c8:	2000000c 	.word	0x2000000c

080013cc <_sbrk_r>:
 80013cc:	b538      	push	{r3, r4, r5, lr}
 80013ce:	4d06      	ldr	r5, [pc, #24]	@ (80013e8 <_sbrk_r+0x1c>)
 80013d0:	2300      	movs	r3, #0
 80013d2:	4604      	mov	r4, r0
 80013d4:	4608      	mov	r0, r1
 80013d6:	602b      	str	r3, [r5, #0]
 80013d8:	f7ff f83c 	bl	8000454 <_sbrk>
 80013dc:	1c43      	adds	r3, r0, #1
 80013de:	d102      	bne.n	80013e6 <_sbrk_r+0x1a>
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	b103      	cbz	r3, 80013e6 <_sbrk_r+0x1a>
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	bd38      	pop	{r3, r4, r5, pc}
 80013e8:	200001c4 	.word	0x200001c4

080013ec <__swhatbuf_r>:
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	460c      	mov	r4, r1
 80013f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013f4:	2900      	cmp	r1, #0
 80013f6:	b096      	sub	sp, #88	@ 0x58
 80013f8:	4615      	mov	r5, r2
 80013fa:	461e      	mov	r6, r3
 80013fc:	da0d      	bge.n	800141a <__swhatbuf_r+0x2e>
 80013fe:	89a3      	ldrh	r3, [r4, #12]
 8001400:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001404:	f04f 0100 	mov.w	r1, #0
 8001408:	bf14      	ite	ne
 800140a:	2340      	movne	r3, #64	@ 0x40
 800140c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001410:	2000      	movs	r0, #0
 8001412:	6031      	str	r1, [r6, #0]
 8001414:	602b      	str	r3, [r5, #0]
 8001416:	b016      	add	sp, #88	@ 0x58
 8001418:	bd70      	pop	{r4, r5, r6, pc}
 800141a:	466a      	mov	r2, sp
 800141c:	f000 f848 	bl	80014b0 <_fstat_r>
 8001420:	2800      	cmp	r0, #0
 8001422:	dbec      	blt.n	80013fe <__swhatbuf_r+0x12>
 8001424:	9901      	ldr	r1, [sp, #4]
 8001426:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800142a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800142e:	4259      	negs	r1, r3
 8001430:	4159      	adcs	r1, r3
 8001432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001436:	e7eb      	b.n	8001410 <__swhatbuf_r+0x24>

08001438 <__smakebuf_r>:
 8001438:	898b      	ldrh	r3, [r1, #12]
 800143a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800143c:	079d      	lsls	r5, r3, #30
 800143e:	4606      	mov	r6, r0
 8001440:	460c      	mov	r4, r1
 8001442:	d507      	bpl.n	8001454 <__smakebuf_r+0x1c>
 8001444:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001448:	6023      	str	r3, [r4, #0]
 800144a:	6123      	str	r3, [r4, #16]
 800144c:	2301      	movs	r3, #1
 800144e:	6163      	str	r3, [r4, #20]
 8001450:	b003      	add	sp, #12
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001454:	ab01      	add	r3, sp, #4
 8001456:	466a      	mov	r2, sp
 8001458:	f7ff ffc8 	bl	80013ec <__swhatbuf_r>
 800145c:	9f00      	ldr	r7, [sp, #0]
 800145e:	4605      	mov	r5, r0
 8001460:	4639      	mov	r1, r7
 8001462:	4630      	mov	r0, r6
 8001464:	f7ff fb16 	bl	8000a94 <_malloc_r>
 8001468:	b948      	cbnz	r0, 800147e <__smakebuf_r+0x46>
 800146a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800146e:	059a      	lsls	r2, r3, #22
 8001470:	d4ee      	bmi.n	8001450 <__smakebuf_r+0x18>
 8001472:	f023 0303 	bic.w	r3, r3, #3
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	81a3      	strh	r3, [r4, #12]
 800147c:	e7e2      	b.n	8001444 <__smakebuf_r+0xc>
 800147e:	89a3      	ldrh	r3, [r4, #12]
 8001480:	6020      	str	r0, [r4, #0]
 8001482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001486:	81a3      	strh	r3, [r4, #12]
 8001488:	9b01      	ldr	r3, [sp, #4]
 800148a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800148e:	b15b      	cbz	r3, 80014a8 <__smakebuf_r+0x70>
 8001490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001494:	4630      	mov	r0, r6
 8001496:	f000 f81d 	bl	80014d4 <_isatty_r>
 800149a:	b128      	cbz	r0, 80014a8 <__smakebuf_r+0x70>
 800149c:	89a3      	ldrh	r3, [r4, #12]
 800149e:	f023 0303 	bic.w	r3, r3, #3
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	81a3      	strh	r3, [r4, #12]
 80014a8:	89a3      	ldrh	r3, [r4, #12]
 80014aa:	431d      	orrs	r5, r3
 80014ac:	81a5      	strh	r5, [r4, #12]
 80014ae:	e7cf      	b.n	8001450 <__smakebuf_r+0x18>

080014b0 <_fstat_r>:
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4d07      	ldr	r5, [pc, #28]	@ (80014d0 <_fstat_r+0x20>)
 80014b4:	2300      	movs	r3, #0
 80014b6:	4604      	mov	r4, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	4611      	mov	r1, r2
 80014bc:	602b      	str	r3, [r5, #0]
 80014be:	f7fe ffa0 	bl	8000402 <_fstat>
 80014c2:	1c43      	adds	r3, r0, #1
 80014c4:	d102      	bne.n	80014cc <_fstat_r+0x1c>
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	b103      	cbz	r3, 80014cc <_fstat_r+0x1c>
 80014ca:	6023      	str	r3, [r4, #0]
 80014cc:	bd38      	pop	{r3, r4, r5, pc}
 80014ce:	bf00      	nop
 80014d0:	200001c4 	.word	0x200001c4

080014d4 <_isatty_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4d06      	ldr	r5, [pc, #24]	@ (80014f0 <_isatty_r+0x1c>)
 80014d8:	2300      	movs	r3, #0
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	602b      	str	r3, [r5, #0]
 80014e0:	f7fe ff9f 	bl	8000422 <_isatty>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_isatty_r+0x1a>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_isatty_r+0x1a>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	200001c4 	.word	0x200001c4

080014f4 <_init>:
 80014f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f6:	bf00      	nop
 80014f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fa:	bc08      	pop	{r3}
 80014fc:	469e      	mov	lr, r3
 80014fe:	4770      	bx	lr

08001500 <_fini>:
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001502:	bf00      	nop
 8001504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001506:	bc08      	pop	{r3}
 8001508:	469e      	mov	lr, r3
 800150a:	4770      	bx	lr
