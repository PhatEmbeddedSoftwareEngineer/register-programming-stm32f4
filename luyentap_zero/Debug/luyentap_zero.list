
luyentap_zero.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f48  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080010e8  080010e8  000020e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001128  08001128  00002454  2**0
                  CONTENTS
  4 .ARM          00000008  08001128  08001128  00002128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001130  08001130  00002454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001130  08001130  00002130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001134  08001134  00002134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000400  08001138  00002400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000454  0800118c  00002454  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800118c  000025c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014bc  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000654  00000000  00000000  00003940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00003f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000018f  00000000  00000000  000041d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002465  00000000  00000000  0000435f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002733  00000000  00000000  000067c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a1a  00000000  00000000  00008ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008b911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c3c  00000000  00000000  0008b954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0008c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000454 	.word	0x20000454
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080010d0 	.word	0x080010d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000458 	.word	0x20000458
 80001dc:	080010d0 	.word	0x080010d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <initUsart1>:
#define GPIOB_BASE_ADDR  0x40020400
#define USART1_BASE_ADDR  0x40011000


void initUsart1()
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	@ 0x24
 8000284:	af00      	add	r7, sp, #0
	// init clock gpiob
	uint32_t *RCC_AHB1ENR = (uint32_t*)(RCC_BASE_ADDR + 0x30);
 8000286:	4b26      	ldr	r3, [pc, #152]	@ (8000320 <initUsart1+0xa0>)
 8000288:	61fb      	str	r3, [r7, #28]
	*RCC_AHB1ENR |= (1U << 1);
 800028a:	69fb      	ldr	r3, [r7, #28]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f043 0202 	orr.w	r2, r3, #2
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	601a      	str	r2, [r3, #0]

	// init gpio pb6
	uint32_t *GPIOB_MODER = (uint32_t*)(GPIOB_BASE_ADDR);
 8000296:	4b23      	ldr	r3, [pc, #140]	@ (8000324 <initUsart1+0xa4>)
 8000298:	61bb      	str	r3, [r7, #24]
	*GPIOB_MODER |= (0b10 << 12);
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80002a2:	69bb      	ldr	r3, [r7, #24]
 80002a4:	601a      	str	r2, [r3, #0]

	uint32_t *GPIOB_AFRL = (uint32_t*)(GPIOB_BASE_ADDR + 0x20);
 80002a6:	4b20      	ldr	r3, [pc, #128]	@ (8000328 <initUsart1+0xa8>)
 80002a8:	617b      	str	r3, [r7, #20]
	*GPIOB_AFRL |= (0b0111 << 24);
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f043 62e0 	orr.w	r2, r3, #117440512	@ 0x7000000
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	601a      	str	r2, [r3, #0]

	// init clock usart1
	uint32_t *RCC_APB2ENR = (uint32_t*)(RCC_BASE_ADDR + 0x44);
 80002b6:	4b1d      	ldr	r3, [pc, #116]	@ (800032c <initUsart1+0xac>)
 80002b8:	613b      	str	r3, [r7, #16]
	*RCC_APB2ENR |= (1U << 4);
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f043 0210 	orr.w	r2, r3, #16
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	601a      	str	r2, [r3, #0]

	uint32_t *USART_CR1 = (uint32_t*)(USART1_BASE_ADDR + 0x0C);
 80002c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000330 <initUsart1+0xb0>)
 80002c8:	60fb      	str	r3, [r7, #12]
	*USART_CR1 &= ~ (1U << 15);
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]

	*USART_CR1 &= ~ (1U << 12);
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	601a      	str	r2, [r3, #0]

	uint32_t *USART_CR2 = (uint32_t*)(USART1_BASE_ADDR + 0x10);
 80002e2:	4b14      	ldr	r3, [pc, #80]	@ (8000334 <initUsart1+0xb4>)
 80002e4:	60bb      	str	r3, [r7, #8]
	*USART_CR2 &= ~ (3U << 12);
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	601a      	str	r2, [r3, #0]

	uint32_t *USART_BRR = (uint32_t*)(USART1_BASE_ADDR + 0x08);
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <initUsart1+0xb8>)
 80002f4:	607b      	str	r3, [r7, #4]
	*USART_BRR = (8U << 4) | (11U << 0);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	228b      	movs	r2, #139	@ 0x8b
 80002fa:	601a      	str	r2, [r3, #0]

	*USART_CR1 |= (1U << 3);
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f043 0208 	orr.w	r2, r3, #8
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	601a      	str	r2, [r3, #0]

	*USART_CR1 |= (1U << 13);
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	601a      	str	r2, [r3, #0]

}
 8000314:	bf00      	nop
 8000316:	3724      	adds	r7, #36	@ 0x24
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40023830 	.word	0x40023830
 8000324:	40020400 	.word	0x40020400
 8000328:	40020420 	.word	0x40020420
 800032c:	40023844 	.word	0x40023844
 8000330:	4001100c 	.word	0x4001100c
 8000334:	40011010 	.word	0x40011010
 8000338:	40011008 	.word	0x40011008

0800033c <transmissionEachByte>:

void transmissionEachByte(char *buf)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	uint32_t *USART_DR = (uint32_t*)(USART1_BASE_ADDR + 0x04);
 8000344:	4b12      	ldr	r3, [pc, #72]	@ (8000390 <transmissionEachByte+0x54>)
 8000346:	60fb      	str	r3, [r7, #12]
	uint32_t *USART_SR = (uint32_t*)(USART1_BASE_ADDR );
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <transmissionEachByte+0x58>)
 800034a:	60bb      	str	r3, [r7, #8]
	while(*buf)
 800034c:	e014      	b.n	8000378 <transmissionEachByte+0x3c>
	{
		while(!(*USART_SR & (1U << 6)));
 800034e:	bf00      	nop
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f9      	beq.n	8000350 <transmissionEachByte+0x14>
		*USART_DR = *buf++;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	1c5a      	adds	r2, r3, #1
 8000360:	607a      	str	r2, [r7, #4]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	461a      	mov	r2, r3
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	601a      	str	r2, [r3, #0]
		while(!(*USART_SR & (1U << 7)));
 800036a:	bf00      	nop
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000374:	2b00      	cmp	r3, #0
 8000376:	d0f9      	beq.n	800036c <transmissionEachByte+0x30>
	while(*buf)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d1e6      	bne.n	800034e <transmissionEachByte+0x12>
	}
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40011004 	.word	0x40011004
 8000394:	40011000 	.word	0x40011000

08000398 <my_printf>:

void my_printf(const char *fmt,...)
{
 8000398:	b40f      	push	{r0, r1, r2, r3}
 800039a:	b580      	push	{r7, lr}
 800039c:	b0c2      	sub	sp, #264	@ 0x108
 800039e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args,fmt);
 80003a0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80003a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	char buffer[256];
	vsnprintf(buffer,sizeof(buffer),fmt,args);
 80003a8:	1d38      	adds	r0, r7, #4
 80003aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80003ae:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80003b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003b6:	f000 fa05 	bl	80007c4 <vsniprintf>
	transmissionEachByte(buffer);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ffbd 	bl	800033c <transmissionEachByte>
	va_end(args);
}
 80003c2:	bf00      	nop
 80003c4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80003c8:	46bd      	mov	sp, r7
 80003ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003ce:	b004      	add	sp, #16
 80003d0:	4770      	bx	lr
	...

080003d4 <readStatePA0>:


}

bool readStatePA0()
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
	uint32_t *GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <readStatePA0+0x28>)
 80003dc:	607b      	str	r3, [r7, #4]
	return *GPIOA_IDR & 0b1;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	bf14      	ite	ne
 80003ea:	2301      	movne	r3, #1
 80003ec:	2300      	moveq	r3, #0
 80003ee:	b2db      	uxtb	r3, r3
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	40020010 	.word	0x40020010

08000400 <gpioPD15SetHigh>:
void gpioPD15SetHigh()
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
	uint32_t *GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14);
 8000406:	4b07      	ldr	r3, [pc, #28]	@ (8000424 <gpioPD15SetHigh+0x24>)
 8000408:	607b      	str	r3, [r7, #4]
	*GPIOD_ODR |= (1U << 15);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	601a      	str	r2, [r3, #0]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40020c14 	.word	0x40020c14

08000428 <gpioPD15SetLow>:
void gpioPD15SetLow()
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
	uint32_t *GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14);
 800042e:	4b07      	ldr	r3, [pc, #28]	@ (800044c <gpioPD15SetLow+0x24>)
 8000430:	607b      	str	r3, [r7, #4]
	*GPIOD_ODR &= ~ (1U << 15);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	601a      	str	r2, [r3, #0]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40020c14 	.word	0x40020c14

08000450 <my_handler>:
void my_handler()
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
	if(readStatePA0())
 8000456:	f7ff ffbd 	bl	80003d4 <readStatePA0>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d005      	beq.n	800046c <my_handler+0x1c>
	{
		gpioPD15SetHigh();
 8000460:	f7ff ffce 	bl	8000400 <gpioPD15SetHigh>
		my_printf("high\n");
 8000464:	480a      	ldr	r0, [pc, #40]	@ (8000490 <my_handler+0x40>)
 8000466:	f7ff ff97 	bl	8000398 <my_printf>
 800046a:	e004      	b.n	8000476 <my_handler+0x26>
	}
	else
	{
		gpioPD15SetLow();
 800046c:	f7ff ffdc 	bl	8000428 <gpioPD15SetLow>
		my_printf("low\n");
 8000470:	4808      	ldr	r0, [pc, #32]	@ (8000494 <my_handler+0x44>)
 8000472:	f7ff ff91 	bl	8000398 <my_printf>
	}
	uint32_t *EXTI_PR = (uint32_t*)(EXTI_BASE_ADDR + 0x14);
 8000476:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <my_handler+0x48>)
 8000478:	607b      	str	r3, [r7, #4]
	*EXTI_PR |= (1U << 0);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f043 0201 	orr.w	r2, r3, #1
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	601a      	str	r2, [r3, #0]
	//myPrintf("hello world\n");
}
 8000486:	bf00      	nop
 8000488:	3708      	adds	r7, #8
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	080010e8 	.word	0x080010e8
 8000494:	080010f0 	.word	0x080010f0
 8000498:	40013c14 	.word	0x40013c14

0800049c <button_interrupt_init>:
void button_interrupt_init()
{
 800049c:	b480      	push	{r7}
 800049e:	b08d      	sub	sp, #52	@ 0x34
 80004a0:	af00      	add	r7, sp, #0
	//enable clock for SYSCFG_EN
	uint32_t *RCC_APB2ENR = (uint32_t*)(RCC_BASE_ADDR + 0X44);
 80004a2:	4b2a      	ldr	r3, [pc, #168]	@ (800054c <button_interrupt_init+0xb0>)
 80004a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	*RCC_APB2ENR |= (1U << 14);
 80004a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80004ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004b0:	601a      	str	r2, [r3, #0]

	// choose port 0 for EXTI
	uint32_t *SYSCFG_EXTICR1 = (uint32_t*)(SYSCFG_BASE_ADDR+0x08);
 80004b2:	4b27      	ldr	r3, [pc, #156]	@ (8000550 <button_interrupt_init+0xb4>)
 80004b4:	627b      	str	r3, [r7, #36]	@ 0x24
	*SYSCFG_EXTICR1 &= (0b0000 << 0);
 80004b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]

	// choose falling edge
	uint32_t *EXTI_FTSR = (uint32_t *)(EXTI_BASE_ADDR + 0x0C);
 80004bc:	4b25      	ldr	r3, [pc, #148]	@ (8000554 <button_interrupt_init+0xb8>)
 80004be:	623b      	str	r3, [r7, #32]
	*EXTI_FTSR |= (1 << 0);
 80004c0:	6a3b      	ldr	r3, [r7, #32]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f043 0201 	orr.w	r2, r3, #1
 80004c8:	6a3b      	ldr	r3, [r7, #32]
 80004ca:	601a      	str	r2, [r3, #0]

	// choose rising edge
	uint32_t *EXTI_RTSR = (uint32_t*)(EXTI_BASE_ADDR + 0x08);
 80004cc:	4b22      	ldr	r3, [pc, #136]	@ (8000558 <button_interrupt_init+0xbc>)
 80004ce:	61fb      	str	r3, [r7, #28]
	*EXTI_RTSR |= (1U << 0);
 80004d0:	69fb      	ldr	r3, [r7, #28]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f043 0201 	orr.w	r2, r3, #1
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	601a      	str	r2, [r3, #0]

	// choose interrupt mask register
	uint32_t *EXTI_IMR = (uint32_t *)(EXTI_BASE_ADDR);
 80004dc:	4b1f      	ldr	r3, [pc, #124]	@ (800055c <button_interrupt_init+0xc0>)
 80004de:	61bb      	str	r3, [r7, #24]
	*EXTI_IMR |= (1U << 0);
 80004e0:	69bb      	ldr	r3, [r7, #24]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f043 0201 	orr.w	r2, r3, #1
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	601a      	str	r2, [r3, #0]

	// config NVIC accept signal from EXTI
	uint32_t *NVIC_ISER0 = (uint32_t*)NVIC_ISER_BASE_ADDR;
 80004ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <button_interrupt_init+0xc4>)
 80004ee:	617b      	str	r3, [r7, #20]
	*NVIC_ISER0 |= (1U << 6);
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	601a      	str	r2, [r3, #0]

	// copy vector table from 0x00 up 0x20000000
	char *vector_table = 0x00;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
	char *ram = (char*)0x20000000;
 8000500:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000504:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < 0x194; i++)
 8000506:	2300      	movs	r3, #0
 8000508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800050a:	e00a      	b.n	8000522 <button_interrupt_init+0x86>
	{
		ram[i] = vector_table[i];
 800050c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800050e:	693a      	ldr	r2, [r7, #16]
 8000510:	441a      	add	r2, r3
 8000512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000514:	68f9      	ldr	r1, [r7, #12]
 8000516:	440b      	add	r3, r1
 8000518:	7812      	ldrb	r2, [r2, #0]
 800051a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 0x194; i++)
 800051c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800051e:	3301      	adds	r3, #1
 8000520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000524:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 8000528:	dbf0      	blt.n	800050c <button_interrupt_init+0x70>
	}

	// notify with vector table
	uint32_t *VTOR = (uint32_t*)(VECTOR_TABLE_BASE_ADDR);
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <button_interrupt_init+0xc8>)
 800052c:	60bb      	str	r3, [r7, #8]
	*VTOR = 0x20000000;
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000534:	601a      	str	r2, [r3, #0]

	uint32_t *ptr =(uint32_t*) 0x20000058;
 8000536:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <button_interrupt_init+0xcc>)
 8000538:	607b      	str	r3, [r7, #4]
	*ptr = (uint32_t)my_handler;
 800053a:	4a0c      	ldr	r2, [pc, #48]	@ (800056c <button_interrupt_init+0xd0>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	601a      	str	r2, [r3, #0]
}
 8000540:	bf00      	nop
 8000542:	3734      	adds	r7, #52	@ 0x34
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	40023844 	.word	0x40023844
 8000550:	40013808 	.word	0x40013808
 8000554:	40013c0c 	.word	0x40013c0c
 8000558:	40013c08 	.word	0x40013c08
 800055c:	40013c00 	.word	0x40013c00
 8000560:	e000e100 	.word	0xe000e100
 8000564:	e000ed08 	.word	0xe000ed08
 8000568:	20000058 	.word	0x20000058
 800056c:	08000451 	.word	0x08000451

08000570 <initButton>:

void initButton()
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
	uint32_t *RCC_AHB1ENR = (uint32_t*)(RCC_BASE_ADDR + 0x30);
 8000576:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <initButton+0x34>)
 8000578:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR |= (1U << 0);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f043 0201 	orr.w	r2, r3, #1
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	601a      	str	r2, [r3, #0]
	uint32_t *GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR);
 8000586:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <initButton+0x38>)
 8000588:	603b      	str	r3, [r7, #0]
	*GPIOA_MODER &= ~ (3U << 0);
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f023 0203 	bic.w	r2, r3, #3
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	601a      	str	r2, [r3, #0]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	40023830 	.word	0x40023830
 80005a8:	40020000 	.word	0x40020000

080005ac <initGpioPD15_output>:

void initGpioPD15_output()
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
	uint32_t *RCC_AHB1ENR = (uint32_t*)(RCC_BASE_ADDR + 0x30);
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <initGpioPD15_output+0x34>)
 80005b4:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR |= (1U << 3);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f043 0208 	orr.w	r2, r3, #8
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
	uint32_t *GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR);
 80005c2:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <initGpioPD15_output+0x38>)
 80005c4:	603b      	str	r3, [r7, #0]
	*GPIOD_MODER |= (0b01<<30);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	601a      	str	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40023830 	.word	0x40023830
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <main>:

int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	initButton();
 80005ec:	f7ff ffc0 	bl	8000570 <initButton>
	initGpioPD15_output();
 80005f0:	f7ff ffdc 	bl	80005ac <initGpioPD15_output>
	button_interrupt_init();
 80005f4:	f7ff ff52 	bl	800049c <button_interrupt_init>
	initUsart1();
 80005f8:	f7ff fe42 	bl	8000280 <initUsart1>
	//int cnt = 0;
	while(1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <main+0x14>

08000600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <NMI_Handler+0x4>

08000608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <HardFault_Handler+0x4>

08000610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <MemManage_Handler+0x4>

08000618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <BusFault_Handler+0x4>

08000620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <UsageFault_Handler+0x4>

08000628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000656:	f000 f875 	bl	8000744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000668:	4a14      	ldr	r2, [pc, #80]	@ (80006bc <_sbrk+0x5c>)
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <_sbrk+0x60>)
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <_sbrk+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d102      	bne.n	8000682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800067c:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <_sbrk+0x64>)
 800067e:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <_sbrk+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000682:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	429a      	cmp	r2, r3
 800068e:	d207      	bcs.n	80006a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000690:	f000 f8a6 	bl	80007e0 <__errno>
 8000694:	4603      	mov	r3, r0
 8000696:	220c      	movs	r2, #12
 8000698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	e009      	b.n	80006b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a6:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	4a05      	ldr	r2, [pc, #20]	@ (80006c4 <_sbrk+0x64>)
 80006b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006b2:	68fb      	ldr	r3, [r7, #12]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20020000 	.word	0x20020000
 80006c0:	00000400 	.word	0x00000400
 80006c4:	20000470 	.word	0x20000470
 80006c8:	200005c0 	.word	0x200005c0

080006cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <SystemInit+0x20>)
 80006d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006d6:	4a05      	ldr	r2, [pc, #20]	@ (80006ec <SystemInit+0x20>)
 80006d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80006f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000728 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006f4:	f7ff ffea 	bl	80006cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	@ (800072c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	@ (8000730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	@ (8000738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	@ (800073c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071e:	f000 f865 	bl	80007ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000722:	f7ff ff61 	bl	80005e8 <main>
  bx  lr    
 8000726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800072c:	20000400 	.word	0x20000400
  ldr r1, =_edata
 8000730:	20000454 	.word	0x20000454
  ldr r2, =_sidata
 8000734:	08001138 	.word	0x08001138
  ldr r2, =_sbss
 8000738:	20000454 	.word	0x20000454
  ldr r4, =_ebss
 800073c:	200005c0 	.word	0x200005c0

08000740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC_IRQHandler>
	...

08000744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000748:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <HAL_IncTick+0x20>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <HAL_IncTick+0x24>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a04      	ldr	r2, [pc, #16]	@ (8000768 <HAL_IncTick+0x24>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	20000400 	.word	0x20000400
 8000768:	20000474 	.word	0x20000474

0800076c <_vsniprintf_r>:
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	4614      	mov	r4, r2
 8000770:	2c00      	cmp	r4, #0
 8000772:	b09b      	sub	sp, #108	@ 0x6c
 8000774:	4605      	mov	r5, r0
 8000776:	461a      	mov	r2, r3
 8000778:	da05      	bge.n	8000786 <_vsniprintf_r+0x1a>
 800077a:	238b      	movs	r3, #139	@ 0x8b
 800077c:	6003      	str	r3, [r0, #0]
 800077e:	f04f 30ff 	mov.w	r0, #4294967295
 8000782:	b01b      	add	sp, #108	@ 0x6c
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800078a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800078e:	bf14      	ite	ne
 8000790:	f104 33ff 	addne.w	r3, r4, #4294967295
 8000794:	4623      	moveq	r3, r4
 8000796:	9302      	str	r3, [sp, #8]
 8000798:	9305      	str	r3, [sp, #20]
 800079a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800079e:	9100      	str	r1, [sp, #0]
 80007a0:	9104      	str	r1, [sp, #16]
 80007a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80007a6:	4669      	mov	r1, sp
 80007a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80007aa:	f000 f999 	bl	8000ae0 <_svfiprintf_r>
 80007ae:	1c43      	adds	r3, r0, #1
 80007b0:	bfbc      	itt	lt
 80007b2:	238b      	movlt	r3, #139	@ 0x8b
 80007b4:	602b      	strlt	r3, [r5, #0]
 80007b6:	2c00      	cmp	r4, #0
 80007b8:	d0e3      	beq.n	8000782 <_vsniprintf_r+0x16>
 80007ba:	9b00      	ldr	r3, [sp, #0]
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
 80007c0:	e7df      	b.n	8000782 <_vsniprintf_r+0x16>
	...

080007c4 <vsniprintf>:
 80007c4:	b507      	push	{r0, r1, r2, lr}
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	4613      	mov	r3, r2
 80007ca:	460a      	mov	r2, r1
 80007cc:	4601      	mov	r1, r0
 80007ce:	4803      	ldr	r0, [pc, #12]	@ (80007dc <vsniprintf+0x18>)
 80007d0:	6800      	ldr	r0, [r0, #0]
 80007d2:	f7ff ffcb 	bl	800076c <_vsniprintf_r>
 80007d6:	b003      	add	sp, #12
 80007d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80007dc:	20000404 	.word	0x20000404

080007e0 <__errno>:
 80007e0:	4b01      	ldr	r3, [pc, #4]	@ (80007e8 <__errno+0x8>)
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000404 	.word	0x20000404

080007ec <__libc_init_array>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000824 <__libc_init_array+0x38>)
 80007f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000828 <__libc_init_array+0x3c>)
 80007f2:	1b64      	subs	r4, r4, r5
 80007f4:	10a4      	asrs	r4, r4, #2
 80007f6:	2600      	movs	r6, #0
 80007f8:	42a6      	cmp	r6, r4
 80007fa:	d109      	bne.n	8000810 <__libc_init_array+0x24>
 80007fc:	4d0b      	ldr	r5, [pc, #44]	@ (800082c <__libc_init_array+0x40>)
 80007fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000830 <__libc_init_array+0x44>)
 8000800:	f000 fc66 	bl	80010d0 <_init>
 8000804:	1b64      	subs	r4, r4, r5
 8000806:	10a4      	asrs	r4, r4, #2
 8000808:	2600      	movs	r6, #0
 800080a:	42a6      	cmp	r6, r4
 800080c:	d105      	bne.n	800081a <__libc_init_array+0x2e>
 800080e:	bd70      	pop	{r4, r5, r6, pc}
 8000810:	f855 3b04 	ldr.w	r3, [r5], #4
 8000814:	4798      	blx	r3
 8000816:	3601      	adds	r6, #1
 8000818:	e7ee      	b.n	80007f8 <__libc_init_array+0xc>
 800081a:	f855 3b04 	ldr.w	r3, [r5], #4
 800081e:	4798      	blx	r3
 8000820:	3601      	adds	r6, #1
 8000822:	e7f2      	b.n	800080a <__libc_init_array+0x1e>
 8000824:	08001130 	.word	0x08001130
 8000828:	08001130 	.word	0x08001130
 800082c:	08001130 	.word	0x08001130
 8000830:	08001134 	.word	0x08001134

08000834 <__retarget_lock_acquire_recursive>:
 8000834:	4770      	bx	lr

08000836 <__retarget_lock_release_recursive>:
 8000836:	4770      	bx	lr

08000838 <_free_r>:
 8000838:	b538      	push	{r3, r4, r5, lr}
 800083a:	4605      	mov	r5, r0
 800083c:	2900      	cmp	r1, #0
 800083e:	d041      	beq.n	80008c4 <_free_r+0x8c>
 8000840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000844:	1f0c      	subs	r4, r1, #4
 8000846:	2b00      	cmp	r3, #0
 8000848:	bfb8      	it	lt
 800084a:	18e4      	addlt	r4, r4, r3
 800084c:	f000 f8e0 	bl	8000a10 <__malloc_lock>
 8000850:	4a1d      	ldr	r2, [pc, #116]	@ (80008c8 <_free_r+0x90>)
 8000852:	6813      	ldr	r3, [r2, #0]
 8000854:	b933      	cbnz	r3, 8000864 <_free_r+0x2c>
 8000856:	6063      	str	r3, [r4, #4]
 8000858:	6014      	str	r4, [r2, #0]
 800085a:	4628      	mov	r0, r5
 800085c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000860:	f000 b8dc 	b.w	8000a1c <__malloc_unlock>
 8000864:	42a3      	cmp	r3, r4
 8000866:	d908      	bls.n	800087a <_free_r+0x42>
 8000868:	6820      	ldr	r0, [r4, #0]
 800086a:	1821      	adds	r1, r4, r0
 800086c:	428b      	cmp	r3, r1
 800086e:	bf01      	itttt	eq
 8000870:	6819      	ldreq	r1, [r3, #0]
 8000872:	685b      	ldreq	r3, [r3, #4]
 8000874:	1809      	addeq	r1, r1, r0
 8000876:	6021      	streq	r1, [r4, #0]
 8000878:	e7ed      	b.n	8000856 <_free_r+0x1e>
 800087a:	461a      	mov	r2, r3
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	b10b      	cbz	r3, 8000884 <_free_r+0x4c>
 8000880:	42a3      	cmp	r3, r4
 8000882:	d9fa      	bls.n	800087a <_free_r+0x42>
 8000884:	6811      	ldr	r1, [r2, #0]
 8000886:	1850      	adds	r0, r2, r1
 8000888:	42a0      	cmp	r0, r4
 800088a:	d10b      	bne.n	80008a4 <_free_r+0x6c>
 800088c:	6820      	ldr	r0, [r4, #0]
 800088e:	4401      	add	r1, r0
 8000890:	1850      	adds	r0, r2, r1
 8000892:	4283      	cmp	r3, r0
 8000894:	6011      	str	r1, [r2, #0]
 8000896:	d1e0      	bne.n	800085a <_free_r+0x22>
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	6053      	str	r3, [r2, #4]
 800089e:	4408      	add	r0, r1
 80008a0:	6010      	str	r0, [r2, #0]
 80008a2:	e7da      	b.n	800085a <_free_r+0x22>
 80008a4:	d902      	bls.n	80008ac <_free_r+0x74>
 80008a6:	230c      	movs	r3, #12
 80008a8:	602b      	str	r3, [r5, #0]
 80008aa:	e7d6      	b.n	800085a <_free_r+0x22>
 80008ac:	6820      	ldr	r0, [r4, #0]
 80008ae:	1821      	adds	r1, r4, r0
 80008b0:	428b      	cmp	r3, r1
 80008b2:	bf04      	itt	eq
 80008b4:	6819      	ldreq	r1, [r3, #0]
 80008b6:	685b      	ldreq	r3, [r3, #4]
 80008b8:	6063      	str	r3, [r4, #4]
 80008ba:	bf04      	itt	eq
 80008bc:	1809      	addeq	r1, r1, r0
 80008be:	6021      	streq	r1, [r4, #0]
 80008c0:	6054      	str	r4, [r2, #4]
 80008c2:	e7ca      	b.n	800085a <_free_r+0x22>
 80008c4:	bd38      	pop	{r3, r4, r5, pc}
 80008c6:	bf00      	nop
 80008c8:	200005bc 	.word	0x200005bc

080008cc <sbrk_aligned>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	4e0f      	ldr	r6, [pc, #60]	@ (800090c <sbrk_aligned+0x40>)
 80008d0:	460c      	mov	r4, r1
 80008d2:	6831      	ldr	r1, [r6, #0]
 80008d4:	4605      	mov	r5, r0
 80008d6:	b911      	cbnz	r1, 80008de <sbrk_aligned+0x12>
 80008d8:	f000 fba6 	bl	8001028 <_sbrk_r>
 80008dc:	6030      	str	r0, [r6, #0]
 80008de:	4621      	mov	r1, r4
 80008e0:	4628      	mov	r0, r5
 80008e2:	f000 fba1 	bl	8001028 <_sbrk_r>
 80008e6:	1c43      	adds	r3, r0, #1
 80008e8:	d103      	bne.n	80008f2 <sbrk_aligned+0x26>
 80008ea:	f04f 34ff 	mov.w	r4, #4294967295
 80008ee:	4620      	mov	r0, r4
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	1cc4      	adds	r4, r0, #3
 80008f4:	f024 0403 	bic.w	r4, r4, #3
 80008f8:	42a0      	cmp	r0, r4
 80008fa:	d0f8      	beq.n	80008ee <sbrk_aligned+0x22>
 80008fc:	1a21      	subs	r1, r4, r0
 80008fe:	4628      	mov	r0, r5
 8000900:	f000 fb92 	bl	8001028 <_sbrk_r>
 8000904:	3001      	adds	r0, #1
 8000906:	d1f2      	bne.n	80008ee <sbrk_aligned+0x22>
 8000908:	e7ef      	b.n	80008ea <sbrk_aligned+0x1e>
 800090a:	bf00      	nop
 800090c:	200005b8 	.word	0x200005b8

08000910 <_malloc_r>:
 8000910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000914:	1ccd      	adds	r5, r1, #3
 8000916:	f025 0503 	bic.w	r5, r5, #3
 800091a:	3508      	adds	r5, #8
 800091c:	2d0c      	cmp	r5, #12
 800091e:	bf38      	it	cc
 8000920:	250c      	movcc	r5, #12
 8000922:	2d00      	cmp	r5, #0
 8000924:	4606      	mov	r6, r0
 8000926:	db01      	blt.n	800092c <_malloc_r+0x1c>
 8000928:	42a9      	cmp	r1, r5
 800092a:	d904      	bls.n	8000936 <_malloc_r+0x26>
 800092c:	230c      	movs	r3, #12
 800092e:	6033      	str	r3, [r6, #0]
 8000930:	2000      	movs	r0, #0
 8000932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a0c <_malloc_r+0xfc>
 800093a:	f000 f869 	bl	8000a10 <__malloc_lock>
 800093e:	f8d8 3000 	ldr.w	r3, [r8]
 8000942:	461c      	mov	r4, r3
 8000944:	bb44      	cbnz	r4, 8000998 <_malloc_r+0x88>
 8000946:	4629      	mov	r1, r5
 8000948:	4630      	mov	r0, r6
 800094a:	f7ff ffbf 	bl	80008cc <sbrk_aligned>
 800094e:	1c43      	adds	r3, r0, #1
 8000950:	4604      	mov	r4, r0
 8000952:	d158      	bne.n	8000a06 <_malloc_r+0xf6>
 8000954:	f8d8 4000 	ldr.w	r4, [r8]
 8000958:	4627      	mov	r7, r4
 800095a:	2f00      	cmp	r7, #0
 800095c:	d143      	bne.n	80009e6 <_malloc_r+0xd6>
 800095e:	2c00      	cmp	r4, #0
 8000960:	d04b      	beq.n	80009fa <_malloc_r+0xea>
 8000962:	6823      	ldr	r3, [r4, #0]
 8000964:	4639      	mov	r1, r7
 8000966:	4630      	mov	r0, r6
 8000968:	eb04 0903 	add.w	r9, r4, r3
 800096c:	f000 fb5c 	bl	8001028 <_sbrk_r>
 8000970:	4581      	cmp	r9, r0
 8000972:	d142      	bne.n	80009fa <_malloc_r+0xea>
 8000974:	6821      	ldr	r1, [r4, #0]
 8000976:	1a6d      	subs	r5, r5, r1
 8000978:	4629      	mov	r1, r5
 800097a:	4630      	mov	r0, r6
 800097c:	f7ff ffa6 	bl	80008cc <sbrk_aligned>
 8000980:	3001      	adds	r0, #1
 8000982:	d03a      	beq.n	80009fa <_malloc_r+0xea>
 8000984:	6823      	ldr	r3, [r4, #0]
 8000986:	442b      	add	r3, r5
 8000988:	6023      	str	r3, [r4, #0]
 800098a:	f8d8 3000 	ldr.w	r3, [r8]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	bb62      	cbnz	r2, 80009ec <_malloc_r+0xdc>
 8000992:	f8c8 7000 	str.w	r7, [r8]
 8000996:	e00f      	b.n	80009b8 <_malloc_r+0xa8>
 8000998:	6822      	ldr	r2, [r4, #0]
 800099a:	1b52      	subs	r2, r2, r5
 800099c:	d420      	bmi.n	80009e0 <_malloc_r+0xd0>
 800099e:	2a0b      	cmp	r2, #11
 80009a0:	d917      	bls.n	80009d2 <_malloc_r+0xc2>
 80009a2:	1961      	adds	r1, r4, r5
 80009a4:	42a3      	cmp	r3, r4
 80009a6:	6025      	str	r5, [r4, #0]
 80009a8:	bf18      	it	ne
 80009aa:	6059      	strne	r1, [r3, #4]
 80009ac:	6863      	ldr	r3, [r4, #4]
 80009ae:	bf08      	it	eq
 80009b0:	f8c8 1000 	streq.w	r1, [r8]
 80009b4:	5162      	str	r2, [r4, r5]
 80009b6:	604b      	str	r3, [r1, #4]
 80009b8:	4630      	mov	r0, r6
 80009ba:	f000 f82f 	bl	8000a1c <__malloc_unlock>
 80009be:	f104 000b 	add.w	r0, r4, #11
 80009c2:	1d23      	adds	r3, r4, #4
 80009c4:	f020 0007 	bic.w	r0, r0, #7
 80009c8:	1ac2      	subs	r2, r0, r3
 80009ca:	bf1c      	itt	ne
 80009cc:	1a1b      	subne	r3, r3, r0
 80009ce:	50a3      	strne	r3, [r4, r2]
 80009d0:	e7af      	b.n	8000932 <_malloc_r+0x22>
 80009d2:	6862      	ldr	r2, [r4, #4]
 80009d4:	42a3      	cmp	r3, r4
 80009d6:	bf0c      	ite	eq
 80009d8:	f8c8 2000 	streq.w	r2, [r8]
 80009dc:	605a      	strne	r2, [r3, #4]
 80009de:	e7eb      	b.n	80009b8 <_malloc_r+0xa8>
 80009e0:	4623      	mov	r3, r4
 80009e2:	6864      	ldr	r4, [r4, #4]
 80009e4:	e7ae      	b.n	8000944 <_malloc_r+0x34>
 80009e6:	463c      	mov	r4, r7
 80009e8:	687f      	ldr	r7, [r7, #4]
 80009ea:	e7b6      	b.n	800095a <_malloc_r+0x4a>
 80009ec:	461a      	mov	r2, r3
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	42a3      	cmp	r3, r4
 80009f2:	d1fb      	bne.n	80009ec <_malloc_r+0xdc>
 80009f4:	2300      	movs	r3, #0
 80009f6:	6053      	str	r3, [r2, #4]
 80009f8:	e7de      	b.n	80009b8 <_malloc_r+0xa8>
 80009fa:	230c      	movs	r3, #12
 80009fc:	6033      	str	r3, [r6, #0]
 80009fe:	4630      	mov	r0, r6
 8000a00:	f000 f80c 	bl	8000a1c <__malloc_unlock>
 8000a04:	e794      	b.n	8000930 <_malloc_r+0x20>
 8000a06:	6005      	str	r5, [r0, #0]
 8000a08:	e7d6      	b.n	80009b8 <_malloc_r+0xa8>
 8000a0a:	bf00      	nop
 8000a0c:	200005bc 	.word	0x200005bc

08000a10 <__malloc_lock>:
 8000a10:	4801      	ldr	r0, [pc, #4]	@ (8000a18 <__malloc_lock+0x8>)
 8000a12:	f7ff bf0f 	b.w	8000834 <__retarget_lock_acquire_recursive>
 8000a16:	bf00      	nop
 8000a18:	200005b4 	.word	0x200005b4

08000a1c <__malloc_unlock>:
 8000a1c:	4801      	ldr	r0, [pc, #4]	@ (8000a24 <__malloc_unlock+0x8>)
 8000a1e:	f7ff bf0a 	b.w	8000836 <__retarget_lock_release_recursive>
 8000a22:	bf00      	nop
 8000a24:	200005b4 	.word	0x200005b4

08000a28 <__ssputs_r>:
 8000a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a2c:	688e      	ldr	r6, [r1, #8]
 8000a2e:	461f      	mov	r7, r3
 8000a30:	42be      	cmp	r6, r7
 8000a32:	680b      	ldr	r3, [r1, #0]
 8000a34:	4682      	mov	sl, r0
 8000a36:	460c      	mov	r4, r1
 8000a38:	4690      	mov	r8, r2
 8000a3a:	d82d      	bhi.n	8000a98 <__ssputs_r+0x70>
 8000a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a44:	d026      	beq.n	8000a94 <__ssputs_r+0x6c>
 8000a46:	6965      	ldr	r5, [r4, #20]
 8000a48:	6909      	ldr	r1, [r1, #16]
 8000a4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a4e:	eba3 0901 	sub.w	r9, r3, r1
 8000a52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a56:	1c7b      	adds	r3, r7, #1
 8000a58:	444b      	add	r3, r9
 8000a5a:	106d      	asrs	r5, r5, #1
 8000a5c:	429d      	cmp	r5, r3
 8000a5e:	bf38      	it	cc
 8000a60:	461d      	movcc	r5, r3
 8000a62:	0553      	lsls	r3, r2, #21
 8000a64:	d527      	bpl.n	8000ab6 <__ssputs_r+0x8e>
 8000a66:	4629      	mov	r1, r5
 8000a68:	f7ff ff52 	bl	8000910 <_malloc_r>
 8000a6c:	4606      	mov	r6, r0
 8000a6e:	b360      	cbz	r0, 8000aca <__ssputs_r+0xa2>
 8000a70:	6921      	ldr	r1, [r4, #16]
 8000a72:	464a      	mov	r2, r9
 8000a74:	f000 fae8 	bl	8001048 <memcpy>
 8000a78:	89a3      	ldrh	r3, [r4, #12]
 8000a7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a82:	81a3      	strh	r3, [r4, #12]
 8000a84:	6126      	str	r6, [r4, #16]
 8000a86:	6165      	str	r5, [r4, #20]
 8000a88:	444e      	add	r6, r9
 8000a8a:	eba5 0509 	sub.w	r5, r5, r9
 8000a8e:	6026      	str	r6, [r4, #0]
 8000a90:	60a5      	str	r5, [r4, #8]
 8000a92:	463e      	mov	r6, r7
 8000a94:	42be      	cmp	r6, r7
 8000a96:	d900      	bls.n	8000a9a <__ssputs_r+0x72>
 8000a98:	463e      	mov	r6, r7
 8000a9a:	6820      	ldr	r0, [r4, #0]
 8000a9c:	4632      	mov	r2, r6
 8000a9e:	4641      	mov	r1, r8
 8000aa0:	f000 faa8 	bl	8000ff4 <memmove>
 8000aa4:	68a3      	ldr	r3, [r4, #8]
 8000aa6:	1b9b      	subs	r3, r3, r6
 8000aa8:	60a3      	str	r3, [r4, #8]
 8000aaa:	6823      	ldr	r3, [r4, #0]
 8000aac:	4433      	add	r3, r6
 8000aae:	6023      	str	r3, [r4, #0]
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	462a      	mov	r2, r5
 8000ab8:	f000 fad4 	bl	8001064 <_realloc_r>
 8000abc:	4606      	mov	r6, r0
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	d1e0      	bne.n	8000a84 <__ssputs_r+0x5c>
 8000ac2:	6921      	ldr	r1, [r4, #16]
 8000ac4:	4650      	mov	r0, sl
 8000ac6:	f7ff feb7 	bl	8000838 <_free_r>
 8000aca:	230c      	movs	r3, #12
 8000acc:	f8ca 3000 	str.w	r3, [sl]
 8000ad0:	89a3      	ldrh	r3, [r4, #12]
 8000ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ad6:	81a3      	strh	r3, [r4, #12]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	e7e9      	b.n	8000ab2 <__ssputs_r+0x8a>
	...

08000ae0 <_svfiprintf_r>:
 8000ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae4:	4698      	mov	r8, r3
 8000ae6:	898b      	ldrh	r3, [r1, #12]
 8000ae8:	061b      	lsls	r3, r3, #24
 8000aea:	b09d      	sub	sp, #116	@ 0x74
 8000aec:	4607      	mov	r7, r0
 8000aee:	460d      	mov	r5, r1
 8000af0:	4614      	mov	r4, r2
 8000af2:	d510      	bpl.n	8000b16 <_svfiprintf_r+0x36>
 8000af4:	690b      	ldr	r3, [r1, #16]
 8000af6:	b973      	cbnz	r3, 8000b16 <_svfiprintf_r+0x36>
 8000af8:	2140      	movs	r1, #64	@ 0x40
 8000afa:	f7ff ff09 	bl	8000910 <_malloc_r>
 8000afe:	6028      	str	r0, [r5, #0]
 8000b00:	6128      	str	r0, [r5, #16]
 8000b02:	b930      	cbnz	r0, 8000b12 <_svfiprintf_r+0x32>
 8000b04:	230c      	movs	r3, #12
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	b01d      	add	sp, #116	@ 0x74
 8000b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b12:	2340      	movs	r3, #64	@ 0x40
 8000b14:	616b      	str	r3, [r5, #20]
 8000b16:	2300      	movs	r3, #0
 8000b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b1a:	2320      	movs	r3, #32
 8000b1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b24:	2330      	movs	r3, #48	@ 0x30
 8000b26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000cc4 <_svfiprintf_r+0x1e4>
 8000b2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b2e:	f04f 0901 	mov.w	r9, #1
 8000b32:	4623      	mov	r3, r4
 8000b34:	469a      	mov	sl, r3
 8000b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b3a:	b10a      	cbz	r2, 8000b40 <_svfiprintf_r+0x60>
 8000b3c:	2a25      	cmp	r2, #37	@ 0x25
 8000b3e:	d1f9      	bne.n	8000b34 <_svfiprintf_r+0x54>
 8000b40:	ebba 0b04 	subs.w	fp, sl, r4
 8000b44:	d00b      	beq.n	8000b5e <_svfiprintf_r+0x7e>
 8000b46:	465b      	mov	r3, fp
 8000b48:	4622      	mov	r2, r4
 8000b4a:	4629      	mov	r1, r5
 8000b4c:	4638      	mov	r0, r7
 8000b4e:	f7ff ff6b 	bl	8000a28 <__ssputs_r>
 8000b52:	3001      	adds	r0, #1
 8000b54:	f000 80a7 	beq.w	8000ca6 <_svfiprintf_r+0x1c6>
 8000b58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b5a:	445a      	add	r2, fp
 8000b5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 809f 	beq.w	8000ca6 <_svfiprintf_r+0x1c6>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b72:	f10a 0a01 	add.w	sl, sl, #1
 8000b76:	9304      	str	r3, [sp, #16]
 8000b78:	9307      	str	r3, [sp, #28]
 8000b7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b80:	4654      	mov	r4, sl
 8000b82:	2205      	movs	r2, #5
 8000b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b88:	484e      	ldr	r0, [pc, #312]	@ (8000cc4 <_svfiprintf_r+0x1e4>)
 8000b8a:	f7ff fb29 	bl	80001e0 <memchr>
 8000b8e:	9a04      	ldr	r2, [sp, #16]
 8000b90:	b9d8      	cbnz	r0, 8000bca <_svfiprintf_r+0xea>
 8000b92:	06d0      	lsls	r0, r2, #27
 8000b94:	bf44      	itt	mi
 8000b96:	2320      	movmi	r3, #32
 8000b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b9c:	0711      	lsls	r1, r2, #28
 8000b9e:	bf44      	itt	mi
 8000ba0:	232b      	movmi	r3, #43	@ 0x2b
 8000ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8000baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bac:	d015      	beq.n	8000bda <_svfiprintf_r+0xfa>
 8000bae:	9a07      	ldr	r2, [sp, #28]
 8000bb0:	4654      	mov	r4, sl
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f04f 0c0a 	mov.w	ip, #10
 8000bb8:	4621      	mov	r1, r4
 8000bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bbe:	3b30      	subs	r3, #48	@ 0x30
 8000bc0:	2b09      	cmp	r3, #9
 8000bc2:	d94b      	bls.n	8000c5c <_svfiprintf_r+0x17c>
 8000bc4:	b1b0      	cbz	r0, 8000bf4 <_svfiprintf_r+0x114>
 8000bc6:	9207      	str	r2, [sp, #28]
 8000bc8:	e014      	b.n	8000bf4 <_svfiprintf_r+0x114>
 8000bca:	eba0 0308 	sub.w	r3, r0, r8
 8000bce:	fa09 f303 	lsl.w	r3, r9, r3
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	9304      	str	r3, [sp, #16]
 8000bd6:	46a2      	mov	sl, r4
 8000bd8:	e7d2      	b.n	8000b80 <_svfiprintf_r+0xa0>
 8000bda:	9b03      	ldr	r3, [sp, #12]
 8000bdc:	1d19      	adds	r1, r3, #4
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	9103      	str	r1, [sp, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	bfbb      	ittet	lt
 8000be6:	425b      	neglt	r3, r3
 8000be8:	f042 0202 	orrlt.w	r2, r2, #2
 8000bec:	9307      	strge	r3, [sp, #28]
 8000bee:	9307      	strlt	r3, [sp, #28]
 8000bf0:	bfb8      	it	lt
 8000bf2:	9204      	strlt	r2, [sp, #16]
 8000bf4:	7823      	ldrb	r3, [r4, #0]
 8000bf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bf8:	d10a      	bne.n	8000c10 <_svfiprintf_r+0x130>
 8000bfa:	7863      	ldrb	r3, [r4, #1]
 8000bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bfe:	d132      	bne.n	8000c66 <_svfiprintf_r+0x186>
 8000c00:	9b03      	ldr	r3, [sp, #12]
 8000c02:	1d1a      	adds	r2, r3, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	9203      	str	r2, [sp, #12]
 8000c08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c0c:	3402      	adds	r4, #2
 8000c0e:	9305      	str	r3, [sp, #20]
 8000c10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000cd4 <_svfiprintf_r+0x1f4>
 8000c14:	7821      	ldrb	r1, [r4, #0]
 8000c16:	2203      	movs	r2, #3
 8000c18:	4650      	mov	r0, sl
 8000c1a:	f7ff fae1 	bl	80001e0 <memchr>
 8000c1e:	b138      	cbz	r0, 8000c30 <_svfiprintf_r+0x150>
 8000c20:	9b04      	ldr	r3, [sp, #16]
 8000c22:	eba0 000a 	sub.w	r0, r0, sl
 8000c26:	2240      	movs	r2, #64	@ 0x40
 8000c28:	4082      	lsls	r2, r0
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	3401      	adds	r4, #1
 8000c2e:	9304      	str	r3, [sp, #16]
 8000c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c34:	4824      	ldr	r0, [pc, #144]	@ (8000cc8 <_svfiprintf_r+0x1e8>)
 8000c36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c3a:	2206      	movs	r2, #6
 8000c3c:	f7ff fad0 	bl	80001e0 <memchr>
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d036      	beq.n	8000cb2 <_svfiprintf_r+0x1d2>
 8000c44:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <_svfiprintf_r+0x1ec>)
 8000c46:	bb1b      	cbnz	r3, 8000c90 <_svfiprintf_r+0x1b0>
 8000c48:	9b03      	ldr	r3, [sp, #12]
 8000c4a:	3307      	adds	r3, #7
 8000c4c:	f023 0307 	bic.w	r3, r3, #7
 8000c50:	3308      	adds	r3, #8
 8000c52:	9303      	str	r3, [sp, #12]
 8000c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c56:	4433      	add	r3, r6
 8000c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c5a:	e76a      	b.n	8000b32 <_svfiprintf_r+0x52>
 8000c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c60:	460c      	mov	r4, r1
 8000c62:	2001      	movs	r0, #1
 8000c64:	e7a8      	b.n	8000bb8 <_svfiprintf_r+0xd8>
 8000c66:	2300      	movs	r3, #0
 8000c68:	3401      	adds	r4, #1
 8000c6a:	9305      	str	r3, [sp, #20]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f04f 0c0a 	mov.w	ip, #10
 8000c72:	4620      	mov	r0, r4
 8000c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c78:	3a30      	subs	r2, #48	@ 0x30
 8000c7a:	2a09      	cmp	r2, #9
 8000c7c:	d903      	bls.n	8000c86 <_svfiprintf_r+0x1a6>
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0c6      	beq.n	8000c10 <_svfiprintf_r+0x130>
 8000c82:	9105      	str	r1, [sp, #20]
 8000c84:	e7c4      	b.n	8000c10 <_svfiprintf_r+0x130>
 8000c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e7f0      	b.n	8000c72 <_svfiprintf_r+0x192>
 8000c90:	ab03      	add	r3, sp, #12
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	462a      	mov	r2, r5
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <_svfiprintf_r+0x1f0>)
 8000c98:	a904      	add	r1, sp, #16
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	f3af 8000 	nop.w
 8000ca0:	1c42      	adds	r2, r0, #1
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	d1d6      	bne.n	8000c54 <_svfiprintf_r+0x174>
 8000ca6:	89ab      	ldrh	r3, [r5, #12]
 8000ca8:	065b      	lsls	r3, r3, #25
 8000caa:	f53f af2d 	bmi.w	8000b08 <_svfiprintf_r+0x28>
 8000cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000cb0:	e72c      	b.n	8000b0c <_svfiprintf_r+0x2c>
 8000cb2:	ab03      	add	r3, sp, #12
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	462a      	mov	r2, r5
 8000cb8:	4b05      	ldr	r3, [pc, #20]	@ (8000cd0 <_svfiprintf_r+0x1f0>)
 8000cba:	a904      	add	r1, sp, #16
 8000cbc:	4638      	mov	r0, r7
 8000cbe:	f000 f879 	bl	8000db4 <_printf_i>
 8000cc2:	e7ed      	b.n	8000ca0 <_svfiprintf_r+0x1c0>
 8000cc4:	080010f5 	.word	0x080010f5
 8000cc8:	080010ff 	.word	0x080010ff
 8000ccc:	00000000 	.word	0x00000000
 8000cd0:	08000a29 	.word	0x08000a29
 8000cd4:	080010fb 	.word	0x080010fb

08000cd8 <_printf_common>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	4616      	mov	r6, r2
 8000cde:	4698      	mov	r8, r3
 8000ce0:	688a      	ldr	r2, [r1, #8]
 8000ce2:	690b      	ldr	r3, [r1, #16]
 8000ce4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	bfb8      	it	lt
 8000cec:	4613      	movlt	r3, r2
 8000cee:	6033      	str	r3, [r6, #0]
 8000cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000cf4:	4607      	mov	r7, r0
 8000cf6:	460c      	mov	r4, r1
 8000cf8:	b10a      	cbz	r2, 8000cfe <_printf_common+0x26>
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	6033      	str	r3, [r6, #0]
 8000cfe:	6823      	ldr	r3, [r4, #0]
 8000d00:	0699      	lsls	r1, r3, #26
 8000d02:	bf42      	ittt	mi
 8000d04:	6833      	ldrmi	r3, [r6, #0]
 8000d06:	3302      	addmi	r3, #2
 8000d08:	6033      	strmi	r3, [r6, #0]
 8000d0a:	6825      	ldr	r5, [r4, #0]
 8000d0c:	f015 0506 	ands.w	r5, r5, #6
 8000d10:	d106      	bne.n	8000d20 <_printf_common+0x48>
 8000d12:	f104 0a19 	add.w	sl, r4, #25
 8000d16:	68e3      	ldr	r3, [r4, #12]
 8000d18:	6832      	ldr	r2, [r6, #0]
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	dc26      	bgt.n	8000d6e <_printf_common+0x96>
 8000d20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d24:	6822      	ldr	r2, [r4, #0]
 8000d26:	3b00      	subs	r3, #0
 8000d28:	bf18      	it	ne
 8000d2a:	2301      	movne	r3, #1
 8000d2c:	0692      	lsls	r2, r2, #26
 8000d2e:	d42b      	bmi.n	8000d88 <_printf_common+0xb0>
 8000d30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d34:	4641      	mov	r1, r8
 8000d36:	4638      	mov	r0, r7
 8000d38:	47c8      	blx	r9
 8000d3a:	3001      	adds	r0, #1
 8000d3c:	d01e      	beq.n	8000d7c <_printf_common+0xa4>
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	6922      	ldr	r2, [r4, #16]
 8000d42:	f003 0306 	and.w	r3, r3, #6
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf02      	ittt	eq
 8000d4a:	68e5      	ldreq	r5, [r4, #12]
 8000d4c:	6833      	ldreq	r3, [r6, #0]
 8000d4e:	1aed      	subeq	r5, r5, r3
 8000d50:	68a3      	ldr	r3, [r4, #8]
 8000d52:	bf0c      	ite	eq
 8000d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d58:	2500      	movne	r5, #0
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	bfc4      	itt	gt
 8000d5e:	1a9b      	subgt	r3, r3, r2
 8000d60:	18ed      	addgt	r5, r5, r3
 8000d62:	2600      	movs	r6, #0
 8000d64:	341a      	adds	r4, #26
 8000d66:	42b5      	cmp	r5, r6
 8000d68:	d11a      	bne.n	8000da0 <_printf_common+0xc8>
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	e008      	b.n	8000d80 <_printf_common+0xa8>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	4652      	mov	r2, sl
 8000d72:	4641      	mov	r1, r8
 8000d74:	4638      	mov	r0, r7
 8000d76:	47c8      	blx	r9
 8000d78:	3001      	adds	r0, #1
 8000d7a:	d103      	bne.n	8000d84 <_printf_common+0xac>
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	3501      	adds	r5, #1
 8000d86:	e7c6      	b.n	8000d16 <_printf_common+0x3e>
 8000d88:	18e1      	adds	r1, r4, r3
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	2030      	movs	r0, #48	@ 0x30
 8000d8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d92:	4422      	add	r2, r4
 8000d94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	e7c7      	b.n	8000d30 <_printf_common+0x58>
 8000da0:	2301      	movs	r3, #1
 8000da2:	4622      	mov	r2, r4
 8000da4:	4641      	mov	r1, r8
 8000da6:	4638      	mov	r0, r7
 8000da8:	47c8      	blx	r9
 8000daa:	3001      	adds	r0, #1
 8000dac:	d0e6      	beq.n	8000d7c <_printf_common+0xa4>
 8000dae:	3601      	adds	r6, #1
 8000db0:	e7d9      	b.n	8000d66 <_printf_common+0x8e>
	...

08000db4 <_printf_i>:
 8000db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000db8:	7e0f      	ldrb	r7, [r1, #24]
 8000dba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000dbc:	2f78      	cmp	r7, #120	@ 0x78
 8000dbe:	4691      	mov	r9, r2
 8000dc0:	4680      	mov	r8, r0
 8000dc2:	460c      	mov	r4, r1
 8000dc4:	469a      	mov	sl, r3
 8000dc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000dca:	d807      	bhi.n	8000ddc <_printf_i+0x28>
 8000dcc:	2f62      	cmp	r7, #98	@ 0x62
 8000dce:	d80a      	bhi.n	8000de6 <_printf_i+0x32>
 8000dd0:	2f00      	cmp	r7, #0
 8000dd2:	f000 80d2 	beq.w	8000f7a <_printf_i+0x1c6>
 8000dd6:	2f58      	cmp	r7, #88	@ 0x58
 8000dd8:	f000 80b9 	beq.w	8000f4e <_printf_i+0x19a>
 8000ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000de0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000de4:	e03a      	b.n	8000e5c <_printf_i+0xa8>
 8000de6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000dea:	2b15      	cmp	r3, #21
 8000dec:	d8f6      	bhi.n	8000ddc <_printf_i+0x28>
 8000dee:	a101      	add	r1, pc, #4	@ (adr r1, 8000df4 <_printf_i+0x40>)
 8000df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000df4:	08000e4d 	.word	0x08000e4d
 8000df8:	08000e61 	.word	0x08000e61
 8000dfc:	08000ddd 	.word	0x08000ddd
 8000e00:	08000ddd 	.word	0x08000ddd
 8000e04:	08000ddd 	.word	0x08000ddd
 8000e08:	08000ddd 	.word	0x08000ddd
 8000e0c:	08000e61 	.word	0x08000e61
 8000e10:	08000ddd 	.word	0x08000ddd
 8000e14:	08000ddd 	.word	0x08000ddd
 8000e18:	08000ddd 	.word	0x08000ddd
 8000e1c:	08000ddd 	.word	0x08000ddd
 8000e20:	08000f61 	.word	0x08000f61
 8000e24:	08000e8b 	.word	0x08000e8b
 8000e28:	08000f1b 	.word	0x08000f1b
 8000e2c:	08000ddd 	.word	0x08000ddd
 8000e30:	08000ddd 	.word	0x08000ddd
 8000e34:	08000f83 	.word	0x08000f83
 8000e38:	08000ddd 	.word	0x08000ddd
 8000e3c:	08000e8b 	.word	0x08000e8b
 8000e40:	08000ddd 	.word	0x08000ddd
 8000e44:	08000ddd 	.word	0x08000ddd
 8000e48:	08000f23 	.word	0x08000f23
 8000e4c:	6833      	ldr	r3, [r6, #0]
 8000e4e:	1d1a      	adds	r2, r3, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6032      	str	r2, [r6, #0]
 8000e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e09d      	b.n	8000f9c <_printf_i+0x1e8>
 8000e60:	6833      	ldr	r3, [r6, #0]
 8000e62:	6820      	ldr	r0, [r4, #0]
 8000e64:	1d19      	adds	r1, r3, #4
 8000e66:	6031      	str	r1, [r6, #0]
 8000e68:	0606      	lsls	r6, r0, #24
 8000e6a:	d501      	bpl.n	8000e70 <_printf_i+0xbc>
 8000e6c:	681d      	ldr	r5, [r3, #0]
 8000e6e:	e003      	b.n	8000e78 <_printf_i+0xc4>
 8000e70:	0645      	lsls	r5, r0, #25
 8000e72:	d5fb      	bpl.n	8000e6c <_printf_i+0xb8>
 8000e74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	da03      	bge.n	8000e84 <_printf_i+0xd0>
 8000e7c:	232d      	movs	r3, #45	@ 0x2d
 8000e7e:	426d      	negs	r5, r5
 8000e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e84:	4859      	ldr	r0, [pc, #356]	@ (8000fec <_printf_i+0x238>)
 8000e86:	230a      	movs	r3, #10
 8000e88:	e011      	b.n	8000eae <_printf_i+0xfa>
 8000e8a:	6821      	ldr	r1, [r4, #0]
 8000e8c:	6833      	ldr	r3, [r6, #0]
 8000e8e:	0608      	lsls	r0, r1, #24
 8000e90:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e94:	d402      	bmi.n	8000e9c <_printf_i+0xe8>
 8000e96:	0649      	lsls	r1, r1, #25
 8000e98:	bf48      	it	mi
 8000e9a:	b2ad      	uxthmi	r5, r5
 8000e9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e9e:	4853      	ldr	r0, [pc, #332]	@ (8000fec <_printf_i+0x238>)
 8000ea0:	6033      	str	r3, [r6, #0]
 8000ea2:	bf14      	ite	ne
 8000ea4:	230a      	movne	r3, #10
 8000ea6:	2308      	moveq	r3, #8
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000eae:	6866      	ldr	r6, [r4, #4]
 8000eb0:	60a6      	str	r6, [r4, #8]
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	bfa2      	ittt	ge
 8000eb6:	6821      	ldrge	r1, [r4, #0]
 8000eb8:	f021 0104 	bicge.w	r1, r1, #4
 8000ebc:	6021      	strge	r1, [r4, #0]
 8000ebe:	b90d      	cbnz	r5, 8000ec4 <_printf_i+0x110>
 8000ec0:	2e00      	cmp	r6, #0
 8000ec2:	d04b      	beq.n	8000f5c <_printf_i+0x1a8>
 8000ec4:	4616      	mov	r6, r2
 8000ec6:	fbb5 f1f3 	udiv	r1, r5, r3
 8000eca:	fb03 5711 	mls	r7, r3, r1, r5
 8000ece:	5dc7      	ldrb	r7, [r0, r7]
 8000ed0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ed4:	462f      	mov	r7, r5
 8000ed6:	42bb      	cmp	r3, r7
 8000ed8:	460d      	mov	r5, r1
 8000eda:	d9f4      	bls.n	8000ec6 <_printf_i+0x112>
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d10b      	bne.n	8000ef8 <_printf_i+0x144>
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	07df      	lsls	r7, r3, #31
 8000ee4:	d508      	bpl.n	8000ef8 <_printf_i+0x144>
 8000ee6:	6923      	ldr	r3, [r4, #16]
 8000ee8:	6861      	ldr	r1, [r4, #4]
 8000eea:	4299      	cmp	r1, r3
 8000eec:	bfde      	ittt	le
 8000eee:	2330      	movle	r3, #48	@ 0x30
 8000ef0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000ef4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000ef8:	1b92      	subs	r2, r2, r6
 8000efa:	6122      	str	r2, [r4, #16]
 8000efc:	f8cd a000 	str.w	sl, [sp]
 8000f00:	464b      	mov	r3, r9
 8000f02:	aa03      	add	r2, sp, #12
 8000f04:	4621      	mov	r1, r4
 8000f06:	4640      	mov	r0, r8
 8000f08:	f7ff fee6 	bl	8000cd8 <_printf_common>
 8000f0c:	3001      	adds	r0, #1
 8000f0e:	d14a      	bne.n	8000fa6 <_printf_i+0x1f2>
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	b004      	add	sp, #16
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	f043 0320 	orr.w	r3, r3, #32
 8000f20:	6023      	str	r3, [r4, #0]
 8000f22:	4833      	ldr	r0, [pc, #204]	@ (8000ff0 <_printf_i+0x23c>)
 8000f24:	2778      	movs	r7, #120	@ 0x78
 8000f26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	6831      	ldr	r1, [r6, #0]
 8000f2e:	061f      	lsls	r7, r3, #24
 8000f30:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f34:	d402      	bmi.n	8000f3c <_printf_i+0x188>
 8000f36:	065f      	lsls	r7, r3, #25
 8000f38:	bf48      	it	mi
 8000f3a:	b2ad      	uxthmi	r5, r5
 8000f3c:	6031      	str	r1, [r6, #0]
 8000f3e:	07d9      	lsls	r1, r3, #31
 8000f40:	bf44      	itt	mi
 8000f42:	f043 0320 	orrmi.w	r3, r3, #32
 8000f46:	6023      	strmi	r3, [r4, #0]
 8000f48:	b11d      	cbz	r5, 8000f52 <_printf_i+0x19e>
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	e7ac      	b.n	8000ea8 <_printf_i+0xf4>
 8000f4e:	4827      	ldr	r0, [pc, #156]	@ (8000fec <_printf_i+0x238>)
 8000f50:	e7e9      	b.n	8000f26 <_printf_i+0x172>
 8000f52:	6823      	ldr	r3, [r4, #0]
 8000f54:	f023 0320 	bic.w	r3, r3, #32
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	e7f6      	b.n	8000f4a <_printf_i+0x196>
 8000f5c:	4616      	mov	r6, r2
 8000f5e:	e7bd      	b.n	8000edc <_printf_i+0x128>
 8000f60:	6833      	ldr	r3, [r6, #0]
 8000f62:	6825      	ldr	r5, [r4, #0]
 8000f64:	6961      	ldr	r1, [r4, #20]
 8000f66:	1d18      	adds	r0, r3, #4
 8000f68:	6030      	str	r0, [r6, #0]
 8000f6a:	062e      	lsls	r6, r5, #24
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	d501      	bpl.n	8000f74 <_printf_i+0x1c0>
 8000f70:	6019      	str	r1, [r3, #0]
 8000f72:	e002      	b.n	8000f7a <_printf_i+0x1c6>
 8000f74:	0668      	lsls	r0, r5, #25
 8000f76:	d5fb      	bpl.n	8000f70 <_printf_i+0x1bc>
 8000f78:	8019      	strh	r1, [r3, #0]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	6123      	str	r3, [r4, #16]
 8000f7e:	4616      	mov	r6, r2
 8000f80:	e7bc      	b.n	8000efc <_printf_i+0x148>
 8000f82:	6833      	ldr	r3, [r6, #0]
 8000f84:	1d1a      	adds	r2, r3, #4
 8000f86:	6032      	str	r2, [r6, #0]
 8000f88:	681e      	ldr	r6, [r3, #0]
 8000f8a:	6862      	ldr	r2, [r4, #4]
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4630      	mov	r0, r6
 8000f90:	f7ff f926 	bl	80001e0 <memchr>
 8000f94:	b108      	cbz	r0, 8000f9a <_printf_i+0x1e6>
 8000f96:	1b80      	subs	r0, r0, r6
 8000f98:	6060      	str	r0, [r4, #4]
 8000f9a:	6863      	ldr	r3, [r4, #4]
 8000f9c:	6123      	str	r3, [r4, #16]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fa4:	e7aa      	b.n	8000efc <_printf_i+0x148>
 8000fa6:	6923      	ldr	r3, [r4, #16]
 8000fa8:	4632      	mov	r2, r6
 8000faa:	4649      	mov	r1, r9
 8000fac:	4640      	mov	r0, r8
 8000fae:	47d0      	blx	sl
 8000fb0:	3001      	adds	r0, #1
 8000fb2:	d0ad      	beq.n	8000f10 <_printf_i+0x15c>
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	079b      	lsls	r3, r3, #30
 8000fb8:	d413      	bmi.n	8000fe2 <_printf_i+0x22e>
 8000fba:	68e0      	ldr	r0, [r4, #12]
 8000fbc:	9b03      	ldr	r3, [sp, #12]
 8000fbe:	4298      	cmp	r0, r3
 8000fc0:	bfb8      	it	lt
 8000fc2:	4618      	movlt	r0, r3
 8000fc4:	e7a6      	b.n	8000f14 <_printf_i+0x160>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	4632      	mov	r2, r6
 8000fca:	4649      	mov	r1, r9
 8000fcc:	4640      	mov	r0, r8
 8000fce:	47d0      	blx	sl
 8000fd0:	3001      	adds	r0, #1
 8000fd2:	d09d      	beq.n	8000f10 <_printf_i+0x15c>
 8000fd4:	3501      	adds	r5, #1
 8000fd6:	68e3      	ldr	r3, [r4, #12]
 8000fd8:	9903      	ldr	r1, [sp, #12]
 8000fda:	1a5b      	subs	r3, r3, r1
 8000fdc:	42ab      	cmp	r3, r5
 8000fde:	dcf2      	bgt.n	8000fc6 <_printf_i+0x212>
 8000fe0:	e7eb      	b.n	8000fba <_printf_i+0x206>
 8000fe2:	2500      	movs	r5, #0
 8000fe4:	f104 0619 	add.w	r6, r4, #25
 8000fe8:	e7f5      	b.n	8000fd6 <_printf_i+0x222>
 8000fea:	bf00      	nop
 8000fec:	08001106 	.word	0x08001106
 8000ff0:	08001117 	.word	0x08001117

08000ff4 <memmove>:
 8000ff4:	4288      	cmp	r0, r1
 8000ff6:	b510      	push	{r4, lr}
 8000ff8:	eb01 0402 	add.w	r4, r1, r2
 8000ffc:	d902      	bls.n	8001004 <memmove+0x10>
 8000ffe:	4284      	cmp	r4, r0
 8001000:	4623      	mov	r3, r4
 8001002:	d807      	bhi.n	8001014 <memmove+0x20>
 8001004:	1e43      	subs	r3, r0, #1
 8001006:	42a1      	cmp	r1, r4
 8001008:	d008      	beq.n	800101c <memmove+0x28>
 800100a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800100e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001012:	e7f8      	b.n	8001006 <memmove+0x12>
 8001014:	4402      	add	r2, r0
 8001016:	4601      	mov	r1, r0
 8001018:	428a      	cmp	r2, r1
 800101a:	d100      	bne.n	800101e <memmove+0x2a>
 800101c:	bd10      	pop	{r4, pc}
 800101e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001026:	e7f7      	b.n	8001018 <memmove+0x24>

08001028 <_sbrk_r>:
 8001028:	b538      	push	{r3, r4, r5, lr}
 800102a:	4d06      	ldr	r5, [pc, #24]	@ (8001044 <_sbrk_r+0x1c>)
 800102c:	2300      	movs	r3, #0
 800102e:	4604      	mov	r4, r0
 8001030:	4608      	mov	r0, r1
 8001032:	602b      	str	r3, [r5, #0]
 8001034:	f7ff fb14 	bl	8000660 <_sbrk>
 8001038:	1c43      	adds	r3, r0, #1
 800103a:	d102      	bne.n	8001042 <_sbrk_r+0x1a>
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	b103      	cbz	r3, 8001042 <_sbrk_r+0x1a>
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	bd38      	pop	{r3, r4, r5, pc}
 8001044:	200005b0 	.word	0x200005b0

08001048 <memcpy>:
 8001048:	440a      	add	r2, r1
 800104a:	4291      	cmp	r1, r2
 800104c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001050:	d100      	bne.n	8001054 <memcpy+0xc>
 8001052:	4770      	bx	lr
 8001054:	b510      	push	{r4, lr}
 8001056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800105a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800105e:	4291      	cmp	r1, r2
 8001060:	d1f9      	bne.n	8001056 <memcpy+0xe>
 8001062:	bd10      	pop	{r4, pc}

08001064 <_realloc_r>:
 8001064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001068:	4680      	mov	r8, r0
 800106a:	4615      	mov	r5, r2
 800106c:	460c      	mov	r4, r1
 800106e:	b921      	cbnz	r1, 800107a <_realloc_r+0x16>
 8001070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001074:	4611      	mov	r1, r2
 8001076:	f7ff bc4b 	b.w	8000910 <_malloc_r>
 800107a:	b92a      	cbnz	r2, 8001088 <_realloc_r+0x24>
 800107c:	f7ff fbdc 	bl	8000838 <_free_r>
 8001080:	2400      	movs	r4, #0
 8001082:	4620      	mov	r0, r4
 8001084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001088:	f000 f81a 	bl	80010c0 <_malloc_usable_size_r>
 800108c:	4285      	cmp	r5, r0
 800108e:	4606      	mov	r6, r0
 8001090:	d802      	bhi.n	8001098 <_realloc_r+0x34>
 8001092:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001096:	d8f4      	bhi.n	8001082 <_realloc_r+0x1e>
 8001098:	4629      	mov	r1, r5
 800109a:	4640      	mov	r0, r8
 800109c:	f7ff fc38 	bl	8000910 <_malloc_r>
 80010a0:	4607      	mov	r7, r0
 80010a2:	2800      	cmp	r0, #0
 80010a4:	d0ec      	beq.n	8001080 <_realloc_r+0x1c>
 80010a6:	42b5      	cmp	r5, r6
 80010a8:	462a      	mov	r2, r5
 80010aa:	4621      	mov	r1, r4
 80010ac:	bf28      	it	cs
 80010ae:	4632      	movcs	r2, r6
 80010b0:	f7ff ffca 	bl	8001048 <memcpy>
 80010b4:	4621      	mov	r1, r4
 80010b6:	4640      	mov	r0, r8
 80010b8:	f7ff fbbe 	bl	8000838 <_free_r>
 80010bc:	463c      	mov	r4, r7
 80010be:	e7e0      	b.n	8001082 <_realloc_r+0x1e>

080010c0 <_malloc_usable_size_r>:
 80010c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010c4:	1f18      	subs	r0, r3, #4
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bfbc      	itt	lt
 80010ca:	580b      	ldrlt	r3, [r1, r0]
 80010cc:	18c0      	addlt	r0, r0, r3
 80010ce:	4770      	bx	lr

080010d0 <_init>:
 80010d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d2:	bf00      	nop
 80010d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010d6:	bc08      	pop	{r3}
 80010d8:	469e      	mov	lr, r3
 80010da:	4770      	bx	lr

080010dc <_fini>:
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010de:	bf00      	nop
 80010e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010e2:	bc08      	pop	{r3}
 80010e4:	469e      	mov	lr, r3
 80010e6:	4770      	bx	lr
